[{"content":"意识形态 左翼与右翼 起源于法国大革命时期；通途理解左翼变革，自由派；右翼保守派\n","permalink":"blog.2332334.xyz/posts/mix/%E6%84%8F%E8%AF%86%E5%BD%A2%E6%80%81/","summary":"","title":"意识形态"},{"content":"UFW debian 系列默认防火墙\ninstall sudo apt update sudo apt install ufw setting # 默认关闭全部外部链接端口 ufw default deny # 拒绝传入，运行传出 sudo ufw default allow outgoing sudo ufw default deny incoming # 服务启动状态 sudo ufw status # 新装运行通行端口 sudo ufw allow 8080 sudo ufw allow 8080/tcp # 删除端口 sudo ufw delete allow 8080 # 运行特定IP sudo ufw allow from 192.168.1.1 # 开启服务 ufw enable 查看端口使用情况\n# tcp端口 netstat -ntpl # udp端口 netstat -aupl 更多详细内容参考 seafog - ubuntu ufw防火墙的基本使用\n","permalink":"blog.2332334.xyz/posts/system/linux-ufw/","summary":"","title":"Linux Ufw"},{"content":" 修改Tstrap主题 难顶,今天一点睡觉迷迷糊糊睡到4点睡不着了,只好起来继续做笔记:\n正在使用的该款主题使用的 bootstrap,他的默认 table 标签没有边框!\n然后昨天写的那几篇就很难看,想着给加个边框!\n修改如下:\n在 footer.php 中添加 js 实现的\n\u0026lt;script\u0026gt; $(document).ready(function() { var that = $(\u0026#34;.jumbotron\u0026#34;).find(\u0026#34;table\u0026#34;); for (var i = 0; i \u0026lt; that.length; i++) { that.eq(i).addClass(\u0026#34;table table-bordered\u0026#34;); } }); \u0026lt;/script\u0026gt; 后面应该会一直使用这个主题并进行自定义,更新GitHub地址\n改完花了1-2h,有点菜啊!继续做笔记!\n参考链接 JQ,js给所有table元素标签添加样式类，并且外面再套一个div ","permalink":"blog.2332334.xyz/posts/blog/typecho-change-theme2/","summary":"","title":"typecho-change-theme2"},{"content":"Scrapy 中文文档\n官方文档\n安装 pip install scrapy 示例 pip install scrapy cat \u0026gt; myspider.py \u0026lt;\u0026lt;EOF import scrapy class BlogSpider(scrapy.Spider): name = \u0026#39;blogspider\u0026#39; start_urls = [\u0026#39;https://www.zyte.com/blog/\u0026#39;] def parse(self, response): for title in response.css(\u0026#39;.oxy-post-title\u0026#39;): yield {\u0026#39;title\u0026#39;: title.css(\u0026#39;::text\u0026#39;).get()} for next_page in response.css(\u0026#39;a.next\u0026#39;): yield response.follow(next_page, self.parse) EOF scrapy runspider myspider.py 相关cli scrapy startproject [projectName] # 新建Scrapy项目 scrapy genspider [spiderName] [\u0026#34;domain\u0026#34;] # 新建爬虫并指定域名 scrapy crawl [spiderName] # 运行该爬虫 scrapy crawl [spiderName] -o [fileName] # 保存数据[json/jsonl/csv/xml] scrapy runspider [spiderName.py] # 未创建项目运行爬虫 scrapy list # 列出项目中的爬虫 header 1.修改settings配置文件 # Override the default request headers: DEFAULT_REQUEST_HEADERS = { \u0026#39;Accept\u0026#39;: \u0026#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\u0026#39;, \u0026#39;Accept-Language\u0026#39;: \u0026#39;en\u0026#39;, } 2.重新爬虫中的start_request # -*- coding: utf-8 -*- import scrapy import random class ShortSpider(scrapy.Spider): name = \u0026#39;short\u0026#39; allow_domains = [\u0026#39;movie.douban.com\u0026#39;] # 重写start_requests方法 def start_requests(self): # 浏览器用户代理 ua_list = [\u0026#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv2.0.1) Gecko/20100101 Firefox/4.0.1\u0026#34;, \u0026#34;Mozilla/5.0 (Windows NT 6.1; rv2.0.1) Gecko/20100101 Firefox/4.0.1\u0026#34;, \u0026#34;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11\u0026#34;, \u0026#34;Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11\u0026#34;, \u0026#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\u0026#34; ] url_agent = random.choice(ua_list) headers = { \u0026#39;User-Agent\u0026#39;:url_agent } # 指定cookies cookies = { \u0026#39;key\u0026#39;:\u0026#39;value\u0026#39;, \u0026#39;key\u0026#39;:\u0026#39;value\u0026#39;, \u0026#39;key\u0026#39;:\u0026#39;value\u0026#39; } urls = [ \u0026#39;https://movie.douban.com/subject/26266893\u0026#39; ] for url in urls: yield scrapy.Request(url=url, headers=headers, cookies=cookies, callback=self.parse) domain 未能运行callback函数的处理方法\n1.scrapy.Request 添加 dont_filter=True ,即不进行域名检查\n# example yield scrapy.Request(url=slogansurl,callback=self.parse_slogans,meta={\u0026#39;item\u0026#39;: item },dont_filter=True) 参考 scrapy设置headers，cookies ","permalink":"blog.2332334.xyz/posts/code/python/scrapy/","summary":"","title":"Scrapy"},{"content":"kubernetes 基于minikuber 练习\n跟随教程 https://github.com/guangzhengli/k8s-tutorials?tab=readme-ov-file#kubernetes-tutorials\n# 暴露端口 kubectl port-forward [pod_name] [local_port]:[pod_port] # 描述 kubectl describe pod [pod_name] kubectl get endpoints kubectl exec -it nginx -- /bin/sh pods # show all pods kubectl pods get kubectl delete pod [pod_name] kubectl describe pod [pod_name] kubectl get pod -o wide deplayment # version change kubectl rollout history deployment [deployment_name] kubectl rollout undo deployment/[deployment_name] --to-revision=2 service kubectl get service ","permalink":"blog.2332334.xyz/posts/software/kubernetes-new/","summary":"\u003ch1 id=\"kubernetes\"\u003ekubernetes\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e基于minikuber 练习\u003cbr\u003e\n跟随教程  \u003ca href=\"https://github.com/guangzhengli/k8s-tutorials?tab=readme-ov-file#kubernetes-tutorials\"\u003ehttps://github.com/guangzhengli/k8s-tutorials?tab=readme-ov-file#kubernetes-tutorials\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e","title":"Kubernetes"},{"content":"NEST start nest new [projectName] nest new ict [name] # create CRUD modele nest g resource [name] # 不生成测试文件 nest g resource [name] --no-spec # create servicce nest g service [servicesName] nest g controller [controllerName] nest g module [moduleName] 基本概念 Controllers Providers Modules Middleware Pipes","permalink":"blog.2332334.xyz/posts/web/nest/","summary":"","title":"Nest"},{"content":"nvm—node版本管理 nvm github\ninstall # 安装脚本，最后访问上面github链接使用最新版本 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash # 环境变量 export NVM_DIR=\u0026#34;$([ -z \u0026#34;${XDG_CONFIG_HOME-}\u0026#34; ] \u0026amp;\u0026amp; printf %s \u0026#34;${HOME}/.nvm\u0026#34; || printf %s \u0026#34;${XDG_CONFIG_HOME}/nvm\u0026#34;)\u0026#34; [ -s \u0026#34;$NVM_DIR/nvm.sh\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/nvm.sh\u0026#34; # This loads nvm source ~/.zshrc 基本使用 # 展示版本 nvm ls nvm ls-remote # 下载 # 这将下载最新node nvm run node --version # 使用 nvm use system nvm run system --version # 当前cmd一次新使用 nvm exec # 重命名 nvm alias my_alias v14.4.0 # 设置默认版本 nvm alias default node # 查看安装目录 nvm which 12.22 # 停用nvm，使用默认的npm nvm deactivate export NVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist export NVM_IOJS_ORG_MIRROR=https://iojs.org/dist ","permalink":"blog.2332334.xyz/posts/web/node_nvm/","summary":"","title":"Node_nvm"},{"content":"React react 元素不可变；一旦创建，就无法更改子元素或者属性\n","permalink":"blog.2332334.xyz/posts/web/react/","summary":"","title":"react"},{"content":"python 版本管理 pyenv自动安装脚本\ncurl https://pyenv.run | bash 一.pyenv基本使用 # 查看当前版本 pyenv version # 查看所有版本 pyenv versions # 查看所有可安装的版本 pyenv install --list # 安装指定版本 pyenv install 3.6.5 # 安装新版本后rehash一下 pyenv rehash # 删除指定版本 pyenv uninstall 3.5.2 # 指定全局版本 pyenv global 3.6.5 # 指定多个全局版本, 3版本优先 pyenv global 3.6.5 2.7.14 实际上当你切换版本后, 相应的pip和包仓库都是会自动切换过去的\n二.MACOS install时CMD给出下载链接后无下载进度，无法下载 Downloading Python-2.7.18.tar.xz... -\u0026gt; https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tar.xz 用浏览器下载上面链接的文件将其复制到 ~/.pyenv/cache 目录下再次执行intall即可\npyenv 只能管理通过它安装的python，无法管理单独下载python安装包安装的版本\n三 用于管理 virtualenv 的 pyenv 插件","permalink":"blog.2332334.xyz/posts/code/python/python-pyenv-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/","summary":"","title":"Python_版本管理"},{"content":"python 虚拟环境 venv # 在当前目录创建虚拟环境 python3 -m venv . pyvenv 是针对 Python 3.3 和 3.4 创建虚拟环境的推荐工具，并在 3.5 中被直接执行 venv 的方式所取代。\npyenv-virtualenv # 创建2.7.10 python版本的环境-环境名为 my-virtual-env-2.7.10 pyenv virtualenv 2.7.10 my-virtual-env-2.7.10 # 创建当前正在使用python版本的环境 pyenv virtualenv my-virtual-env-current_python_version # 查看已创建的环境 pyenv virtualenvs # 激活环境 pyenv activate \u0026lt;name\u0026gt; pyenv deactivate # 删除 pyenv uninstall my-virtual-env 上述创建的版本目录都在 $(pyenv root)/versions 下\npy3.3以上版本使用venv即可\nmore venv ","permalink":"blog.2332334.xyz/posts/code/python/python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/","summary":"","title":"Python_虚拟环境"},{"content":"Hugo go 写的静态网站生成器；类似的node hexo，vue vuePress等\n一.基本使用 # 初始化项目 hugo new site [dir_name] # 下载主题 git submodule add [theme_url] [theme_dir] # 新建文章 hugo new content/posts/my-first-post.md # 运行 hugo server # 渲染包含草稿内容 hugo server -D # 部署 hugo 二.配置文件hugo.toml paperMod 主题配置参考\n三.主题 在自己目录相同位置，创建相同文件即可覆盖主题内容\n在下载主题后有额外信息的情况下\n","permalink":"blog.2332334.xyz/posts/blog/hugo/","summary":"\u003ch1 id=\"hugohttpsgohugoio\"\u003e\u003ca href=\"https://gohugo.io/\"\u003eHugo\u003c/a\u003e\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003ego 写的静态网站生成器；类似的node hexo，vue vuePress等\u003c/p\u003e\n\u003c/blockquote\u003e","title":"Hugo"},{"content":"start web3 金融属性，分类账本-主账本记录枝干账本总体金额，枝干账本记录自身明细数据\n区块链即hase，密钥作为用户的公开分布式账本，因其每个hase对应不同区块，并链接成一条去中心化默克尔hase树；\n挖矿就是所有的分支都争抢成为主躯干的机会，在这个过程中会生成一定token作为运算奖励\n小趣闻： 2010 年 5 月 22 日 佛罗里达州男子 Laszlo Hanyecz 同意支付 10,000 个比特币来购买两个棒约翰披萨\n支付了大约 25 美元，而 10,000 个比特币当时的价值约为 41 美元\n货币\n中心化 双花问题 采用度 一.key word 密码学 共识机制 交易\nhash 双花 拜占庭问题 中本聪共识 默克尔树 私钥\u0026amp;公钥 椭圆曲线数字签名算法（ECDSA） 二. smart contract defi\ngameFi\n","permalink":"blog.2332334.xyz/posts/web3/start_web3/","summary":"\u003ch1 id=\"start-web3\"\u003estart web3\u003c/h1\u003e\n\u003cp\u003e金融属性，分类账本-主账本记录枝干账本总体金额，枝干账本记录自身明细数据\u003c/p\u003e\n\u003cp\u003e区块链即hase，密钥作为用户的公开分布式账本，因其每个hase对应不同区块，并链接成一条去中心化默克尔hase树；\u003cbr\u003e\n挖矿就是所有的分支都争抢成为主躯干的机会，在这个过程中会生成一定token作为运算奖励\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e小趣闻： 2010 年 5 月 22 日 佛罗里达州男子 Laszlo Hanyecz 同意支付 10,000 个比特币来购买两个棒约翰披萨\u003cbr\u003e\n支付了大约 25 美元，而 10,000 个比特币当时的价值约为 41 美元\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e货币\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e中心化\u003c/li\u003e\n\u003cli\u003e双花问题\u003c/li\u003e\n\u003cli\u003e采用度\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"一key-word\"\u003e一.key word\u003c/h2\u003e\n\u003cp\u003e密码学\n共识机制\n交易\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ehash\u003c/li\u003e\n\u003cli\u003e双花\u003c/li\u003e\n\u003cli\u003e拜占庭问题\u003c/li\u003e\n\u003cli\u003e中本聪共识\u003c/li\u003e\n\u003cli\u003e默克尔树\u003c/li\u003e\n\u003cli\u003e私钥\u0026amp;公钥\u003c/li\u003e\n\u003cli\u003e椭圆曲线数字签名算法（ECDSA）\u003c/li\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"二-smart-contract\"\u003e二. smart contract\u003c/h2\u003e\n\u003cp\u003edefi\u003c/p\u003e\n\u003cp\u003egameFi\u003c/p\u003e","title":"start_web3"},{"content":"Hexo-next主题使用并上传Github 1. hexo 安装 npm install hexo-cli -g hexo init blog cd blog npm install 2. hexo 主题安装 cd your-hexo-site # 老版本仓库已不再维护 # git clone https://github.com/iissnan/hexo-theme-next themes/next # git clone https://github.com/theme-next/hexo-theme-next themes/next # 这个库2-3年更新的了 npm install hexo-theme-next # npm 安装这个在维护版本，安装完成后修改配置文件中theme配置 hexo server --debug # 查看安装是否ok，并安装缺失的相关包 安装报错依据提示查看报错信息安装相关包\n#npm i hexo-renderer-swig #npm install nunjucks npm install -- save-dev hexo-util 3. 使用一键部署脚本配置并上传github 按如下配置\ndeploy: type: \u0026#39;git\u0026#39; repo: https://github.com/\u0026lt;your github name\u0026gt;/\u0026lt;your github name\u0026gt;.github.io branch: gh-pages git init npm install hexo-deployer-git --save hexo clean \u0026amp; hexo g \u0026amp; hexo d 如上即可访问 \u0026lt;your github name\u0026gt;.github.io 访问部署的页面\n","permalink":"blog.2332334.xyz/posts/blog/hexo-next-theme/","summary":"","title":"Hexo Next Theme"},{"content":"位运算及进制转换 计算机进制 二进制 八进制 十进制 十六进制 数制: 计数制，技术方法，用一组固定的符号和统一的规则来表示数值！\n进制: 计数过程中进位的方法，进位计数制，人为定义的带进制的计数方法；即：X进制，逢X进位；例如：日常使用的十进制，计算机二进值等\n数位： 数字符号在数中位置 基数： X进位计数制中数位使用符号个数；即：十进制的基数为10,二进制的基数为2 位权：数制中某一位上 1 所表示的数值大小；即：十进制289，2 的位权为 100，8的位权位 10，9 的位权为 1;数位由高向低，以降幂的方式排列。 各进制使用 下标 或者 字母后缀 表示该进制数字,不带下标或者字母后缀即为十进制\n二进制 后缀字母表示 B(binary)和下标2表示\n101100112\n10110011B\n十进制中的 179\n加法和乘法运算法则:\n0+0=0 0+1=1 1+0=1 1+1=10 0×0=0 0×1=0 1×0=0 1×1=1 原码, 反码, 补码 机器码和真值\n八进制 基数R=8=2^3^\n后缀字母表示 O (octal)和下标8表示\n352.2648\n352.264O\n十进制中的 234.3515625，二进制中的 11101010.010110100\n十六进制 基数R=8=2^4^\n它由十六个数码：数字0～9加上字母A-F组成（它们分别表示十进制数10～15）\n4AC88 4AC8H 负数判定 获得十六进制8位数字，判断该值是否为正！\n正数与补码相同，补码反求原码\n各进制转换方法 and or xor 和 - 或 - 异或\n字节，波特率，bit 参考链接 博客园-原码, 反码, 补码 详解 ","permalink":"blog.2332334.xyz/posts/system/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%8F%8A%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/","summary":"","title":"位运算及进制转换"},{"content":"acme.sh 一. 证书提供商 Let’s Encrypt ZeroSSL 3.0 后默认 ZeroSSL ,相比 Let’s Encrypt ZeroSSL拥有 web 控制面板,没有速率限制,不存在同一 IP 多次申请 SSL 证书被限制的问题\nacme.sh --set-default-ca --server zerossl 二.acme.sh安装及基本使用 1.安装脚本\n# centos可能需要安装 yum install epel-release socat -y curl https://get.acme.sh | sh # 设置别名 alias acme.sh=~/.acme.sh/acme.sh 2.使用 DNS 直接解析\n使用一些服务商的 DNS API\n手动设置 DNS 记录,但是不支持自动更新所以不推荐\n这里使用 DNSAPI 来设置:\n阿里云的申请地址 Access Key ID Access Key Secret 腾讯云 DNSpod 密钥 ID 密钥 Token cloudflare # 可以通过配置文件新增对应DNS key，或者通过环境变量添加 vi ~/.acme.sh/account.conf # 阿里云添加 export Ali_Key=\u0026#34;xxx\u0026#34; export Ali_Secret=\u0026#34;xxxxxx\u0026#34; # 腾讯云添加 export DP_Id=\u0026#34;xxx\u0026#34; export DP_Key=\u0026#34;xxxxxxx\u0026#34; # cloudflare export CF_Token=\u0026#34;xx\u0026#34; 3.生成证书\n# DNS 自动验证 # 腾讯dnspod acme.sh --issue --dns dns_dp -d \u0026#34;*.mydomain.com\u0026#34; # 阿里云 acme.sh --issue --dns dns_ali -d \u0026#34;*.mydomain.com\u0026#34; # cloudflare acme.sh --issue --dns dns_cf -d \u0026#39;*.mydomain.com\u0026#39; # 手动DNS验证，需要自行配置DNS txt验证，并且到期需手动更新 acme.sh --issue -d example.com --dns \\ --yes-I-know-dns-manual-mode-enough-go-ahead-please acme.sh --renew -d example.com \\ --yes-I-know-dns-manual-mode-enough-go-ahead-please # nginx acme.sh --issue -d mydomain.com --nginx # 无web服务器验证,保证本地80端口可用 acme.sh --issue -d mydomain.com --standalone 4.复制证书\nsudo acme.sh --install-cert -d \u0026#34;*.mydomain.com\u0026#34; \\ --key-file /etc/nginx/cert/*.mydomain.com.key \\ --fullchain-file /etc/nginx/cert/*.mydomain.com.cer \\ --reloadcmd \u0026#34;service nginx force-reload\u0026#34; 如果提示权限问题可以修改配置文件所在文件夹权限\n5.最后配置nginx的ssl即可\n脚本相关命令 # 自动更新 acme.sh --upgrade --auto-upgrade # 关闭自动更新 acme.sh --upgrade --auto-upgrade 0 #查看证书 acme.sh --list acme.sh remove 域名 参考链接 letsencrypt 官网\nacme.sh 文档\nLet\u0026rsquo;s Encrypt 证书申请及配置\nacme.sh DNS-API 支持服务器文档\nLet’s Encrypt 通配符证书,泛域名 https 证书申请配置\n","permalink":"blog.2332334.xyz/posts/blog/enable_https/","summary":"\u003ch1 id=\"acmesh\"\u003eacme.sh\u003c/h1\u003e","title":"Enable_https"},{"content":"Ansible 通过ssh的python自动化运维工具\n基本概念 Control nodes(控制节点) Managed nodes(受管节点) Inventory(受控节点列表) host file 默认 /etc/ansible/hosts ;可通过 -i 指定文件位置 Modules Task Playbook YAML文件 command line 命令 解析 ansible　Ansibe AD-Hoc 临时命令执行工具，常用于临时命令的执行 ansible-config ansible-console Ansible基于Linux Consoble界面可与用户交互的命令执行工具 ansible-doc Ansible 模块功能查看工具 ansible-galaxy 下载/上传优秀代码或Roles模块 的官网平台，基于网络的 ansible-Inventory ansible-playbook Ansible 定制自动化的任务集编排工具 ansible-pull Ansible远程执行命令的工具，拉取配置而非推送配置（使用较少，海量机器时使用，对运维的架构能力要求较高） ansible-vault Ansible 文件加密工具 安装 前置要求 python2.6+ || python3.5+ pip Linux发行版 被控端如开启SELinux需要安装libselinux-python ansible-core 2.12和Ansible 5.0.0将需要Python 3.8或更高版本才能在控制节点上运行。从ansible-core 2.11开始，该项目将仅针对Python 3.8和更高版本进行打包。\nsudo pip install paramiko PyYAML Jinja2 httplib2 six Github 源码安装\ngit clone git://github.com/ansible/ansible.git --recursive cd ./ansible source ./hacking/env-setup # 在当前bash环境下读取并执行FileName中的命令 管理命令\n# 更新 git pull --rebase git submodule update --init --recursive YUM || APT || pip # install the epel-release RPM if needed on CentOS, RHEL, or Scientific Linux # https://fedoraproject.org/wiki/EPEL sudo yum install epel-release -y sudo yum install ansible # ubuntu sudo apt-get install software-properties-common sudo apt-add-repository ppa:ansible/ansible sudo apt-get update sudo apt-get install ansible # pip sudo pip install ansible ansible all -m ping --ask-pass 测试安装是否OK\nargcomplete依赖 ansible 2.9+ 用以支持命令行补全\n# CentOS sudo yum install epel-release sudo yum install python-argcomplete # ubuntu sudo apt install python-argcomplete # pip python -m pip install argcomplete 配置argcomplete # 全局配置 # bash\u0026gt;4.2 sudo activate-global-python-argcomplete # 单独配置(~/.profile || ~/.bash_profile) eval $(register-python-argcomplete ansible) eval $(register-python-argcomplete ansible-config) eval $(register-python-argcomplete ansible-console) eval $(register-python-argcomplete ansible-doc) eval $(register-python-argcomplete ansible-galaxy) eval $(register-python-argcomplete ansible-inventory) eval $(register-python-argcomplete ansible-playbook) eval $(register-python-argcomplete ansible-pull) eval $(register-python-argcomplete ansible-vault) 准备工作 受控清单 /etc/ansible/hosts 默认组 all \u0026amp; ungrouped\nexample.com: [name] 192.0.2.50 aserver.example.org [range_ep1] www[01:50].example.com [range_ep2] db-[a:f].example.com:5055 [another_name] ep ep.com YAML版本\nall: hosts: example.com: children: name: hosts: 192.0.2.50 aserver.example.org range_ep1: hosts: www[1:50].example.com range_ep2: hosts: db-[a:f].example.com:5055 分发密钥\n# 生成密钥 ssh-keygen #分发密钥 ssh-copy-id root@ip 常用模块 ansible-doc\nansible-doc yum # 获取模块 ansible-doc -l #列出已安装模块 基础测试模块 #ping测试 ansible all -m ping command 参数 解析 chdir 执行命令前切换目录 executable 切换shell执行,使用绝对路径 free_form 执行的Linux命令,右 -a 代替 creates 文件存在,则执行 removes 不存在,不执行 不支持|管道命令,执行单条命令+参数\nansible all -m command -a \u0026#39;chdir=/dev/ ls\u0026#39; shell ansible all -m shell -a \u0026#39;\u0026#39;cat /etc/passwd |grep \u0026#34;root\u0026#34;\u0026#39; copy 文件分发远程主机,支持给定内容生成文件及权限设置\n参数 解析 src 本地文件或路径 content 替换src,直接指定文件内容 dest 远程绝对路径 backup 文件内容改变后,在覆盖前备份为文件 directory_mode 设定权限 force 是否强制覆盖,默认覆盖 others file模块的选项 ansible all -m copy -a \u0026#39;src=~/test dest=/ mode=666\u0026#39; file 设置文件属性,新建删除文件等\n参数 解析 force 是否强制创建软链接 group 组,后加 mode owner 后加 path recurse 递归设置文件属性,后加 src,只应用于state=link dest 被链接路径只应用于state=link state 状态 \u0026ndash;directory 如果目录不存在，就创建目录 \u0026ndash;file 即使文件不存在，也不会被创建 \u0026ndash;link 创建软链接 \u0026ndash;hard 创建硬链接 \u0026ndash;touch 如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间 \u0026ndash;absent 删除目录、文件或者取消链接文件 fetch 拉取远程文件至本地\n参数 解析 dest 存放目录 src 远程文件 ansible all -m fetch -a \u0026#39;src=/root/hello dest=/root\u0026#39; script 使本机脚本在控制机运行\nansible all -m script -a \u0026#39;/root/test.sh\u0026#39; 文档 Ansible中文权威指南 官网 官方文档 自动化运维工具——ansible详解（一） ","permalink":"blog.2332334.xyz/posts/software/ansible/","summary":"","title":"Ansible"},{"content":"apache web服务器\n包管理器安装 # ubuntu sudo apt install apache2 sudo service apache2 start # centos sudo yum install httpd sudo systemctl enable httpd sudo systemctl start httpd 编译安装 相关环境\nubuntu 18.04 centos7 httpd-2.4.46\n1.下载软件及相关包 apache\napr\napr-util\npcre\n2.安装依赖 #ubuntu sudo apt install gcc zlib1g-dev build-essential openssl -y #centos sudo yum install gcc gcc-c++ zlib-devel openssl libxml2-devel expat-devel -y #编译安装的依赖参数 # apr ./configure --prefix=/usr/local/apr make \u0026amp;\u0026amp; make install #apr-util ./configure --prefix=/usr/local/apr-util -with-apr=/usr/local/apr make \u0026amp;\u0026amp; make install #pcre ./configure --prefix=/usr/local/pcre make \u0026amp;\u0026amp; make install centos7报错参考\n编译apr报错cannot remove 'libtoolT': No such file or directory参考\n报错Another app is currently holding the yum lock; waiting for it to exit...执行\nrm -rf /var/run/yum.pid\n3.编译安装 tar -zxf httpd-2.4.46 cd httpd-2.4.46 ./configure --prefix=/usr/local/apache2.4.46 \\ --enable-expires \\ --enable-headers \\ --enable-modules=most \\ --enable-so \\ --enable-rewrite \\ --with-mpm=worker \\ --with-apr=/usr/local/apr \\ --with-apr-util=/usr/local/apr-util \\ --with-pcre=/usr/local/pcre make \u0026amp;\u0026amp; make install /usr/local/apach/bin/apachectl #检查启动服务 httpd: Could not reliably determine the server's fully qualified domain name, using localhost.localdomain. Set the 'ServerName' directive globally to suppress this message\n最后出现以上警告信息即安装成功,\n也可使用lsof -i :80 查看占用80端口的是不是httpd\ncentos7 编译失败 参考\n错误信息如下\nbapr-1.la -lrt -lcrypt -lpthread -ldl -lcrypt /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_GetErrorCode\u0026#39; /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetEntityDeclHandler\u0026#39; /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_ParserCreate\u0026#39; /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetCharacterDataHandler\u0026#39; /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_ParserFree\u0026#39; /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetUserData\u0026#39; /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_StopParser\u0026#39; /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_Parse\u0026#39; /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_ErrorString\u0026#39; /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetElementHandler\u0026#39; 解决办法\nyum install libxml2-devel -y\nrm -rf /usr/local/apr-util #删除后重新编译安装\n重新之前的两个步骤继续安装即可\n编译安装 apr-util 和 httpd 都要 make clean 已清除之前的安装信息\n配置(未测试，仅供参考) 去除版本号\n去除httpd.conf的Include conf/extra/httpd-default.conf的注释\napachectl graceful\n修改httpd-default.conf的以下两项为：\n# 第55，65行 ServerTokens Prod ServerSignature Off 开启防盗链\n去除httpd.conf中LoadModule rewrite_module modules/mod_rewrite.so行的注释\n添加如下内容\n\u0026lt;IfModule rewrite_module \u0026gt; RewriteEngine On RewriteCond % {HTTP_REEERER} !^http://DomainName/.*$ [NC] RewriteCond % {HTTP_REEERER} !^http://DomainName $ [NC] RewriteCond % {HTTP_REEERER} !^http://DomainName / .*$ [NC] \u0026lt;/IfModule\u0026gt; 增加对php支持 cp /usr/local/apache/conf/httpd.conf httpd.conf.bak vi /usr/local/apache/conf/httpd.conf #在大概390行添加两行内容 AddType application/x-httpd-php .php .phtml AddType application/x-httpd-php-source .phps 参考 官方文档 ","permalink":"blog.2332334.xyz/posts/software/apache/","summary":"","title":"Apache"},{"content":"Centos_cockpit.socket centos web管理server\n默认查看地址为 http://ip:9090\nWeb管理服务\nsystemctl enable --now cockpit.socket #启动该服务，随系统启动一同启动 systemctl start cockpit.socket #运行Cockpit服务 systemctl status cockpit.socket #查看状态 systemctl get-default #查看显示模式 ","permalink":"blog.2332334.xyz/posts/software/centos_cockpit/","summary":"","title":"Centos_cockpit"},{"content":"关于一些常见的硬盘格式 win FAT 文件分配表\n最开始供 MS-DOS 使用，一直演化，开始有 Fat12，之后到 Fat16，到现在的 Fat32。\nFat32 中的 32 是指 32 位，32 位最大值为 2 的 32 次方，就是 4G，也就是说Fat32 最大的限制是不能存储大于 4G 的文件。\nHPFS NTFS (New Technology File System) 微软为其第一代操纵系统Windows NT 3.1开发的文件系统。\n80年代，微软和国际商用机器公司 IBM 合作，开发图形操作系统OS/2。\n但两个公司在很多问题上产生分歧而合作终止。OS/2 的文件系统叫 HPFS，NTFS 借鉴了 HPFS，有很多共同之处。因为开发 NTFS、HPFS 这两个文件系统的就是同一批人，在现在的 Windows 系统上，默认的文件格式就是 NTFS。\nReFS 提供更强的弹性机制，高性能的超大容量数据存储以及最大限度保证数据的可靠性和可用性。\nReFS不是NTFS的真正替代品（ReFS卷不可引导），但它本质上是为高级用户提供更高效的文件系统，REFS文件系统有点类似NTFS+RAID5。\nFAT、HPFS 和 NTFS 文件系统的概述\nlinux ext (Extended file system) 在有 ext 之前，使用的是 MINIX 文件系统\nlinux（1991首次公布 MINIX file system 64mb）\next 1992 ext 可以处理高达 2 GB 存储空间并处理 255 个字符的文件名\next2 1993 提供了 GB 级别的最大文件大小和 TB 级别的文件系统大小\next3 1998 加入日志系统（一下三种日志级别）\n日记(journal） 顺序(ordered) 回写(writeback) ext3 使用 16 位内部寻址。这意味着对于有着 4K 块大小的 ext3 在最大规格为 16 TiB 的文件系统中可以处理的最大文件大小为 2 TiB。\next4 2006 ext4 在功能上与 ext3 在功能上非常相似，但支持大文件系统，提高了对碎片的抵抗力，有更高的性能以及更好的时间戳。\next4 使用 48 位的内部寻址\n不推荐文件大于50tb\n虽然理论支持100tb\n下面三种为大文件存储选择文件系统\nXFS 64 位的日志文件系统,虽然 XFS 是稳定的且是高性能的，但它和 ext4 之间没有足够具体的最终用途差异\nZFS 它理论上可以解决大型存储系统。\nZFS 许可证是 CDDL 许可证\nBtrfs 性能问题\nmac APFS（Apple File System） 苹果最新的文件系统，在这之前用的是 HFS，后面有 HFS+ 或 HFS Plus。HFS 文件系统历史悠久，是针对传统的机械磁盘开发的文件系统。后面对针对 SSD 做优化，开发了 APFS，在 iOS 10.3 时正式引入。APFS 支持写时复制，同一个文件，无论复制多少份，假如不修改，这个文件的实际内容只会在磁盘中存储一份，只是其索引有 N 份。\n移动设备 USB-HDD模式： USB-HDD硬盘仿真模式，此模式兼容性很高，适用于新机型，但对于一些只支持USB-ZIP模式的电脑则无法启动，一般制作U盘启动盘选择该模式。 USB-ZIP模式：大容量软盘仿真模式，此模式在一些比较老的电脑上是唯一可选的模式，但对大部分新电脑来说兼容性不好，特别是2GB以上的大容量U盘。\nexFat exFAT 是微软专门为闪存开发的一种开发的文件格式，支持存储大于 4G 的文件。NTFS 使用日志，会比非日志的文件格式读写更多的磁盘，对闪存储造成较大的负担，理论上 NTFS 格式的 U 盘容易损坏。U 盘格式成 exFAT 只是为了方便，Mac 和 Windows 都可读写，也可存放大文件，但exFAT 没有日志功能。\nother fat3 和 ntfs 都通过日志系统解决前期版本数据稳定性，一直性问题\n及：前期版本在写入过程中突然断电会造成整个文件系统崩盘，且无法卸载（与写入文件不想关的文件依旧会出问题）；fat2 后期使用过程中磁盘碎片会造成严重性能损失\n参考链接 Fat32、NTFS、exFAT、HFS+、APFS文件系统的区别\n深入理解 ext4 等 Linux 文件系统\n","permalink":"blog.2332334.xyz/posts/system/disk-type/","summary":"","title":"Disk Type"},{"content":"win Dism 命令 Dism /Online /Cleanup-Image /ScanHealth #这条命令将扫描全部系统文件并和官方系统文件对比，扫描计算机中的不一致情况。 Dism /Online /Cleanup-Image /CheckHealth #这条命令必须在前一条命令执行完以后，发现系统文件有损坏时使用。 DISM /Online /Cleanup-image /RestoreHealth #这条命令是把那些不同的系统文件还原成官方系统源文件。 sfc /SCANNOW #无论前a三条命令是否可用，完成后重启，再键入以下命令： ","permalink":"blog.2332334.xyz/posts/software/dism/","summary":"","title":"Dism"},{"content":"DLL反编译 一.使用工具简单介绍 反编译工具ILSpy\nildasm 将dll文件分解为IL\nilasm 将IL文件重新生成DLL\nilasm可从 C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319 目录找到\n二.使用步骤简单介绍 将要反编译的dll文件拖入ILSpy中 再将该dll拖入ildasm中并通过导出(Dump)IL文件和RES文件 修改你想修改的相应片段通过cmd使用如下命令导出dll C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\ilasm.exe /dll/resource=yourFilePath.res yourFilePath.il 参考链接 通过ILSpy反编译工具和ilasm修改.NET程序 ","permalink":"blog.2332334.xyz/posts/software/dll%E5%8F%8D%E7%BC%96%E8%AF%91/","summary":"","title":"DLL反编译"},{"content":"docker docker容器简介 虚拟化容器\ndocker大致由三部分组成 仓库 镜像 容器\ndocker安装 卸载旧版本\n# ubuntu sudo apt-get remove docker docker-engine docker.io containerd runc # centos sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine 自动化脚本安装(test环境,root用户) 方式一:\ncurl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 方式二:\ncurl -fsSL https://get.docker.com -o get-docker.sh \\ sudo sh get-docker.sh sudo sh get-docker.sh 卸载\nsudo apt-get purge docker-ce docker-ce-cli containerd.io sudo rm -rf /var/lib/docker sudo rm -rf /var/lib/containerd 仓库安装(推荐) ubuntu sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg \\ lsb-release curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg # x86_64/amd64 echo \\ \u0026#34;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io centos sudo yum install -y yum-utils sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo sudo yum install docker-ce docker-ce-cli containerd.io sudo systemctl start docker sudo docker run hello-world 手动安装 添加用户: sudo usermod -aG docker your-user\n1.选择https://download.docker.com/linux/需要的版本\ncentos/x86_74/stable/Packages/.rpm\ndists/pool/stable/.deb\nubuntu\nsudo dpkg -i /path/to/package.deb sudo docker run hello-world centos安装Docker Engine\nsudo yum install /path/to/package.rpm # 安装docker完成,并创建了docker组 sudo systemctl start docker sudo docker run hello-world docker相关命令 仓库 docker search 你要找的镜像 docker pull 下载镜像到本地 镜像 docker images # 展示你本地的镜像信息 docker rmi # remove 镜像 容器 运行容器\ndocker run 参数 --name 名字 路径 #运行某容器\n基本参数 解析 -i 交互模式 -t 终端 -d 后台运行 -P 将容器内部使用的网络端口映射到我们使用的主机上 -p 将端口映射到本地制定端口 v 主机路径:容器内路径 \u0026ndash;name 容器名 docker run -it image:[version] /bin/bash docker run -d image:[version] /bin/bash docker logs containerID # 容器标准输出 Ctrl + p + q 退出容器而不终止\n查看容器\ndocker ps -a #查看所有容器状态等信息 docker port #端口相关 docker top docker inspect 底层信息，Docker容器配置和状态信息 重启容器相关\ndocker start 容器ID或者容器名字 # 启动已停止容器 docker restart ID/Name # 重启停止的容器 docker stop ID/Name #停止 docker attach ID/Name #进入后台运行的容器但是退出会使容器停止 docker exec -it ID/Name /bin/bash # 这个命令进入后台容器，退出容器终端时，不会导致容器的停止 删除容器\ndocker rm -rf ID/Name #删除停止的容器 docker container prune #清理掉所有终止的容器 导入导出容器快照\ndocker export 容器ID \u0026gt; 文件名.tar #导出 docker import #本地导入 docker import 地址 镜像 #通过URL或目录导入 打包镜像-dockerfile 相关指令\n命令 解释 FROM 构建基于那个镜像 ENV 设置环境变量 ADD copy文件或目录到容器，如果是URL或压缩包会自动下载解压 COPY 与上类似，但不具备后述功能 MAINTAINER img维护者邮箱及姓名 RUN 构建镜像执行的命令，每run一次构建一层 CMD 容器启动命令，如多个以最后一个为准，也可为netrypoint提供参数 VOLUME 指定容器挂载点到宿主机自动生成目录或其他容器 USER 为run，cmd，entrypoint执行指定用户 WORKDIR 为run，cmd，entrypoint，copy，add 设置工作目录，即切换目录 HEALTHCHECH 健康检查 ARG 构建时指定参数 EXPOSE 声明服务端口，仅声明 ENTRYPOINT 运行容器时执行shell命令 docker-compose 参考 菜鸟docker教程\ndocker官网\n官方文档\n","permalink":"blog.2332334.xyz/posts/software/docker/","summary":"","title":"Docker"},{"content":"Express+Koa2","permalink":"blog.2332334.xyz/posts/web/express+koa2/","summary":"","title":"Express+Koa2"},{"content":"Ext4文件修复 2021年7月27日\n公司raid5 两块硬盘同时故障,找了数据修复公司,最后出现ext4文件系统有问题\n以下仅作记录参考,并未实践,最后还是那家公司解决的\n相关知识点 super block 硬盘分区开头、开头的第一个byte是byte0，从byte1024开始往后的一部分数据。由于block size最小时1024bytes，所以superblock在block1中（此时block的大小正好是1024bytes），也可能是在block 0中。\n超级块保存了文件系统设定的文件块大小、操作函数、inode链表等重要信息。\n查看分区设备信息 dumpe2fs /dev/sdb tune2fs -h /dev/sda 查看备份超级块 mkfs.ext4 -n /dev/sdb # 需要先卸载分区 尝试修复超级块 1.已知文件系统类型使用备份超级块\nmkfs.filesystem -n /dev/sda # 及上一步查看备份超级块 mount -t ext4 -o sb=131072 /dev/sdb /mnt/a # 尝试使用备份超级块挂载 # 查看的备份超级块是 1k 的,这里参数是使用 4k ,所以使用时参数=备份超级块*4 fsck.ext4 -b 32768 /dev/sdb # 这里 1k # 务必卸载设备再进行修复,并仔细观察输出信息 2.全部超级块损坏,进行重建修复(数据丢失风险大)\nmkfs.ext4 -S /dev/sdb # 重建 fsck.ext4 -y /dev/sdb # 修复 最后挂载看丢失多少\n3.不确定文件系统\n使用时注意提示信息,可能导致文件系统不正常,修复后变为ext3,ext2等,需手动升级;不推荐使用\nfsck -r /dev/sdb 参考地址 Ext4文件系统修复 ","permalink":"blog.2332334.xyz/posts/system/ext4%E6%96%87%E4%BB%B6%E4%BF%AE%E5%A4%8D/","summary":"","title":"Ext4文件修复"},{"content":"Fail2ban v2上看到了这个软件,做个笔记:\n简介 grep 'Failed' /var/log/auth.log 查看登录失败的IP\n对于异常SSH的IP进行管控; 若使用密钥登录可不使用\n实质是个日志解析器,通过扫描相应日志然后进行正则匹配,当匹配结果到一定数量,就采取相应动作,如防火墙对异常IP进行限制,发送邮件等.\n安装与基本配置 安装要求\n安装python2.6/3.2及以上版本(这是款python写的软件,软件0.6x以上版本重写)\n至少一个防火墙软件:iptables或者shorewall,之前看了iptables就使用它吧\n安装\n#Ubuntu sudo apt install fail2ban mailutils --- 使用Github源码安装 git clone https://github.com/fail2ban/fail2ban.git cd fail2ban sudo python setup.py install --- # Centos sudo yum -y install epel-release sudo yum -y install fail2ban fail2ban-client -V #查看安装版本,并确定是否安装完成 阿里epel源地址\n使用与相关命令 配置通过/etc/fail2ban/jail.conf文件配置,但不推荐直接修改;\n使用时自定义local后缀的文件,软件运行会先加载jail.conf再读取自定义的配置信息(如有相同项,local会覆写conf中的配置)\n官方的简单配置:\n[ssh-iptables] #enabled = false enabled = true filter = sshd action = iptables[name=SSH, port=ssh, protocol=tcp] # mail-whois[name=SSH, dest=yourmail@mail.com] #logpath = /var/log/sshd.log logpath = /var/log/auth.log| maxretry = 5 相关命令\n该软件由服务器端与客户端组成(cs):\nfail2ban-server\nfail2ban-client\n|参数|解析|\n|\u0026mdash;|\u0026mdash;|\n|fail2ban-server | |\n| /etc/init.d/fail2ban start | 启动 |\n| fail2ban-client | |\n| reload | 重新加载配置 |\n| status | 查看运行的监控服务数量和列表 |\n参考资料 官网\nGithub地址\nFail2ban防暴力破解\n使用fail2ban防范Linux服务器SSH暴力登录尝试攻击\n","permalink":"blog.2332334.xyz/posts/software/fail2ban/","summary":"","title":"Fail2ban"},{"content":"Failed to start journal service 排除思路\n1.查看启动失败的服务\nsystemctl --failed 2.根据启动失败的服务查看该服务的状态\nsystemctl status servername 3.使用journalctl查看相关服务\njournalctl _PID=xxx journalctl _SYSTEMD_UNIT=servername.service journalctl -xe 4.内核模块\nLinux系统加载哪些内核模块，和配置文件有关系。模块保存在/lib/modules/下。/etc/modprobe.d/下配置模块加载时的一些参数，也可以利用blacklist来屏蔽模块的自动加载。例如，在安装NVIDIA显卡驱动时，需要屏蔽开源的nouveau驱动，就可以将其加入blacklist。\n最后查看那些内核模块出现问题或冲突\n然后修改内核配置文件以解决问题\n参考 systemd-modules-load.service启动失败问题排查 ","permalink":"blog.2332334.xyz/posts/system/failed-start-journal-service/","summary":"","title":"Failed Start Journal Service"},{"content":"Git 官网\n安装 图形界面(win)\ngitk(默认) sourceTree TortoiseGit GithubDestop GitKraken Gitup 基本配置 设置基本信息\nconfig 参数\n--systemc 系统内所有用户 --global 当前用户 --local 当前仓库 git config --global user.name \u0026#34;\u0026#34; git config --global user.email \u0026#34;\u0026#34; # 查看设置信息 git config --global --list 使用 基本步骤 # 初始化仓库 git init # 添加该目录所有文件 git add * # 提交所有更改 git commint -m \u0026#34;\u0026#34; # 提交历史 git log # 文件对象类型 git cat-file -t hase # 最近提交内容信息 git cat-file -p hase # 获取完整hase git rev-parse hase Git上传项目至GitHub Git\n本地版本控制软件\nGitHub\n上传服务器的版本控制\n上传步骤如下：\n初始化本地仓库\n在仓库文件夹打开git bash后使用下方命令 git init 修改配置文件\n生成本地ssh密匙 ssh-keygen -t rsa -C \u0026#34;你的GitHub注册邮箱\u0026#34; 回车后，会在默认文件 id_rsa.pub 上生成 SSH key，位置：C:\\Users\\用户名.ssh\n之后系统要求输入密码，直接回车不设密码，重复密码时再次回车，之后显示 SSH key 已经生成成功。\n将id_rsa.pub 文件中的key粘贴到GitHub-\u0026gt;Account Settings-\u0026gt;SSH keys-\u0026gt;Add SSH key中\n验证配置是否成功\nssh -T git@github.com 设置username和email，添加远程地址 git config --global user.name \u0026#34;your name\u0026#34; git config --global user.email \u0026#34;your_email\u0026#34; git remote add origin git@github.com:用户名/Git仓库名称.git 之后就可以提交代码了\n如果第一次提交报错可以尝试\ngit push -f origin master\n这条命令会直接覆盖前面分支，谨慎使用\n参考 用 Git 上传项目到 GitHub 朱双印个人日志-git之旅 ","permalink":"blog.2332334.xyz/posts/software/git/","summary":"","title":"Git"},{"content":"gRPC google开源分布式远程服务调用\nserver提供api grpcClient主流编程语言进行调用，类似web api\n基于http2 通信二进制流\nserver - proto - client\nProtocol buffers 客户端与服务端见通信协议\n缺点：\n其消息一次性加载到内存 完全解析二进制数据才能知道数据是否相等 消息未压缩 大型多维浮点数组等科学和工程用途的运算，效率不是最佳 科学计算非面向对象 缓冲期对其支持不太好 定义server四种形式 // 一元rpc rpc SayHello(HelloRequest) returns (HelloResponse); // 服务器流式响应 rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse); // 客户端流式请求 rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse); // 双向流式沟通 rpc BidiHello(stream HelloRequest) returns (stream HelloResponse); syntax = \u0026#34;proto3\u0026#34;; // 指定proto版本 pcakage a.b // 类似命名空间 import \u0026#34;myproject/other_protos.proto\u0026#34;; import public \u0026#34;a.proto\u0026#34;; // 导入其他prot文件中定义的proto // 该功能java没有； // 移动文件后编译器可通过 -I 设定proto文件所在目录即 proto_path // 2版本proto不能在3版本proto中直接使用，反之亦然 message Foo{ reserved 2,15,2 to 100, 1000 to max; reserved \u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;; } // reserved 该属性设定保留字段；字段名称和字段编号不能混用 message SearchResponse { message Result { string url = 1; string title = 2; repeated string snippets = 3; } repeated Result results = 1; } // 嵌套定义 message SomeOtherMessage { SearchResponse.Result result = 1; } // 重用上方定义消息 service SearchService { rpc Search(SearchRequest) returns (SearchResponse); } 字段 message\nmessage Person { string NAME = 0; string AGE = 1; } 字段编号，每一个字段都有一个唯一编号\n该编号范围，1 - 2^29^-1 ;即 1 - 536,870,911\n19000 - 19999 为保留字段\nenum\nenum EnumAlias { EA_UNSPECIFIED = 0; // 该值必须为0 EA_NAME = 1; } enum 第一个定义必须为0；用于与proto2语义兼容 定义范围为 32整数 范围 负值使用varint编码，效率不高，不推荐使用 oneof\nmessage SampleMessage { oneof test_oneof { string name = 4; SubMessage sub_message = 9; } } oneof 表示该字段只会在内存中存在一个 其内字段共享该内存 不可使用map 和repeated字段 map\nmap\u0026lt;key_type, value_type\u0026gt; map_field = N; map\u0026lt;string, Project\u0026gt; projects = 3; // key_type 可设类型为 stirng 或任意整数 // map 不可 repeated message MapFieldEntry { key_type key = 1; value_type value = 2; } repeated MapFieldEntry map_field = N; ","permalink":"blog.2332334.xyz/posts/code/grpc/","summary":"","title":"Grpc"},{"content":"HTMl CSS 黑马pink 基础标签知识点 HTML div 块级标签，单独占一行，盒子 span 流标签 锚点标签 \u0026lt;a href=\u0026#34;#name\u0026#34;\u0026gt;233\u0026lt;/a\u0026gt; \u0026lt;h1 id=\u0026#34;name\u0026#34;\u0026gt;h1s\u0026lt;/h1\u0026gt; 特殊字符 \u0026amp;nbsp; 空格 \u0026amp;lt; \u0026lt; \u0026amp;gt; \u0026gt; table\ncellpadding 单元格边沿与内容的距离，默认1px（单元格大小） cellspacing 单元格文字之间的距离，默认2px（内外边框大小） thead tbody rowspan 跨行合并 colspan 跨列合并 列表\nul - li ol - li dl - dt - dd input\ntype name value checked maxlength text password radio 相同name属性单选 checkbox label\nfor id select\noption selected textarea\nrows cols html5 新标签 语意化标签 header 头 nav 导航 article 内容 section 自定义文档某区域 aside 侧边栏 footer 尾 多媒体 audio video \u0026lt;video src=\u0026quot;\u0026quot; controls=\u0026quot;controls\u0026quot;\u0026gt;\u0026lt;/vide\u0026gt; mp4 ogg webm 表单 input type email url date time month week number tel search color 验证需要添加 form 表单域\n表单属性 required 必填 placeholder 提示信息 autofocus 自动聚焦 autocomplete 是否基于以前的输入显示信息（需在表单域中，且已输入过） multiple 多选文件 CSS 层叠样式表\n选择器： 类选择器 ID选择器 标签选择器 通配符选择器 * 其他选择器：\n5.后代选择器\nul li a {} /* 只对树枝下的a */ 6.子元素选择器\nul \u0026gt; li /* 只对ul下的li只能选择子元素 */ 7.并集选择器\ntable,a,p /* 针对写的所有标签 */ 8.伪类选择器\n:link /* 所有未访问链接 */ :visited /* 所以已访问链接 */ :hover /* 鼠标指到的链接 */ :active /* 鼠标按下未弹起链接 */ :focus /* 获取焦点的表单元素 */ 顺序必须遵循 LVHA\nfont：\nfont-weight：「normal，bold，bolder，lighter，number（100-900）」 font-style：「normal，itelic」 font： 「font-style， font-weight， font-size/line-height， font-fmaily」 font样式 font-size 和 font-family 不可省\ntext：\ntext-decoration/装饰文本： 「none, underline, overline, line-through」 text-indent/首行缩进: line-height/行间距： em 相对单位，当前元素文字大小（font-size）；行间距为上下边距之和\n元素分类 块级元素\n行内块元素\n行内元素\n宽，高不可修改 不能放块元素 默认宽度为内容宽度 行块元素互转\ndisplay: inline(行) | block(块) | inline-block(行内块) background background-repeat(背景图片平铺): no-repeat | repeat | repeat-x | repeat-y\nbackground-position(背景图片位置): (方位名词：相对中心点 ｜ 精确数值：XY轴 ｜ 混合使用)\nbackground-attachment(背景附着)：scroll | fixed (固定) ｜制作视差滚动\nbackground（提倡顺序为 颜色，图片url，平铺，附着，位置）\n背景色半透明，css3，backgrount: rgba(0,0,0,0.5)\n三大特性 层叠性 就近原则，后来居上 继承性 text，line，fount，color 优先级 !important 优先级最高 复合选择器权重叠加 盒子模型 border content padding margin /* 相邻边框合并 */ border-collapse: collapse 盒子本身无 width height 不会被 padding 撑开\n块级元素 设置 width 后，左右 margin auto 即可水平居中\n盒子模型的塌陷与合并 盒子合并 相邻块元素 设置相邻外边距会产生合并 - 最后以最大值现实\n盒子塌陷 解决方案\n父元素加border 父元素加padding 加 overflow overflow 溢出控制注意有定位的部分！！！\nbooder圆角矩形 /* 设置圆角矩形 */ border-radius:length box-shadow: h-shadow | v-shadow | blur | spread | color | inset text-shadow float 脱离标准流 由内容决定宽度 行内块元素某些特点 块之间无间隙 只影响后面的标准流 清除浮动 父盒子没有高度，子盒子浮动了，避免对浮动后面元素产生影响,只对块级标签有用\n选择器 { clear: both | left | right } 具体措施\n浮动元素最后添加一个盒子\n给父元素添加overflow：hidden\n添加:after伪元素（对父元素添加）\n:clearfix { content: \u0026#34;\u0026#34;; display: block; height: 0; claear: both; visibility: hidden; } :clearfix { /* IE 6,7专用 */ *zoom: 1; } :after``:before伪元素清除前后 .clearfix:before, .clearfix:after { content: 0; display: table; } .clearfix:after { clear:both; } .clearfix { *zoom:1; } 定位 定位 = 定位模式 + 边偏移\n定位模式 position: static ｜relative ｜sbsolute\nstatic 类似标准流 relative 相对元素本身原来位置偏移 原来位置继续保存，不脱标 absolutle 一般相对父元素移动（父元素需加绝对定位），没有则以浏览器 如父没有，则以上级有定位的元素移动 fixed 固定定位 浏览器可视窗口为定位点 脱标，不占有标准流 sticky 粘性定位 占有原来位置 相对于绝对定位的整合（以窗口可视区为准） 必加边偏移 子绝父相\n边偏移 top right left bottom\n定位堆叠次序 z-index 控制盒子先后顺序 如无，则后来者居上 只对position盒子有用 浮动元素不会压住标准流文字，position会压住标准流\n可见性 display none 不占有位置 visibility visible hidden 占有原本位置 overflow 溢出部分是否隐藏 scorll 现实滚动条 auto 需要时添加滚动条 visible overflow 溢出控制注意有定位的部分！！！\n精灵图 主要针对背景图片 sprites 通过 background-position 调整 x，y轴 一般为负值 样式 鼠标样式 cursor 属性进行配置\ndefault pointer 小手 move 移动 text 文本 not-allowed 静止 表单样式 outline 表单轮廓线 resize 文本域禁止调整大小 其他属性 1.vertical-alien 配置文本对齐位置，对于行内块元素or块\nvertical-align: baseline | top | middle | bottom 避免图片与文字在同行存在的空隙\n2.多余文字设置为省略号 单行 设置\n/* 1.文字一行显示 */ white-space: nowrap /* 2.溢出部分隐藏 */ overflow: hidden /* 3.省略号代替溢出部分 */ text-overflow: ellipsis 多行设置\n适用wibkit内核的浏览器 包含大部分移动端浏览器\noverflow: hidden; text-overflow: ellipsis; /* 伸缩盒子模型显示 */ display: -webkit-box; /* 限制在一个块元素显示的文本行数 */ -webkit-line-clamp: 2; /* 设置或检索伸缩盒对象的子元素排列方式 */ -webkit-box-orient: vertical css3新特性 -webkit-font-smoothing: antialiased; 抗锯齿 新增选择器 属性选择器 [] text[value] text[value=\u0026ldquo;123\u0026rdquo;] 匹配属性值 text[value$=\u0026ldquo;22\u0026rdquo;] 匹配属性开头字符串 text[value^=\u0026ldquo;33\u0026rdquo;] 匹配属性结尾字符串 text[text*=\u0026ldquo;123\u0026rdquo;] 匹配包含123 的 权重 10 结构伪类选择器 伪元素选择器 ::before ::after 都包含在父元素中，父元素最前｜ 父元素最后 必须包含 content 属性 权重 1 行内元素 伪元素清除浮动\n/* method 1 */ .clearfix:after { /* content: \u0026#34;\u0026#34;; */ display: block; height: 0; clear: both; visibility: hidden; } /* method 2 */ .clearfix:before,.clearfox:after { content: \u0026#34;\u0026#34;; display: table ; } .clearfix:after { clear: both; } css3盒子模型 content-box default box-sizing = content-box‘s width + padding + border border-box box-sizing 属性 box-sizing = box width 函数 filter滤镜属性\nblur函数 \u0026gt; 调整模糊度\ncalc函数\ncalc函数 \u0026gt; 计算属性值\ntransition 属性\n要过渡属性 花费时间（must） 运动曲线 何时开始\n哪里动哪里加\n2D转换 transform 综合运用时会根据书写顺序从左到右执行\ntranslate 类似left，top等浮动元素的位移\n百分比参数 是相对自身的\n行内标签不可用\ntransform: translate(x,y); transform: translateX(n); transform: translateY(n); transform: translate(-50%,-50%); /* 元素居中 */ 不会影响其他元素，盒子\nrotate 元素旋转\ntransform: rotate(45deg); /* 设置旋转的中心点 */ transform-origin: left bottom; transform-origin: 20px 20px; scale 倍数修改盒子大小\n不会影响其他元素\n可以设置中心点\ntransform: scale(2, 1) /* 等比放大 */ transform: scale(2) 动画 animation 类似adoble animate\n先定义动画\n设置动画序列\n调用动画\n@keyframes moveDiv { 0% { 开始状态 } 100% { 结束动画 } form {} to {} } animation-name: name; animation-duration: 持续时间; animation: 动画名称 动画时长 速度曲线 延迟时间 重复次数 动作方向 执行完毕时状态 动画开始状态与盒子默认状态相同 省略动画开始\n3D转换 translate3d\ntransform: translateX() translateY() translateZ(); /* perspective 透视 人眼到屏幕距离 近大远小 给父元素添加 */ perspective: 100px; 3d旋转,单位deg\n/* 45deg 自定义旋转轴 */ transform: rotate(x,y,z,45deg); transform: rotateX() rotateY() rotateZ(); transform: rotate3d() transform-style 3d呈现方式\n子元素是否开启3d空间\n/* 给父元素开启，默认值为 flat */ transform-style: preserve-3d 浏览器私有前缀 -moz- ： firefox 私有属性\n-ms- ： IE\n-webkit- ： safari，chrome\n-o- ： Opera\n移动端 主要处理webkit内核\n视图标签 物理像素 移动端 设置的px会和物理像素成倍关系\n移动端图片使用 多倍分辨率的图片以保障在手机上图片的清晰度\nbackground-size 设置背景图片的尺寸\n% 相对父盒子\ncover 完全覆盖盒子，可能有部分背景图片显示不全\ncontain 将图像扩大至最大尺寸，使宽高完全适应内容区域，高宽等比缩放，其一到顶则结束扩展，可能有部分为空白\n移动端初始化css normalize\n移动端特殊属性 box-sizing: border-box; -webkit-box-sizing: border-box; /* 清除点击高亮显示 */ -webkit-tap-heightlight-color: transparent; /* ios 自定义按钮 输入框样式必须 */ -webkit-appearance: none; /* 禁用长按页面时弹出菜单 */ img,a {-webkit-touch-callout: none;} 移动端技术选型 单独制作页面\n流式布局 宽度百分比，高度固定 flex弹性布局 less+rem+媒体查询布局 混合布局 响应式页面\n媒体查询 bootstrap 流式布局\nflex弹性布局\ncontainer 配置\n/* 配置X Y轴排列 */ flex-direction: row | row-reverse | column | column-reverse /* 配置主轴后（默认X轴），子元素排列方式; 主轴对其方式 */ justify-conten: flex-start | flex-end | center ｜space-around ｜ space-between /* 配置侧轴排列，仅适用单行; 侧轴对其方式 */ align-items: flex-start | flex-end | center | stretch(默认，拉伸，子盒子不给高度) /* 是否换行显示，默认不换行 */ flex-wrap: nowrap | wrap /* 多列/行侧轴 */ align-content: space-around | space-between | 同上 /* flex-direction flex-wrap 组合属性 */ flex-flow: row wrap 子项属性\n/* 配置子项剩余空间 */ flex: [number][default 0] /* 包含: flex-grow flex-shrink flex-basis */ /* 子项侧轴对齐方式 */ align-self: /* 子项排列方式 */ order: 背景颜色渐变\n/* 线性渐变,需添加浏览器私有前缀-webkit-等 */ background: linear-gradient(top,red,blue) SEO优化 TDK title \u0026lt;title\u0026gt;京东(JD.COM)-正品低价、品质保障、配送及时、轻松购物！\u0026lt;/title\u0026gt; description \u0026lt;meta name=\u0026quot;description\u0026quot; content=\u0026quot;京东JD.COM-专业的综合网上购物商城，为您提供正品低价的购物选择、优质便捷的服务体验。商品来自全球数十万品牌商家，囊括家电、手机、电脑、服装、居家、母婴、美妆、个护、食品、生鲜等丰富品类，满足各种购物需求。\u0026quot;/\u0026gt; keywords \u0026lt;meta name=\u0026quot;Keywords\u0026quot; content=\u0026quot;网上购物,网上商城,家电,手机,电脑,服装,居家,母婴,美妆,个护,食品,生鲜,京东\u0026quot;/\u0026gt; logo SEO 放 h1 提权，告知搜索引擎\na 链接主页\n链接内放文字（网站名称）但是不显示\ntext-indent: -9999px; overflow: hidden font-size: 0; 链接 title ，鼠标提示信息 ","permalink":"blog.2332334.xyz/posts/web/html_css/","summary":"","title":"HTML \u0026\u0026 CSS"},{"content":"HCIA DataCom(华为数通) 网络基础 网络类型 局域网(LAN)\u0026ndash;local area network 城域网(MAN)\u0026ndash;metropolitan 广域网(WAN)\u0026ndash;wide 网络拓扑 网络种物理逻辑架构\n形态\n星型 总线型 环型 树型 全网状 部分网状 参考模型 OSI(ISO) 应用层 表示层 会话层 传输层 网络层 数据链路层 物理层 TCP/IP标准模型 应用层 主机到主机层 英特网层 网络接入层 TCP\u0026amp;IP对等模型 应用层 HTTP | FTP | DNS | Telnet | DHCP | SNMP | SMTP 传输层 TCP | UDP | 2的16次方-1 65535端口 网络层 IPV4 | IPV6 | ICMP(ping) | IGMP | IP 数据链路层 PPPoE | MAC | Ethernet | PPP 物理层 传输层 TCP如何保证数据准确 三次握手 seq ack\n窗口滑动机制 win\nTCP关闭 四次挥手 fin\n网络层 路由 mac\nARP(address resolution protocol)协议\n根据IP地址获取MAC地址 广播请求\nHost1 查看ARP缓存 无,ARP request Host2 缓存APR ARP reply Host1 缓存ARP 华为VRP(Versatile Routing Plaform) 华为数通产品通用操作系统平台\n文件系统 系统文件 cc 配置文件 cfg,zip,dat 补丁文件 pat PAF文件 bin 视图 用户界面:\nconsole vty(使用前需要配置)\n用户视图 return 系统视图 - system-view 接口视图 - interface GigbitEthenet 0/0/1 协议视图 - Huawei-ospf-1 命令 undo 恢复缺省 禁用功能 删除配置 基本配置 命令 参数 user privilege 配置指定用户界面级别 command-privilege level 设置指定视图命令级别 set authentication cipher password 配置本地认证密码 idle-timeout 超时连接时间 sysname 设备名 clock timezone 设置本地市区 clock datetime 设置当前时间日期 clock daylight-saving-time 设置夏令时 系统信息 display device ? 设备信息 display esn 21980106042SL4600115 设备唯一编号 display version 版本信息 display power 电源异常时,查看相关信息 display power system 功率信息 display voltage { all slotslot-id} display fan ? 风扇 display cpu-usage CPU display cpu-usage configuration ? 查看CPU占用率的配置信息 display memory-usage ? 内存 目录操作 命令 参数 pwd 当前所在目录 dir ls more 查看文本内容 cd 切换 mkdir 新建目录 rmdir 删除目录 copy 复制 move 移动 rename 重名 delete/unreserved 删除/永久删除文件 undelete 恢复删除文件 reset recycle-bin 彻底删除回收站中文件 配置文件 用户视图\n命令 参数 display current-configuration 显示当前配置文件 display saved-configuration 显示保存的配置文件 save 保存配置 display startup 查看当前启动配置文件 starup saved-configuration 配置系统下次启动时使用的配置文件 compare configuration 比较当前配置与下次启动配置文件 reset saved-configuration 清除下次启动时加载的配置文件 display configuration candlidate 当前未提交命令行信息(vrp5没有,v8的) 存储设备 命令 参数 fdisk 网络层协议与IP编址 ICMP IPX IP\n作用\n为网络层设备提供逻辑地址 数据包寻址与转发 协议头 TTL(time to live) 0-255 8bit\n防止环路\nProtocol(协议号) 6/TCP 17/UDP 11/ICMP\nIPV4 32bit A类地址 0.0.0.0 127.255.255.255.255\nB类 128.0.0.0 191.255.255.255\nC类 192.0.0.0 223.255.255.255\nD类 224.0.0.0 239.255.255.255\nE类 240.0.0.0 255.255.255.255\n私网IP\nA: 10.0.0.0 10.255.255.255\nB: 172.16.0.0 172.31.255.255\nC: 192.168.0.0 192.168.255.255\nIPV6 128bit\n子网划分(打脑壳) ICMP internet control message protocol\nIMCP重定向: 优化路由路径,实现更优路径 差错检测: ping 错误报告: tracert\n以太网交换基础 局域网中通用,常见协议\n以太网是建立在CSMA/CD(carrier sense multiple access/collision detection 载波监听多路访问/冲突检测)机制上的广播型网络\n早期无交换机分割局域网,抢占式的,出现冲突域,CMSA/CD缓解冲突\n交换机隔离冲突域 不能隔离广播域\n以太网二层接口类型\n1.Access: 一般链接主机与交换机\n2.Trunk: 一般连接交换机与交换机\n3.Hybrid: 可看作前面两个接口结合\n以太网帧格式(数据帧) Ethernet_Ⅱ IEEE 802.3 mac地址 48bit ex:00-1E-10-DD-DD-02 001E-10DD-DD02\nOUI(organizationally unique ldentifier) 厂商代码 24bit 制造商分配 24bit 按目的mac地址区分:单播地址 广播地址 组播地址 以太网帧: 单播帧 广播帧 组播帧\n未知单播帧\n交换机转发行为\n泛洪 转发 丢弃 | arp -a | ARP缓存表 | | display mac-address verbose | mac地址表 |\n配置 system-view interface GigabitEthernet 0/0/1 undo negotiation auto speed 1000 #接口速率 duplex full #全双工 # 验证 sidplay interface GibabitEehernet 0/0/1 VLAN原理与配置 VLAN(virtual local area network) 虚拟局域网 划分广播域\nVlan Tag\nVlan帧\n802.1Qtag\nVLAN划分方式\n接口 mac ip子网 协议 策略 PVID,默认1,每个端口只有一个(1-4094)\n接口类型 Access(主机与交换机,只能处理一个标签) Trunk(交换机,处理多个标签) Hybrid(前两个结合) tagged 和 untagged 控制出口 设置PVID VLAN配置 基础配置\nundo portswitch # 二层接口切换为三层\n#系统视图 #创建VLAN vlan vlan-id #批量创建 vlan batch {vlan-id1 [to vlan-id2]} # batch -- VLAN ID # vlan-id1 -- 起始VLAN编号 # vlan-id2 -- 末尾VLAN编号 # 查看VLAN display vlan --- # Access # 接口视图 # 配置接口类型 port link-type access # 配置Access接口缺省VLAN prot default vlan vlan-id --- \\ # Trunk # 接口视图 port link-type trunk # Trunk端口指定VLAN prot trunk allow-pass vlan {{vlan-id[to vlan-id2]}} | all # Trunk口缺省VLAN port trunk pvid vlan vlan-id --- # Hybrid # 配置接口类型 prot link-type hybrid # Hybrid指定VLan 不能同时包含在两个列表中 prot hybrid untagged vlan {vlan-id1 [to vlan-id2]} | all prot hybrid tagged vlan {vlan-id1 [to vlan-id2]} | all # Hybrid口缺省VLAN prot hybrid pvid vlan vlan-id MAC 绑定 VLAN # VLAN视图 mac-vlan mac-address mac-address {mac-address-mask|mac-address-mask-length} # mac地址| mac地址掩码 | mac地址长度1-48 #使能MAC地址与VLAN # 接口视图 mac-vlan enable display mac-vlan mac-address all dis mac-vlan vlanID VLAN通信 三层交换机实现\n物理接口 交换机配置access口,并划分vlan 路由器配置ip地址,与交换机连接线缆,实现三层通信 子接口 vlanif # 子接口配置 interface GigabitEthernet0/0/0.10 dot1q termination vid 10 ip address ipaddress arp broadcast enable # 最后开启arp广播 vlanif\n存在数据链路层\nSTP(spanning tree protocol)生成树协议 通过阻塞端口消除环路,实现链路备份 RSTP（Rapid Spanning Tree Protocol,快速生成树协议）协议基于STP协议,实现网络拓扑快速收敛 MSTP(默认)\nIEEE 802.1D\n二层环路典型问题\n广播风暴 mac地址漂移 操作步骤\n选举一个根桥,会出现抢占,谁优先级高谁为根 非根交换机选举一个根端口 网段选举一个指定端口 阻塞非根,非指定端口 基本概念 根桥(桥ID) BID由16位的桥优先级(bridge priority)与桥MAC地址构成(唯一)\n16bit bp 48bit mac\nBID最小被选举为根桥\n先比较端口优先级 之后比较MAC地址 开销(Cost) 用于计算根路径开销,即到达根的开销\n带宽大,cost小,可配置\nRPC(root path cost,根路径开销) 接口到根的RPC = 路途所有入方向cost累加\n端口ID(PID,port ID) 由 高4bit接口优先级 + 低12bit接口编号 组成 默认128\nBPDU(bridge protocol data unit,网桥协议数据单元) STP协议报文,用于STP网络拓扑计算\n配置BPDU(configuration BPDU) TCN BPDU(topology change notification BPDU) 网络拓扑改变时发送 基础配置 # 配置工作模式 stp mode {stp | rstp | mstp} # 配置根桥 stp root primary # 备份根桥(优先级4096) stp root secondary --- # 优先级(默认32768) stp priority priority # 接口开销类型(默认IEEE 802.1t即dit1t) stp pathcost-standard { dot1d-1998 | dot1t | legacy } # 配置开销值 stp cost cost --- # 接口优先级(缺省为128) stp priority priority # 启用STP/RSTP/MSTP stp enable --- # 批量配置边缘端口 interface range GigabitEthernet 0/0/10 to GigabitEthernet 0/0/20 group-number GigabitEthernet 0/0/10 to GigabitEthernet 0/0/20 # 配置边缘端口 stp edged-port enable RSTP IEEE 802.1w\n新增端口类型\n备份端口 边缘端口 接口类型减少至三个\nforwarding learning discarding VBST: 基于VLAN的STP MSTP: 多生成树\n以太网链路聚合与交换机堆叠,集群 网络冗余备份,链路聚合,避免单点故障\n具体实现\n单板 设备 链路聚合 提升链路带宽\nEth-Trunk(以太网链路聚合)\n相关概念\n聚合组(Link Aggregation Group,LAG) 成员接口与成员链路 活动接口 | 活动链路 非活动接口 | 非活动链路 聚合模式:手工模式,LACP 活动接口上,下限 链路聚合控制协议数据单元(link aggregation control protocol data unit,LACPDU)\n默认系统优先级 32768\n配置命令 interface eth-trunk trunk-id mode {lacp / manual load-balance} # 须保持两端链路聚合模式相同,lacp 或者 手工 eth-trunk trunk-id # 接口视图加入trunkID trunkport interface-type {interface-number} # eth-trunk视图 mixed-rate link enable # 默认不允许速率不同eth-trunk端口加入聚合组 lacp priority priority # 配置LACP优先级,越小越高,默认32768 # 系统视图 | 接口视图 # 加入聚合组的接口才能设置(即配置端口是否活动端口) max active-linknumber {number} # 需保持两端接口数一致 # 只有LACP模式可配置最大活动接口 least active-linknumber {number} # 配置下限阈值 # LACP及手工模式都可配置 IP路由基础 路由表\n目的网络/掩码 出接口 下一跳 10.1.1.0/24 GE0/0/0 1.1.1.2 路由信息获取方式及默认优先级\n直连路由 0 静态路由 60 动态路由 OSPF内部路由 10 外部 150 display ip routing-table 查看路由表\ncost 度量值/开销值\n转发原则\n最长匹配原则\n静态路由 配置命令\nip route-static ip-address {mask | mask-length} nexthop-address # 关联下一跳IP ip route-static ip-address {mask | mask-length} interface-type interface-number # 关联出接口 ip route-static ip-address{ mask | mask-length} interface-type interface-number 缺省路由 0.0.0.0/0\n动态路由 按工作区域\n1.IGP(interior gateway protocols,内部网关协议)\nRIP OSPF IS-IS 2.EGP(exterior gateway protocols,外部网关协议)\nBGP 按工作机制及算法\n1.distance vector routing protocols,距离矢量路由协议\nRIP 2.link-state routing protocols,链路状态路由协议\nOSPF IS-IS OSPF基础 路由协议\nOSPF（Open Shortest Path First，开放式最短路径优先） IGP(Interior Gateway Protocols,内部网关协议) EGP(Exterior Gateway Protocols,外部网关协议) Distance Vector Routing Protocols,距离矢量路由协议 Link-State Routing Protocols,链路状路由协议 链路状路由协议\nLSA泛洪 -\u0026gt; 建立路由连接 LSDB -\u0026gt; 全网拓扑信息数据库 SPF计算 -\u0026gt; 计算最优路径\n路由高级特征 路由递归\n等价路由\n浮动路由\n路由汇总 | 路由聚合\nCIDR(classless inter-domain routing,无类别域间路由)\n相同网络地址,汇聚为一个\n引发问题\n划分子网过大,引发环路 网络地址转换 NAT（Network Address Translation，网络地址转换）\n解决私有地址与公网地址转换,路由器实现\n静态NAT 一个私有地址配置一个共有地址\n配置命令\n# 方式一.接口视图 nat static global {global-address} inside {host-address} # global 公网IP # inside 私网IP --- # 方式二.系统视图 nat static global {global-address} inside {host-address} # 之后在接口视图开启static nat nat static enable 动态NAT 在公网地址池中随机按需使用\n配置\nnat address-group group-index start-address end-address # 创建公有地址池 # group-index 地址池编号 # 配置地址转换为ACL规则 acl number rule permit source source-address source-wildcard # 配置基础ACL,匹配需要进行动态转换的源地址范围 nat outbound acl-number address-group group-index [no-pat] # 接口视图关联地址池和ACL # no-pat 不进行端口转换 NAPT,Easy-IP NAPT(network address and port translation,网络地址端口转换)\n转换地址时连同端口也转换,实现60000+地址访问\n及动态nat最后不加no-pat\nEasy IP:无地址池\n适合HDCP,PPPoE\n配置\nacl 2000 rule 5 permit source 192.168.1.0 0.0.0.255 quit intterface GigabitEthernet0/0/1 nat outbound 2000 # easy ip核心,并绑定ACL NAT Server 公网地址:端口 绑定 私网地址:端口\n配置\n# 接口视图 nat server protocol tcp global 122.1.2.1 www inside 192.168.1.10 8080 ACL Access Control List,访问控制列表\nAAA原理与配置 AAA（ Authentication, Authorization, and Accounting）认证,授权,计费\nNAS(Network Access Server)\nAAA服务器\n不认证 本地认证 远端认证 aaa认证常用协议 RADIUS （Remote Authentication Dial-In User Service）远程认证拨入用户服务\nUDP 1812(端口) 认证 1813 计费 配置命令\naaa # 进入aaa配置视图 authentication-scheme anthentication-scheme-name # 创建认证方案 authentication-mode { hwtacacs | local | radius } # aaa视图 domain domain-name authentication-scheme authentication-scheme-name # domain视图绑定认证方案 local-user user-name password cipher password # 创建本地用户,并配置密码 # 可使用格式 user@pwd local-user user-name service service-type { {terminal | telnet | ftp | ssh | snmp | http} ppp | none } # 设置本地用户接入类型,默认全部关闭 local-user user-name privilege level level # 本地用户权限级别 display domain name default_admin # 查看配置 display aaa offline-record all # 查看用户在线信息 常用网络服务与应用 FTP 20(通信端口) 21(发起TCP连接)端口\n通信模式\nASCLL模式 binary(二进制)模式 工作模式\n主动(PORT) 被动(PASV),可控制通信端口 路由交换配置FTP\nftp [ipv6] server enable aaa local-user user-name password irreversible-cipher password local-user user-name privilege level level local-user user-name service-type ftp local-user user-name ftp-directory directory # 用户级别必须3以上 TFTP 简单文件传输协议,UDP,69\n使用\ntfpt TFTP-Server-IP get filename tfpt TFTP-Server-IP put filename telnet 23\nVTY(virtual type terminal,虚拟类型终端)\n配置\ntelnet server enable user-interface vty 0 4 # 最多支持4个用户远程登录 protocol inbound {all | telnet} # 设置通信协议,默认ssh authentication-mode {aaa | none | password} # 认证方式 set authentication password cipher # 设置密码,不同版本命令可能不同 DHCP 配置\ndhcp enable dhcp select interface # 接口视图,开启接口地址池DHCP dhcp server dns-list ip-address # 指定接口地址池DNS服务器地址 dhcp server excluded-ip-address start-ip-address [end-ip-address] # 指定不参与自动分配地址 dhcp server lease {day [ hour hour [minute minute]] | unlimited} # 配置地址租期,默认一天 --- # 全局配置 ip pool ip-pool-name network ip-address [mask {mask | mask-length}] gatewag-list ip-address dns-list ip-address lease { day day [hour hour [minute minute]] | unlimited } dhcp selecct global #接口视图开启该DHCP,即使用全局地址池 ipaddress dhcp-allowc # 客户在接口视图下获取ip DNS 递归查询,向其他服务器查询 迭代查询,告知哪里有dns解析地址 NTP(network time protocol) UDP,123\nWLAN概述 相关基础概念 Wireless LAN（无线局域网）,无线网络技术\nAP AC\nCAPWAP(Control And Provisioning of Wireless Access Points Protocol,无线接入点控制和配置协议)\n直连组网,AP最终会经过AC 旁挂组网,AP不一定要经过AC\n无线电磁波\n无线组网概念\nBSS(Basic Service Set,基本服务集)\n一个AP覆盖范围 BSS服务区域内,STA可相互通信 BSSID(Basic Service Setldentifier,基本服务集标识符)\n无线网身份标识,AP的MAC表示 SSID(Service Set Identifier,服务集标识符)\n无线网的名字 便于识别,用SSID代替BSSID VAP(Virtual Access Point,虚拟接入点)\n一个VAP生成多个AP ESS(Extend Service Set,扩展服务集)\n多AP使用同一个SSID构建的BSS组成一个更大规模的虚拟BSS CAPWAP AP与AC建立隧道\nAP获取IP地址 DHCP获取 广播获取 CAPWAP隧道建立 AP接入控制 AP版本升级(可选) AC只能控制特定版本AP AP与AC版本最好相同 CAPWAP隧道维持 控制隧道(keepalive) 数据隧道(echo request,echo responese,报文) 广域网技术 WAN（Wide Area Network，广域网）\n连接几十至几千公里的局域网\nWAN设备分类\nCE(Customer Edge,用户边缘设备) PE(Provider Edge,服务提供商边缘设备) P(Provider,服务提供商设备) 早期协议: PPP/DHLC/FR/ATM\nPPP PPPoE 网络管理与运维 SNMP 华为iMaster NCE IPV6 报头\nSDN与HFV概述 SDN（Software Defined Networking，软件定义网络） 解决传统网络难于定位等问题\n全网通过SND controler控制(转发)\niMaster NCE 网络管控层,华为关于网络层统一管控平台\nNFV（Network Functional Virtualization，网络功能虚拟化） 虚拟化\n网络编程与自动化 园区典型组网架构及实践 园区网:802.3 802.11 协议构建;概述\n","permalink":"blog.2332334.xyz/posts/system/hw-hcia/","summary":"","title":"Hw Hcia"},{"content":"Hydra 简介 Hydra是著名黑客组织thc的一款开源的暴力密码破解工具，支持多种网络服务的非常快速的网络登陆破解工具，是暴力破解中的神器。\n基本使用 下载地址 Github-Linux: https://github.com/vanhauser-thc/thc-hydra\nGithub-Windows: http://github.com/maaaaz/thc-hydra-windows\n安装 apt install hydra 下载可能不是最新,推荐github下载源码后执行\n./configure make make install 然后即可使用.\ndebian 可选库:\napt-get install libssl-dev libssh-dev libidn11-dev libpcre3-dev \\ libgtk2.0-dev libmysqlclient-dev libpq-dev libsvn-dev \\ firebird-dev libmemcached-dev libgpg-error-dev \\ libgcrypt11-dev libgcrypt20-dev 使用 hydra [命令行选项] [-s Port] TARGET(目标) PROTOCOL(协议) [可选参数]\n命令行选项包括: | 参数 | 说明 |\n|\u0026mdash;|\u0026mdash;|\n| -R | 继续上一次破解 |\n| -S | 使用SSL |\n| -s | 指定非默认端口 |\n| -l | 指定破解用户名 |\n| -L | 指定用户名字典 |\n| -p | 指定密码破解 |\n| -P | 指定密码字典 |\n| -e [ns] | 可选选项，n:空密码试探，s:使用指定用户和密码试探 |\n| -C | -L/-P选项字典 登录名:密码 |\n| -M | 目标文件,一行一个 |\n| -o | 指定结果输出文件 |\n| -f | 使用 -M 后,只要破解成功一个即终止 |\n| -t | 线程数,默认16|\n| -w | 最大超时时间,默认30s |\n| -v/-V | 详细过程 |\n| server | 指定服务名,支持的服务和协议:telnet ftp pop3 http[s]-{head/get} http-{get/post}等等 |\n选择目标，可以使用三个选项来指定要攻击的目标：\n命令行上的单个目标：只需将IP或DNS地址放入\n命令行上的网络范围：CIDR规范，例如“ 192.168.0.0/24”\n文本文件中的主机列表：每个条目一行\n选择协议\n可选参数,目标端口\n示例 hydra -l 用户名 -p 密码 IP ssh #爆破ssh hydra -L name.txt -P pwd.txt IP 协议 参考 安全运维 - 基础安全之弱口令检测\nGithub-Readme\n","permalink":"blog.2332334.xyz/posts/software/hydra-trygetpassword/","summary":"","title":"Hydra TryGetPassword"},{"content":"jenkins jave写的项目持续集成(CI)工具 自动化构建,测试,交付,部署\n安装 基本硬件要求:\n256mb RAM 1G存储空间,docker运行,建议最小10g 软件要求:\n需要java才能运行\nOpenJDK\nsudo apt update # 搜索你需要的openjdk版本安装 sudo apt search openjdk sudo apt install openjdk-11-jdk java -version ubuntu # LTS版 wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add - sudo sh -c \u0026#39;echo deb https://pkg.jenkins.io/debian-stable binary/ \u0026gt; \\ /etc/apt/sources.list.d/jenkins.list\u0026#39; sudo apt-get update sudo apt-get install jenkins # DNF LTS sudo wget -O /etc/yum.repos.d/jenkins.repo \\ https://pkg.jenkins.io/redhat-stable/jenkins.repo sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key sudo dnf upgrade sudo dnf install jenkins java-devel 其他可直接apt install kenkins安装\n启动 jenkins\nsudo systemctl start jenkins 输出内容\nLoaded: loaded (/etc/rc.d/init.d/jenkins; generated) Active: active (running) since Tue 2018-11-13 16:19:01 +03; 4min 57s ago 注意防火墙\ncentos # LTS sudo wget -O /etc/yum.repos.d/jenkins.repo \\ https://pkg.jenkins.io/redhat-stable/jenkins.repo sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key sudo yum upgrade sudo yum install jenkins java-1.8.0-openjdk-devel sudo systemctl daemon-reload # 启动 sudo systemctl start jenkins Docker安装 推荐 jenkins/jenkins 镜像,LTS版没有docker CLI且功能不完全\n# 拉取镜像 docker pull jenkins/jenkins # 运行镜像 docker run \\ --name jenkins-docker \\ --rm \\ --detach \\ --privileged \\ --network jenkins \\ --network-alias docker \\ --env DOCKER_TLS_CERTDIR=/certs \\ --volume jenkins-docker-certs:/certs/client \\ --volume jenkins-data:/var/jenkins_home \\ --publish 2376:2376 \\ docker:dind \\ --storage-driver overlay2 安装配置 访问http://localhost:8080 从Jenkins控制台日志输出中，复制自动生成的字母数字密码（在两组星号之间） # 打印密码 sudo cat /var/lib/jenkins/secrets/initialAdminPassword 参考 jenkins中文网 jenkins官网文档 ","permalink":"blog.2332334.xyz/posts/software/jenkins/","summary":"","title":"Jenkins"},{"content":"JavaScript 基础信息 ECMAScript 欧洲计算机制造协会\nDOM BOM\n脚本-动态类型-解释型语言\n输出信息\nprompt(\u0026lsquo;弹出输入框\u0026rsquo;) alert(\u0026lsquo;弹出提示\u0026rsquo;) console.log(\u0026lsquo;控制台输出\u0026rsquo;) infinity 无穷大 NaN not a number\n字符串类型与任何类型相加 都为字符串拼接\nBoolean(\u0026rsquo;\u0026rsquo;):{\u0026rsquo;\u0026rsquo;, 0, NaN, null, undefined} with false\n逻辑运算符 === 值和数据类型都相同\n逻辑运算： 短路运算/逻辑中断 两个或多个表达式 类似三元计算符\nconsole.log(\u0026#39;\u0026#39; \u0026amp;\u0026amp; 1234) // \u0026#39;\u0026#39; console.log(112 \u0026amp;\u0026amp; 223) // 223 console.log(233 || 444) // 233 console.log( 234 || 10++) // num2=10 如为真返回右边表达式值 假 返回 左边 左边返回后不执行右边表达式 switch(){ case 1: break finally: goto } // case 和判断数据为全等 数组 var array = new Array(); var array = []; 函数 arguraments 参数\n伪数组\n数组序号获取,无数组方法\n全局作用域\n函数内无 var 参数为全局变量 局部作用域\n块级作用域\n作用域链: 内部函数访问使用链式结构查转(就近原则)\n预解析: 将 var function 提升至作用域最前面 预先解析\n变量预解析(变量提升) 只提升变量声明,不提示赋值(当前作用域前面) 函数预解析 函数声明提升,同上 对象 构造函数 function Method(name) { this.name = name, this.say = function (say) { console.log(say) } } // 对象 yc = new Method(\u0026#39;yc\u0026#39;); yc.say(\u0026#39;hh\u0026#39;); 遍历对象：\nfor(var k in yc){ cosnole.log(\u0026#39;key: \u0026#39;+k) console.log(\u0026#39;value: \u0026#39;yc[k]) } 内置对象 Math PI abs max，min floor 向下取整 ceil 向上取整 round 四舍五入，负数取较大值 random Data Array instanceof 类型判断 push 追加数组元素 unshfit 前面添加元素 pop 删除最后的元素 shift 删除第一个元素 reverse 翻转数组 sort 排序 indexOf 返回索引号 lastIndexof String charAt 根据位置获取字符 charCodeAt substr 截取字符串 concat 链接字符串 replace 替换字符串 split 分割为数组 基本包装类型： 把简单数据类型 包装成了 复杂数据类型\n如此才有相应的属性和方法调用\nstring 不可变 同c#\nWeb Apis DOM document object modal\n选择器 getElementById\ngetElementByTagName\ngetElementByClassName\nquerySelector\ncrud 修改文本\ninnerHTML * innerText 修改样式\nthis.style.backgroundColor = \u0026quot;#333\u0026quot;\n修改的样式为行内样式，权重仅次于 !importent\nplanholder text 验证字符串\n修改类名\nthis.className = \u0026quot;redtext class2\u0026quot;\n自定义属性获取与修改\nsetAttribute removeAttribute getAuttribute dataset\n\u0026lt;div class=\u0026#34;customizediv\u0026#34; data-index=\u0026#39;1\u0026#39; data-serve-name=\u0026#39;name\u0026#39;\u0026gt;\u0026lt;/div\u0026gt; var cdiv = element.queryselecter(\u0026#39;customizediv\u0026#39;); // 1 cdiv.getAttribute(\u0026#39;data-index\u0026#39;) // 2 cdiv.dataset.index // 3 cdiv.dataset[\u0026#39;index\u0026#39;] // 驼峰法命名 cdiv.dataset.serveName 获取 data 开头的自定义属性\n节点操作 父节点\nnode.parentNode 子节点\nchildNode 所有子节点（元素节点和文本节点） nodeType 0 为文本节点 nodeType 1 为元素节点 node.chileNode[1] children 子节点文档元素,非标准 最为常用 firstChild 获取包括文本节点和元素节点 lastChild firstElementChild 获取元素节点，IE9以上 兄弟节点\nnextSibling previousSibling 都包含所有节点，元素和文本 nextElementSibling 创建节点\ncreateElement insertBefore(创建的元素，添加元素的位置) var div = document.querySelecter(\u0026#39;div\u0026#39;); //创建节点 var ulele = document.createElement(\u0026#39;ul\u0026#39;); //添加节点 div.appendChild(ulele); div.insertBefore(ulele,div.children[0]) 删除节点\nremoveChild href javascript:; javascript:void(0); 阻止跳转\n复制节点\ncloneNode() 参数为空 ｜｜ 为 null 浅拷贝(只克隆节点本身，不包含子节点)；true 为深拷贝\nvar ul = element.querySelecter(\u0026#39;div\u0026#39;); var lil = ul.children[0].cloneNode(true); ul.appendChild(lil) 动态创建元素区别\ndocument.wirte 导致页面重绘 element.innerHTML 数组写入，效率更高 document.createElement element.insertAdjacentHTML(,elemtnt) 事件 注册事件 具有唯一性 后续事件会覆盖前面事件 var btn.onclick = function() {} 事件监听 addEventListener 同一元素可注册多个监听器，按注册顺序依次执行 attachEvent 非标准，不推荐 IE9之前版本可用 ver btn = element.querySelecter(\u0026#39;button\u0026#39;) btn[0].addEventListener(\u0026#39;click\u0026#39;,function() { console.log(\u0026#39;注册的 onclick 点击事件\u0026#39;)}); 第三个 bool 参数判断是否为冒泡 或者 捕获，true 为冒泡阶段\n解除绑定的事件 // method 1 btn[0].onclick = none // method 2 btn[0].removeEventListener(事件名，调用的函数名) //method 3 btn[0].detachEvent(事件名，调用函数名) DOM事件流 事件流执行过程，连续触发处于其中的事件\n从上往下 html文档到事件触发者 事件捕获阶段 该阶段父元素绑定事件更快执行\n从下往上 事件触发者到文档顶层 事件冒泡阶段 该阶段底层元素绑定更快执行\njs代码只能执行其中一个阶段 onclick and attachEvent 只能得到冒泡阶段 addEventListener(type , listener , useCapture) 第三个参数为true，即捕获阶段；默认false，冒泡阶段 事件对象 btn.onclick = function(event){ console.log(event) } IE 678 使用 window.event\n事件委托 父元素添加事件监听，避免重复给子节点添加造成性能影响\ne.target 和 this 区别\ne.target 触发事件的对象 this 绑定事件的对象 IE678 不支持 e.target\n三个事件执行顺序 keydown -\u0026gt; keypress -\u0026gt; keyup\nkeyCode属性 获取触发事件的ASCII码\nBOM window对象\n全局属性或方法都能被window访问 有特殊属性为name，尽量不声明为 name 的变量 事件\npageLoadEvent\nwindow.onload\n页面内容全部加载完后执行的事件 window.addEventListener(“load”,eventFunc)\ndocument.addEventListener(\u0026ldquo;DOMContentLoaded\u0026rdquo;,eventFunc)\nDOM加载完即执行，标签加载完 windowSize\nwindow.onresize = function(){} this.innerWidth 获取窗口宽度 Timer\nwindow.setTimeout\n可直接调用 定时器加标志符，即不同属性名 window.clearTimeout\nsetInterval\n每隔几秒中执行该事件 clearInterval(timmerName)\n清除定时器 同步与异步\nmain，主线程执行栈 -\u0026gt; 同步任务执行结束 -\u0026gt; 异步任务队列\n回调函数作为异步任务执行 localtion\nnavigator 对象\nnavigator.userAgent history 对象\njs网页动画 offset 动态获取位置\n元素位置\nelement.offsetParent 返回带有定位的父级元素，父级没定位返回 body\nelement.offsetTop 返回元素相对带有定位的父元素上方的偏移量\nelement.offsetLeft 返回元素相对带有定位父元素左边框大的偏移\nelement.offsetWidth\nelement.offsetHeight\n返回自身包含 padding border 内容区的宽度｜高；不带单位\nclient 可视区相关信息，不包含border，含padding\n元素大小\nelement.clientTop\nelement.clientLeft\nelement.clientWidth\nelement.clientHeight\npadding + content，不含 padding，无单位\nscroll 滚动距离\nwindow.pageXOffset 页面滚动距离\nmouseover \u0026amp;\u0026amp; mouseenter\n前者会冒泡\n本地存储 sessionStorage 生命周期为关闭浏览器窗口\n同一个窗口下数据共享\n存储为键值对\nsessionStorage.setItem(key,value) sessionStorage.getItem(key) sessionStorage.removeItem(key) sessionStorage.clear() localStorage 生命周期永久生效\n浏览器中数据共享，多窗口共享\n键值对\n使用方法基本同上\nJquery 原生js的封装函数库\nJquery $ 顶级对象\njquery 转换 dom var div =document.querySelecter(\u0026#39;div\u0026#39;) $(div) // 原生转jquery $(div)[0] $(div).get(0) // jquery 转 dom 常用Jquery API 选择器 基本\u0026amp;层级选择器 $(\u0026#39;div\u0026#39;) $(\u0026#39;#id\u0026#39;) $(\u0026#39;.class\u0026#39;) $(\u0026#39;ul\u0026gt;li\u0026#39;) $(\u0026#39;ul li\u0026#39;) 隐式迭代 对匹配的元素内部进行循环遍历，链式编程\n筛选选择器 $(\u0026#39;li:first\u0026#39;) $(\u0026#39;li:last\u0026#39;) $(\u0026#39;li:eq(2)\u0026#39;) // 索引号为 2 $(\u0026#39;li:odd\u0026#39;) // 索引号为奇数 $(\u0026#39;li:even\u0026#39;) // 索引号为偶数 选择器方法 $(\u0026#39;li\u0026#39;).parent() $(\u0026#39;li\u0026#39;).children() $(\u0026#39;li\u0026#39;).find() $(\u0026#39;li\u0026#39;).siblings() // 兄弟元素 $(\u0026#39;li\u0026#39;).nextAll() $(\u0026#39;li\u0026#39;).prevAll() $(\u0026#39;li\u0026#39;).hasClass() $(\u0026#39;li\u0026#39;).eq(2) 其他methods 操作css $(this).css(\u0026#39;color\u0026#39;) // 获取属性值 $(this).css(\u0026#39;color\u0026#39;,\u0026#39;red\u0026#39;) // 设置单个属性值 $(this).css({\u0026#39;color\u0026#39;:\u0026#39;red\u0026#39;,\u0026#39;background-color\u0026#39;,\u0026#39;blue\u0026#39;}) // 对象设置多个属性值 操作class $(this).addClass(\u0026#39;mclass\u0026#39;) $(this).removeClass(\u0026#39;mclass\u0026#39;) $(this).toggleClass(\u0026#39;mclass\u0026#39;) // 切换类 AJAX $.get(url, [data], [callback]) // 不带参数 ajax $get(\u0026#39;url\u0026#39;, (res) =\u0026gt; { console.log(res) }) // 带参数 ajax $.get(\u0026#39;url\u0026#39;, {id: 1}, (res) =\u0026gt; {}) $.post(url, [data], [callback]) $.ajax({ type: \u0026#39;\u0026#39;, url: \u0026#39;\u0026#39;, data: {}, success: (res) =\u0026gt; {} }) ","permalink":"blog.2332334.xyz/posts/web/js/","summary":"","title":"JS"},{"content":"javascript ES6 语法 既 ecma 2015年6月推出的ecmascript标准统称\n类与实例 封装 继承 多态 类中注意事项\n类无变量提升，必须先定义再使用 类中共有方法和属性必须加 this 才能访问 constructor 中的 this 指向实例对象，方法中的 this 指向方法调用者 创建类\nclass Car { // 构造函数 constructor(name) { this.name = name } driver(dname){ console.log(\u0026#39;bmw is drive\u0026#39;) } } 继承 extends\nclass Bmw extends Car{} super 关键字\n必须在子类 this 关键字之前使用 class Bmw extends Car{ constructor(name){ super(name) // 获取父类中的数据 } super.driver() } 构造函数与原型 ES6 之前 组合继承 首字母大写，new 创建 function Man(name,age){ this.name = name, this.age = age, this.talk = function() { console.log(\u0026#39;i am talk\u0026#39;) } } var am = new Man(\u0026#39;am\u0026#39;,12) 静态成员与实例成员\nMan.lastName = \u0026#39;ln\u0026#39; //静态成员 ，只对构造函数可用可访问 am.talk() //实例对象 构造函数 原型对象 prototype\n实现构造函数内 方法共享 共用同一内存空间\nMan.production.drink = function(){ console.log(\u0026#39;drink\u0026#39;) } 实例对象 通过 proto 访问构造函数中的 prototype；即 proto =\u0026gt; prototype ;两者等价\nconstructor属性\n即构造函数本身\n构造函数 实例对象 原型对象 三者关系\n原型链 =\u0026gt; 逐层查找 直至 object 下一层级 null\ncall方法 改变this指向\nfunction Father (uname, age) { this.uname = uname, this.age = age } // 继承父构造 function Son (uname, age) { Father.call(this,uname,age) } new methods forEach() 迭代遍历 arrary.forEach((value, index, array) =\u0026gt; { console.log(\u0026#39;数组元素，索引号，数组本身\u0026#39;) }) return true 不可中断循环\nfilter() 过滤 arrary var returnArray = arrary.filter((value,index,array) =\u0026gt; { return value\u0026gt;=10 }) some() 查找数组中是否有满足条件的元素 bool var Val = arrary.some((value, index, array) =\u0026gt; { return true }) console.log(\u0026#39;Val === true\u0026#39;) 匹配到第一个元素后即返回\nObject.defineProperty() 定义新属性或修改原有属性 Object.defineProperty(obj, prop, descriptor) descriptor 包含4种属性\nvalue 设置属性值 writable 是否可重写 enumerable 是否可枚举 configurable 是否可被删除或被再次修改 method 定义 // 1 function f1() {} // 2 var f2 = function() {}; //3 var f3 = Function(\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;console.log(a+b)\u0026#39;) f3(1,2) 和class中相同有原型链\n调用 // 1 普通函数 function f1() {} f1() f1.call() // 2 对象的方法 var obj = { callMe: function() {} } obj.callMe() // 3 构造函数 function F3() {} new F3() // 4 绑定事件 btn.onclick = function() {} // 5 定时器函数 setInterval(function(){}, 1000) // 1s后自动调用 // 6 立即执行函数 (function(){})() apply 改变this指向,第二参数为array var arr = [1,32,324,22,214] var max = Math.max.apply(Math,arr) bind 不改变原有函数this，不调用原函数 返回原函数的拷贝 严格模式 \u0026#39;use strict\u0026#39;; 严格模式 this 指向\n以前全局函数 this 指向 window；现在为 undefined 以前构造函数不 new 可调用，当普通函数，this 指向 全局；现在 报错 new 实例化构造函数指向创建的对象实例 定时器 this 指向 window 事件，对象指向调用者 函数不能有重名参数 函数声明必须在顶层，ES6引入块级作用；不允许非函数代码块内声明函数 可为整个脚本开启，获取为某个函数开启\n高阶函数 =\u0026gt; 函数为参数 委托\n闭包 =\u0026gt; 有权访问另一个函数作用域中的变量的函数，延伸变量作用范围\n浅拷贝 =\u0026gt; 拷贝一层，更深层次数据（对象,数组）只拷贝引用地址\n// 浅拷贝语法 Object.assign(sourceObj,newObj) 深拷贝 =\u0026gt; 拷贝多层，每一层级都会拷贝\n正则 异步 Promise ES5语法 避免回调地狱；是个构造函数\nconst promise = new Promise() promise.then() // 返回的是Promise对象的话，可进行链式调用 .catch() // 捕获错误；最后可捕获前所有错误，最前则避免then停止持续执行 .all(promiseArry) // 根据promiseArray 顺序执行，执行完毕后返回结果 .race() // 并行执行传入的promise，相较all更快 await async ES8 es2017\nawait 返回异步操作之后的结果\nasync waitTimer() { await setInterval(() =\u0026gt; {console.log(\u0026#39;timer)} ,0) } EventLoop js为单线程 异步任务委托给宿主环境（浏览器，node.js）执行 已完成异步任务对应回调在任务队列中排队等待执行 js主线程执行结束后，再执行该任务队列，依次执行 宏任务-微任务 异步任务分为 宏任务 微任务\n每次宏任务执行完；判断是否有微任务；有则执行完所有微任务再执行宏任务\n宏任务： 需要排队等待的\nexap： setInterval\n微任务\nexap： Promise\nES6语法 ES2015 之后的标准\nlet 有块级作用域 不存在变量提升（先声明才能使用） 暂时性死区 var num = 10; if(true){ num = 20; let num = 30 } // num is not defined const 值（内存地址）不可变 有块级作用域 声明必须赋值 解构赋值 按照一定模式，从数组或对象中提取值，将提取的值赋值给另一个变量\n数组\nlet [a, b,c] = [1, 2, 3] console.log(a) console.log(b) console.log(c) 对象\nlet person = { name: \u0026#39;zs\u0026#39;, age: 20} let {name, age} =person console.log(name) console.log(age) let {name: myName, age: myAge} =person // myName 等为别名 console.log(myName) console.log(myAge) 箭头函数 函数体只有一句话，且执行结果就是返回值，可省略函数体大括号\n形参只有一个，可省略小括号\nArray 扩展方法 Array.from 将伪数组或可遍历对象转化为数组；第二个参数，类似数组的map，对每个元素进行处理，将处理后的值返回数组\nArray.find 查找符合条件的第一个数组成员，没有返回 undefined\nArray.findIndex\nArray.includes\n数组中是否包含给定值，返回bool\n模版字符串 let name = `${name} hello` String 扩展方法 startsWith 参数字符串是否在原字符串头部，返回bool\nendsWith 参数字符串是否在原字符串尾部\nrepeat 将字符串重复N次，返回新字符串\nSet 数据结构 类似数组，成员值唯一，没有重复值；是个构造函数\nconst s1 = new Set() s1.size s1.add() // return s1 s1.delete() // return bool s1.has() // return bool s1.clear() // no return s1.forEach((value,index) =\u0026gt; console.log(value+\u0026#39; \u0026#39;+index)) ","permalink":"blog.2332334.xyz/posts/web/js-es6/","summary":"","title":"JS ES5"},{"content":"js 模块化 避免多人开发,函数混乱,命名冲突,不可复用 函数闭包实现模块化(不可重用,封装模块(返回对象)实现重用) 模块化规范\nCommonJS ** AMD CMD ES6 Modules ** 模块化的重要部分\ncommonjs 导出(export) 声明你想要外部访问的值,对象等 导入(require) 使用其他 js 文件 //导出 module.exports = { flag: true, test(a, b) { return a + b; }, }; //导出 let { flag, test } = require(\u0026#39;moduleA\u0026#39;); //等同 let _m1 = require(\u0026#39;moduleA\u0026#39;); let flag = _m1.flag; let test = _m1.test; es6 export import //模块化js,避免命名冲突 \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; // 统一导出 export { 变量,函数,对象 } // 单独导出 export var val1 = 100 export function aaa(){} export class Person(){} //唯一导出,导出可自定义名字 export default name ----- //导入 import {变量,函数,对象} from \u0026#39;./a.js\u0026#39; import * as name from \u0026#39;./a.js\u0026#39; 导入导出\nwebpack 依赖 node.js\n主要功能\n静态模块打包工具\n前端模块化工具\n代码混淆压缩\n浏览器 js 兼容性\n性能优化\n基本使用\nwebpack ./src/js/main.js ./dist/js/bundle.js 报错可在前面加上 npx\n其他打包工具:grunt/gulp 核心为 Task,前端自动化任务管理工具\n没或少使用模块化时可使用\n配置task,并且定义 task 要处理的事务(ES6,ts 转化,图片压缩,scss 转 css 等) 使用工具依次执行 task webpack 插件 webpack-dev-server npm i webpack-dev-server -D // wepback 自动打包 类似 nodemon webpack.config script dev: \u0026#39;webpack serve\u0026#39; html-webpack-plugin npm i html-webpack-plugin // webpack index copy // webpack.config.js const HtmlPlugin= require(\u0026#39;html-webpack-plugin\u0026#39;) const htmlPlugin = new HtmlPlugin({ template: \u0026#39;./src/index.html\u0026#39;, filename: \u0026#39;./index.html\u0026#39; }) module.exports = { plugins: [htmlPlugin] } webpack 配置 第三方中文文档\n3.1 webpack.config.js 默认配置文件\n//CommonJS const path = require(\u0026#39;path\u0026#39;); module.exports = { mode: \u0026#39;development\u0026#39;, // production 开发模式 or 发布 entry: \u0026#39;./src/main.js\u0026#39;, // 打包入口文件路径 output: { // 输出路径 path: path.resolve(__dirname, \u0026#39;dist\u0026#39;), filename: \u0026#39;bundle.js\u0026#39;, }, plugins: [], devServer: { // 配置 webpack-dev-devserver open: true, // 初次打包自动打开浏览器 host: \u0026#39;127.0.0.1\u0026#39;, port: 80, }, }; 修改 webpack.config.js 或者 package.json 后，需重启实时打包服务器\n3.1.2 packge.json npm run默认使用全局安装的包 配置文件中使用局部安装的包 也可直接\u0026quot;build\u0026quot;: \u0026quot;E://Code/2021/vue/node_modules/.bin/webpack\u0026quot;使用统一包 包默认使用node_modules/.bin/webpack # 初始化 npm init # script中配置脚本,使用方法 npm run 脚本名 loader webpack 处理非 js 文件的 module\n3.2 css 配置 使用 loader 过程\nnpm 安装需要的 loader webpack.config.js 下的 modules 进行配置 安装相关 loder:\ncnpm install --save-dev css-loader cnpm install --save-dev style-loader webpack.config.js 配置文件:\nmodule.exports = { module: { rules: [ { test: /\\.css$/, use: [{ loader: \u0026#39;style-loader\u0026#39; }, { loader: \u0026#39;css-loader\u0026#39; }], }, ], }, }; 之后重新生成即可\nuse 中 loader 默认从末尾开始处理，后写的 loader 先执行\n3.3 less 配置 1.安装 loader\nnpm install less less-loader --save-dev 2.添加 rules\nrules: [{ test: /\\.less$/, use: [ // compiles Less to CSS \u0026#34;style-loader\u0026#34;, \u0026#34;css-loader\u0026#34;, \u0026#34;less-loader\u0026#34;, ], }], 3.4 图片处理 1.loader\ncnpm install url-loader file-loader --save-dev 2.rules\nrules: [{ test: /\\.(png|jpg|gif)$/, // use: \u0026#39;url-loader?limit=22222\u0026#39; \u0026lt;=的img才会转为base64 use: [{ loader: \u0026#39;url-loader\u0026#39;, options: { limit: 8192, // 配置保存格式 name: \u0026#39;img/[name].[hash:8].[ext]\u0026#39; }, }], }], 3.url 处理需要在output中添加publicPath\npublicPath: \u0026#34;dist/\u0026#34;, 之后所有url-loader处理的都会输出该目录\n3.5 babel ES6 转 ES5，处理高级语法等\n1.安装 loader\ncnpm install babel-loader babel-core babel-plugin-proposal-decoorators babel-preset-es2015 --save-dev 2.配置 rules\nrules: [ { test: /\\.js$/, exclude: /(node_modules|bower_components)/, use: { loader: \u0026#39;babel-loader\u0026#39;, options: { presets: [\u0026#39;es2015\u0026#39;], }, }, }, ]; webpack 配置 vue 1.安装 vue 的包\ncnpm install --save vue 2.配置 main.js\nimport Vue from \u0026#39;vue\u0026#39;; const app = new Vue({ el: \u0026#39;#vueDom\u0026#39;, data: { message: \u0026#39;Vue\u0026#39;, }, }); 3.配置 vue 文件支持\ncnpm install --save-dev vue-loader vue-template-compiler webpack-plugin 对现有架构扩展\n版权声明 配置文件\nconst webpack = require(\u0026#39;webpack\u0026#39;); module.exports = { plugins: [new webpack.BannerPlugin(\u0026#39;\u0026#39;)], }; 打包 html 1.下载 html-webpack-plugin 包\ncnpm install --save-dev html-webpack-plugin 2.修改 plugins 配置\nconst HtmlWebpackPlugin = require(\u0026#39;html-webpack-plugin\u0026#39;); new HtmlWebpackPlugin({ template: \u0026#39;index.html\u0026#39;, }); 此时的PublicPath多余应删除 初始html文件,可不用引用js,模板也可在插件配置文件中定义\n压缩 js 1.下载 uglifyjs-webpack-plugin 包\ncnpm install --save-dev uglifyjs-webpack-plugin@1.1.1 2.修改 plugins 配置\nnew UglifyjsWebpackPlugin(); 配置本地服务器 实现修改后自动更新 js 文件\n1.下载 webpack-dev-server@2.9.3\ncnpm install --save-dev webpack-dev-server@2.9.3 2.修改配置文件(webpack.config.js)\ndevServer: { contentBase: \u0026#39;./dist\u0026#39;, inline: true } 3.配置 script\n\u0026#34;script\u0026#34;:{ \u0026#34;dev\u0026#34;: \u0026#34;webpack-dev-server --open\u0026#34; } 配置文分拆合并 1.安装合并处理插件\ncnpm install --save-dev webpack-merge@4.1.5 2.修改不同配置(简单 prodction 示例)\nconst UglifyJsPlugin = require(\u0026#39;uglifyjs-webpack-plugin\u0026#39;); const WebpackMerge = require(\u0026#39;webpack-merge\u0026#39;); const base = require(\u0026#39;./base.js\u0026#39;); module.exports = WebpackMerge( (module.exports = { base, plugins: [new UglifyJsPlugin()] }), ); 3.packge.json\n\u0026#34;build\u0026#34;: \u0026#34;webpack --config 配置文件路径\u0026#34; 4.修改生成路径\n\u0026ndash;\nESLint 统一开发风格\n","permalink":"blog.2332334.xyz/posts/web/js_modules/","summary":"","title":"JS Modules"},{"content":"Kubernetes/K8s kubernetes官方文档 minikuber官方教程\n基本组成及相关概念 etcd\n保存了整个集群的状态\napiserver\n提供了资源操作的唯一入口，并提供认证、授权、访问控制、API 注册和发现等机制\ncontroller manager\n负责维护集群的状态，比如故障检测、自动扩展、滚动更新等\nscheduler\n负责资源的调度，按照预定的调度策略将 Pod 调度到相应的机器上\nkubelet\n负责维护容器的生命周期，同时也负责 Volume（CVI）和网络（CNI）的管理\ncontainer runtime\n负责镜像管理以及 Pod 和容器的真正运行（CRI）\nkube-proxy\n负责为 Service 提供 cluster 内部的服务发现和负载均衡\nother\nkube-dns 负责为整个集群提供 DNS 服务 Ingress Controller 为服务提供外网入口 Heapster 提供资源监控 Dashboard 提供 GUI Federation 提供跨可用区的集群 Fluentd-elasticsearch 提供集群日志采集、存储与查询 细分使用的对象名称\nPod 复制控制器（Replication Controller，RC） 副本集（Replica Set，RS） 部署(Deployment) 服务（Service） 任务（Job） 后台支撑服务集（DaemonSet） 有状态服务集（StatefulSet） 集群联邦（Federation） 存储卷（Volume） 持久存储卷（Persistent Volume，PV）和持久存储卷声明（Persistent Volume Claim，PVC） 密钥对象（Secret） 用户帐户（User Account）和服务帐户（Service Account） 名字空间（Namespace） RBAC访问授权 Role-based Access Control(角色的访问控制) kubernetes yaml必须字段 apiVersion kubernetes版本\nkind obj 类别\nmetedata 唯一标示对象，name UID or namespace\nspec 期许状态\n本地安装及基本使用 学习环境安装 minikube\n使用官方安装脚本 正式环境-外网 正式环境-国内 系统: ubuntu 20.04\nDocker\n国内主要问题: gcr.io(Google Cloud Container Registry)被墙\n本地运行安装 一.安装前置条件\nmemory and swap accounting 统计Linux内核的内存和交换区 关闭swap 查看是否开启该参数 cat /proc/cmdline 修改配置开启该功能 vi /etc/default/grub # GRUB_CMDLINE_LINUX=\u0026#34;cgroup_enable=memory swapaccount=1\u0026#34; # 参数中添加如上内容 更新GRUB update-grub grub启动引导程序\n关机swap swapoff -a # 临时关闭 sed -ri \u0026#39;s/.*swap.*/#\u0026amp;/\u0026#39; /etc/fstab # 永久关闭 重启系统 二.安装相关包\napt-get update \u0026amp;\u0026amp; apt-get install -y apt-transport-https curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/apt/sources.list.d/kubernetes.list deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main EOF apt-get update apt-get install -y kubelet kubeadm kubectl 三.下载镜像\nkubeadm config images list # 获取镜像列表 从阿里云获取该列表镜像\n#/bin/bash images=( # 下面的镜像应该去除\u0026#34;k8s.gcr.io/\u0026#34;的前缀，版本换成上面获取到的版本 kube-apiserver:v1.24.0 kube-controller-manager:v1.24.0 kube-scheduler:v1.24.0 kube-proxy:v1.24.0 pause:3.7 etcd:3.5.3-0 coredns/coredns:v1.8.6 ) for imageName in ${images[@]} ; do docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName done 报错 Error response from daemon: No such image: registry.cn-hangzhou.aliyuncs.com/google_containers/coredns/coredns:1.8.6\n将 images中的 coredns/coredns:v1.8.6 替换为 coredns:1.8.6 即可\n参考链接 kubernetes官方文档\n安装Kubernetes(k8s)保姆级教程\u0026mdash;无坑版 centos7.9\nkubernetes安装（国内环境） Ubuntu 16.04\nkubernetes指南\n","permalink":"blog.2332334.xyz/posts/software/kubernetes/","summary":"","title":"Kubernetes"},{"content":"Linux修改系统时间显示为：年月日时分秒 1、编辑全局配置文件：/etc/profile，使所有用户均显示该格式： vim /etc/profile export TIME_STYLE=\u0026#34;+%Y-%m-%d %H:%M:%S\u0026#34; #or echo \u0026#34;export TIME_STYLE=\u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;\u0026#34; \u0026gt;\u0026gt; /etc/profile 2、让配置立即生效： source /etc/profile # 验证配置是否生效 ll ","permalink":"blog.2332334.xyz/posts/system/linux-changeshowdata/","summary":"","title":"Linux ChangeShowData"},{"content":"Linux 常用指令及部分参数,更多详细信息需要查看最下面帮助信息命令 linux网络 命令 参数 详细信息 ifconfig 查看/临时设置 IP 地址 traceroute 查看一个数据包到网站的所有路由 route -n 路由状态 wget 下载网页(-c断点续传) lsof \u0026amp;nbsp 统打开的文件 -i:端口 查看占用这个端口的信息 -u 用户 查看该用户打开的文件 -c 进程名 该进程打开的文件 -p uid 同上 +d 目录 查询指定目录下被进程开启的文件(+D 递归) netstat 查看网络相关信息 -t TCP协议 -u UDP协议 -l 监听 -r 路由 -n IP地址与端口号 -tlun 查看本机监听端口 -an 查看本机所有网络连接 -rn 查看本机路由表 关机,重启 命令 参数 详细信息 halt 关机 poweroff init 0 shutdown -chr 定时执行 -h 关机(now 立即关机) -r 重启 -c 取消上一个关机指令 reboot 重启 init 6 runlevel 查询系统运行级别(0-6) 0 关机 1 单用户 2 不完全多用户,不包含NFS服务 3 完全多用户 4 未分配 5 图形界面 6 重启 文件管理 命令 参数 详细信息 ls 显示目录信息 -a 显示所有文件 -l 详细信息 -d 目录属性 -i 系统索引文件id -h 可读显示文件大小 (通用命令,多命令可用) ln 硬链接 -s 软链接 rm 删除文件或目录 -r 删除目录 -f 强制执行 cp 复制 -r 复制目录 -p 保留文件属性 mkdir 创建目录 -p 递归创建 pwd 显示当前路径 -P 显示绝对路径 rmdir 删除空目录 mv 移动或重命名 文档编辑 命令 参数 详细信息 cat -l 显示文件内容 -n 带有行号 echo 输出字符串或提取变量值 head 查看文件开始内容 tail 查看文件尾部内容 (默认10行) -n 指定行数 用户管理 命令 参数 详细信息 useradd 新建用户与用户目录 (无密码) adduser 新建用户 passwd 更改用户密码 deluser 删除用户 -r 删除用户及用户目录 who 查看用户信息 (简略) w 查看用户信息 (详细点) uptimme 登录信息 logout 退出登录 压缩 命令 参数 详细信息 gzip .gz 只能压缩文件,不保留原文件 -d 解压 gunzip 解压 tar -zcvf 或 -zxvf 常见linux打包 (f最后,tar.gz加x参数) -c 打包 -x 解包 -v 显示详细信息 -f 指定文件 -z 打包同时压缩 (解压) zip .zip 压缩文件或目录 -r 压缩目录 unzip 解压 bzip2 .bz2 zip升级版,压缩率更高 -k 保留原文件 帮助 命令 参数 详细信息 man 获取帮助信息 (manual) f或space 翻页 enter 换行 q 退出 whatis 命令简短信息 apropos 配置文件简短信息 info help 参考网址 https://www.linuxcool.com/\nuseradd与adduser\n史上最牛的Linux视频教程—兄弟连\n","permalink":"blog.2332334.xyz/posts/system/linux-cmd/","summary":"","title":"Linux Cmd"},{"content":"linux后台运行命令时使用到了这个,做个记录: ctrl-c：发送 SIGINT 信号给前台进程组中的所有进程。常用于终止正在运行的程序；\nctrl-z：发送 SIGTSTP信号给前台进程组中的所有进程，常用于挂起一个进程；\nctrl-d：不是发送信号，而是表示一个特殊的二进制值，表示 EOF，作用相当于在终端中输入exit后回车；\nctrl-\\：发送 SIGQUIT 信号给前台进程组中的所有进程，终止前台进程并生成 core 文件；\nctrl-s：中断控制台输出；\nctrl-q：恢复控制台输出；\nctrl-l：清屏\n其实，上述所有的控制字符都是可以通过stty命令更改的，可在终端中输入命令”stty -a”查看终端配置。\n参考链接 linux下如何在shell中结束进程（ctrl+c\\ctrl+z\\ctrl+d\\ctrl+\\的用法) ","permalink":"blog.2332334.xyz/posts/system/linux-ctrl+/","summary":"","title":"Linux Ctrl+"},{"content":"Linux磁盘管理工具 开始 2021年3月24日\n更新 2021年3月30日\n包括:\ndf - du - dd fdisk parted mkfs df \u0026amp; du \u0026amp; dd df: 查看文件系统整体使用量 # 常用命令如下 df -h df -ahT # 人性化显示带有文件系统类型的所有文件 df -h /etc # 也可指定目录显示 du: 查看空间使用情况 du -s # 列出总量不显示目录 du -h dd:备份,复制数据,恢复数据 # 备份整个硬盘 /dev/sda 至 /mnt/bak dd if=/dev/sda of=/mnt/bak # 备份为硬盘镜像 dd if=/dev/sda of=/mnt/bak/sdabak.img # 从镜像恢复数据 dd if/mnt/bak/sdabak.img of=/dev/sdb fdisk: 常用磁盘分区表操作工具 仅支持2t及一下磁盘大小\nfdisk -l # 查看系统分区情况 fdisk /path # 对该磁盘进行操作 --- m 查看命令解释 p 当前磁盘状态 l 列出已知分区类型 d 删除分区 n 添加分区 p 打印分区表 q 不保存退出 w 写入操作 parted 操作大于2t磁盘推荐使用,不像fdisk执行命令后要用w最后执行,parted输入一条命令它就执行了,没有最后的确认\n-i 交互模式\n-s 脚本模式\n#创建一个MBR分区表 parted -s /dev/sdb mklabel msdos # 创建gpt分区表 parted /dev/sdb mklabel gpt #在分区表上创建一个分区并创建文件系统 parted -s /dev/sdb mkpart primary ext4 0.0 100% #创建一个gpt分区，将硬盘所有空间都分给这个分区，文件系统为ext4 parted -s /dev/sdb mklabel gpt mkpart primary ext4 0.0 100% #激活分区 parted -s /dev/sdb set 1 boot on #设置分区名称 parted /dev/sdb name 1 \u0026#39;DATA_DISK\u0026#39; #删除分区 parted /dev/sdb rm 1 #查看可用分区 parted /dev/sdb print devices mkfs 文件系统格式化\nmkfs tab tab 查看支持的文件系统\nmkfs.ext4 /dev/sdb # 通过.ext4 将该分区设置为ext4的文件系统 mkfs -t ext4 /dev/sdb # 也可通过上述参数指定文件系统 fsck 使用该工具对文件系统进行检查和修复 也可fsck+tab+tab 查看支持的文件系统\noption 解析 t 指定文件类型 A 对/etc/fstab中所有分区检查 C 显示完整检查进度 p+A 同时检查多个 R+A 省略 / V 详细信息 a 有错自动修复 r 有错询问是否修复 f 强制检查 # 全部检查修复 fsck /dev/sdb -y # 强制检查指定分区并自动修复,显示进度 fsck -Cfa -t ext4 /dev/sdb mount 执行上述操作后如果不挂载到系统中,依旧是无法访问的\numount 卸载\nmount /dev/sdb /mnt/sda1 umount /dev/sdb # -f 可强制卸载,可在NFS(网络文件系统)无法读取时使用 参考 菜鸟教程-linux磁盘管理 Linux分区工具-parted 6个关于dd命令备份Linux系统的例子 ","permalink":"blog.2332334.xyz/posts/system/linux-diskmanage/","summary":"","title":"Linux DiskManage"},{"content":"\u003e `friewalld`同样是通过内核`netfilter`模块来管理数据包 firewalld与iptables相比的优缺点 优点\n动态修改单条规则\n简单\n缺点\n默认请求全部拒绝,需要自行放行 firewadlld区域管理 包含区域\n阻塞区域(block):默认配置\n工作区域(work)\n家庭区域(home)\n公共区域(public)\n隔离区域(DMZ)\n信任区域(trusted)\n丢弃区域(drop)\n内部区域(internal)\n外部区域(external)\n默认配置文件位置:/usr/lib/firewalld/zones/\n配置方法/工具 firewall-config #图形化配置工具\nfirewall-cmd #命令行\n配置文件,上面那个路径的相关文件中\n安装方法 sudo yum install firewalld firewall-cmd命令参数 参数后跟=;比如:--zone=public\n| 参数 | 解析 |\n|\u0026mdash;|\u0026mdash;|\n| --zone | 选择管理区域 |\n| --list-ports | 列出已打开端口 |\n| --add-port | 添加端口,如:--add-port=3389/tcp |\n| --remove-port | 关闭端口,同上 |\n| --permanent | 永久生效 |\n| --reload | 重新加载配置,使修改生效 |\n参考资料 细说firewalld和iptables\nLinux firewalld 防火墙使用\n","permalink":"blog.2332334.xyz/posts/system/linux-firewalled/","summary":"","title":"Linux Firewalled"},{"content":"## 防火墙 主机防火墙\n网络防火墙\n主机防火墙(linux) 数据传输流程 iptables\nTCP协议三次握手,四次挥手\nnetstat -tnlpa | grep tcp | awk \u0026#39;{print $6}\u0026#39; | sort | uniq -c #判断是否受SYN攻击 四层模型(数据链路层mac,网络层ip,传输层TCP,应用层)都可应用防护墙\niptables 内核防护墙netfilter,iptables是管控netfilter的工具\niptables结构 tables(表)\nchains(链)\nrules(规则)\niptables四张内建表,优先级从高到低,内核2.6.34后NAT表支持操作INPUT链\nraw: 高级功能,如:网址过滤,PREROUTING/OUTPUT两链\nmangle: 数据包修改(QOS),含有所有链\nnat: 地址转换,网关路由,含有:PREROUTING/POSTROUTING/OUTPUT三链\nfilter: 数据包包过滤,防火墙规则,含有:OUTPUT/FORWARD/INPUT三链\nchains(链) PREROUTING\nINPUT:保护本机\nFORWARD:保护后端主机(转发给数据包的主机)\nOUTPUT:管制本机\nPOSTROUTING\nip_forword,linux自带数据转发,默认关闭;FORWARD管控ip_forword.\niptables 参数 iptables [-t TABLE] COMMAND CHAIN [ -j (ACCEPT/REJECT/DROP;允许/拒绝/丢弃) ]\n| 参数 | 解析 |\n|\u0026mdash;|\u0026mdash;|\n| -P | 设置默认策略 |\n| -X/F/Z | 清空自定义规则/规则/规则计时器 |\n| -L | 查看规则链 |\n| -A | 在规则链尾加新规 |\n| -I | 在规则链头加新规 |\n| -D | 删除某规则 |\n| -s | 匹配来源地址IP/MASK，加叹号\u0026quot;!\u0026ldquo;表示除这个IP外。 |\n| -d | 匹配目标地址 |\n| -i | 匹配网卡名,流入数据 |\n| -o | 同上,流出 |\n| -p | 隐式扩展,协议:tcp,udp,icmp |\n| --dport | 目标端口号 |\n| --sport | 来源端口 |\n| -m | 隐式扩展 |\n| -nvL | 统计数据,规则列表,流量统计数据 |\n| -save | 导出filter表规则\nsudo service iptables save #保存规则到/etc/sysconfig/iptables中 sudo iptables-save \u0026gt; 指定保存位置 sudo iptables-restore \u0026lt;规则位置 #恢复规则 参考链接 知识盒子-防火墙配置之分类及工作原理\n防火墙和iptables(详细)\n","permalink":"blog.2332334.xyz/posts/system/linux-iptables/","summary":"","title":"Linux Iptables"},{"content":"Linux 内核升级及自动更新 一.Ubuntu内核升级 手动更新内核 uname -sr # 查看当前内核版本 sudo dpkg --get-selections | grep linux # 查看已安装内核 选择需要的内核版本: https://www.kernel.org/\n内核有四种:\nRC(prepatch) 预发布 Mainline 主线版本 Stable 稳定版 Longterm 长期维护版本 ubuntu内核主线版本: https://kernel.ubuntu.com/~kernel-ppa/mainline/\n选择相应硬件版本后,下载四个文件:2header,1image,1modules\n4.17前不包含modules文件,下载3个文件即可\n安装下载的内核\nwget 四个包的地址 sudo dpki -i *.deb reboot apt更新内核 sudo apt-get update sudo apt-get upgrade # 更新整个系统和所有包 sudo apt-get upgrade linux-image-generic # 只更新内核 更多内核更新工具 Ukuu Uktools Linux Kernel Utilities 二.Ubuntu内核自动升级 apt-mark sudo apt-mark hold linux-image-generic linux-headers-generic # 关闭内核自动更新 sudo apt-mark unhold linux-image-generic linux-headers-generic # 开启内核自动更新 修改配置文件 # 修改以下文件 sudo vim /etc/apt/apt.conf.d/10periodic sudo vim /etc/apt/apt.conf.d/20auto-upgrades #关闭自动更新 APT::Periodic::Update-Package-Lists \u0026#34;0\u0026#34;; APT::Periodic::Download-Upgradeable-Packages \u0026#34;0\u0026#34;; APT::Periodic::AutocleanInterval \u0026#34;0\u0026#34;; APT::Periodic::Unattended-Upgrade \u0026#34;0\u0026#34;; #开启自动更新 APT::Periodic::Update-Package-Lists \u0026#34;2\u0026#34;; APT::Periodic::Download-Upgradeable-Packages \u0026#34;1\u0026#34;; APT::Periodic::AutocleanInterval \u0026#34;0\u0026#34;; APT::Periodic::Unattended-Upgrade \u0026#34;1\u0026#34;; 参考地址 记一次Ubuntu 18.04 内核升级 升级 Ubuntu Linux 内核的几种不同方法 ","permalink":"blog.2332334.xyz/posts/system/linux-kernelupdate/","summary":"","title":"Linux KernelUpdate"},{"content":"linxu LVM 2021年3月24日 Logical Volume Management(逻辑容量管理)\n要了解的基础概念:\npv(Physical Volume):物理卷 PP(Physical Extend):物理区域 vg(Volume Group):卷组 lv(Logical Volume):逻辑卷 使用基本流程 # 1. 创建物理卷 pvcreate /dev/sda /dev/sdb # 查看创建的物理卷 pvs || pvdisplay # 2. 创建卷组,即将两个次磁盘合并到一个卷组中,其最小单位为4m,可通过 -s 在创建时修改大小 vgcreate vg1 /dev/sda /dev/sdb # 同样使用类似命令查看 vgs || vgdisplay # 3. 创建逻辑卷,指定卷组大小即名字 lvcreate -L 2T -n lv1 vg1 # 4. 格式化逻辑卷 mkfs.ext4 /dev/vg1/lv1 # 5. 挂载逻辑卷 mount /dev/vg1/lv1 /mnt/lv1 /etc/fstab 手动挂载信息需写入该文件实现开机自动挂载\n设备 挂载点 文件系统 参数 备份 自检 Device Mount Point FileSystem Parameters Dump Fsck Parameters参数包括 参数 解析 Async/sync 设置是否为同步方式运行，默认为async auto/noauto 当下载mount -a 的命令时，此文件系统是否被主动挂载。默认为auto rw/ro 是否以以只读或者读写模式挂载 exec/noexec 限制此文件系统内是否能够进行\u0026quot;执行\u0026quot;的操作 user/nouser 是否允许用户使用mount命令挂载 suid/nosuid 是否允许SUID的存在 Usrquota 启动文件系统支持磁盘配额模式 Grpquota 启动文件系统对群组磁盘配额模式的支持 Defaults 同事具有rw,suid,dev,exec,auto,nouser,async等默认参数的设置 # 示例1 Label=/dev/sdb /mnt/sda1 ext4 defaults 0 0 UUID=18823fc1-2958-49a0-9f1e-e1316bd5c2c5 /mnt/sda1 ext4 defaults 0 0 扩容 # 卷组扩容 pvcreate /dev/sdc vgextend vg1 /dev/sdc # 逻辑卷扩容至最大并自动加载起始点 lvextend -L +100%FREE /dev/vg1/lv1 -r #如不加 -r 选项,并且只扩容200m lvextend -L +200M /dev/vg1/lv1 resize2fs /dev/vg1/lv1 缩小容量 不推荐使用,需要先卸载已挂载的逻辑卷并检查文件系统\n# 卸载并检查文件系统 umount /dev/vg1/lv1 e2fsck -f /dev/vg1/lv1 resize2fs /dev/vg1/lv1 # 缩小 200m LV lvreduce -L 200 /dev/vg1/lv1 mount /dev/vg1/lv1 /mnt/lv1 # 缩小 VG vgreduce vg1 /dev/sdc # 移除PV以减少VG大小 pvremove /dev/sdc 参考 /etc/fstab文件的详解 逻辑卷管理(LVM) ","permalink":"blog.2332334.xyz/posts/system/linux-lvm/","summary":"","title":"Linux Lvm"},{"content":"LVM2 LVM丢失后恢复,及LVM一些高级命令!\nLVM丢失后恢复 异常断电后造成\n一.尝试恢复 vgcfgrestore -f /etc/lvm/backup/data data # 还原失败 查看/etc/lvm/backup/data 文件中硬盘ID号 对比blkid输出的UUID对比 得出可能是重启后,对于PV的UUID改变导致LVM丢失 二.备份数据 dd if=/dev/nvme0n1 of=/mnt/bak/nvme0n1.img 三.修正UUID不一致,并恢复卷组 1.修正UUID\npvcreate -u blfaxf-3CER-4r4l-MS32-v0aN-s3Ta-DH08ZV /dev/nvme0n1 --restorefile /etc/lvm/backup/data 2.恢复卷组\nvgcfgrestore -f /etc/lvm/backup/data data # 查看pv vg lv信息 pvs vgs lvs 3.激活逻辑卷\nlvchange -ay /dev/data/home 之后即可挂载使用\n参考 LVM逻辑卷VG卷组丢失故障处理 ","permalink":"blog.2332334.xyz/posts/system/linux-lvmrecoverdata/","summary":"","title":"Linux LvmRecoverData"},{"content":"linux目录结构 linux 是树状结构目录\n目录 详解 /bin Binary(二进制)缩写,存放最经常使用的命令 /boot 启动Linux核心文件，包括连接文件及镜像 /dev Device(设备)缩写，Linux外设(Linux访问外设和访问文件是相同的) /home 用户主目录(一个用户一个目录，一般用户名为文件名) /lib 系统基本动态共享库(类似Win的DLL)，几乎所有程序都会用到 /lost+found 这个目录一般是空的,系统非法开机后，这里才存放目录 /media Linux自动识别设备(U盘，光驱等)，识别后Linux会将识别的设备挂载到这个目录 /opt 主机额外安装软件摆放的目录，默认空 /proc 虚拟目录，系统内存映射，可直接通过访问目录获取，修改系统信息 /root 系统管理目录，超级用户目录 /sbin s(Super User),root使用的系统管理程序 /selinux Redhat/CentOS特有目录,Selinux是安全机制(类似Win防火墙) /srv 服务启动后需提取的数据 /sys linux2.6内核最大变化,2.6新出现文件系统sysfs所在目录（有针对进程信息的proc文件系统，设备的devfs文件系统，伪终端devpfs文件系统这3个文件系统） /tmp 存放临时文件 /usr 重要目录，用户很多程序和文件所在(类似Win的program files) /usr/bin 系统用户使用的应用程序 /usr/sbin 超级用户使用的较高级管理程序和系统守护程序 /usr/src 内核源代码默认目录 /var 存放不断扩充的，经常被修改的文件(如日志文件) /run 临时目录，系统启动以来的信息，系统重启后该目录文件删除或清除(如有/var/run，应该让它指向run) ","permalink":"blog.2332334.xyz/posts/system/linux-path/","summary":"","title":"Linux Path"},{"content":"lsof + netstat 端口信息查看 lsof 列出打开文件（lists openfiles）\nlsof -i:80\n输出相关信息解释如下:\n参数 解释 COMMAND 进程名称 PID 进程标识符 USER 进程所有者 FD 文件描述符,应用程序通过该描述符识别文件,cwd,txt等 TYPE 文件类型,DIR,REG等 DEVICE 指定磁盘名称 SIZE 文件大小 MODE 索引节点,文件再磁盘上的标识 NAME 打开文件的确切名称 lsof 更多参数信息\n命令参数 解析 lsof -i:[端口] 查看端口占用 lsof [文件] 显示打开文件的进程信息 lsof -c [进程] 显示进程现在打开的文件 lsof -c -p [UID] 列出该进程搜打开的文件 lsof -g [GID] 显示 [Group ID] 的进程情况 lsof +d [目录] 显示目录下被进程打开的文件 lsof +D [目录] 同上+搜索目录下的目录 lsof -d [fd] 显示该fd的进程 lsof -i -U 显示所有打开端口和UNIX domain 文件 netstat netstat -tunlp | grep 端口\n命令参数 解析 -t tcp相关 -u udp相关 -n 拒绝显示别名，能显示数字的全部转化为数字 -l 仅列出在Listen(监听)的服务状态 -p 显示建立相关链接的程序名 参考链接 菜鸟教程 ","permalink":"blog.2332334.xyz/posts/system/linux-port/","summary":"","title":"Linux Port"},{"content":"配置密钥登录 新建用户 1.adduser 用户 or useradd 用户 \u0026gt; 新建用户\n(adduser 为 useradd软连接)\n2.passwd 用户 \u0026gt; 设置密码\n3.usermod -aG wheel 用户 \u0026gt; 切换用户组\n（普通用户无sudo权限）\n设置密钥 ssh-keygen #建立密钥对 cd .ssh cat id_rsa.pub \u0026gt;\u0026gt; authorized_keys #安装公钥 chmod 600 authorized_keys chmod 700 ~/.ssh 更改文件权限 下载私钥，登录使用 配置SSH登录 vi /etc/ssh/sshd_config #配置文件 PasswordAuthentication no #不启用密码认证 PermitRootLogin no #禁止Root登录 #允许密钥认证 RSAAuthentication yes #centos7.4以上弃用这个第一代RSA PubkeyAuthentication yes # 公匙认证 重启SSH服务systemctl restart sshd\n参考地址 初始参考地址 设置密钥 ","permalink":"blog.2332334.xyz/posts/system/linux-pubkeylogin/","summary":"","title":"Linux PubkeyLogin"},{"content":"无人值守安装Cenetos7 KickStart PXE 预启动执行环境(Preboot Execute Environment)\n执行大致流程如下\n客户机(要安装系统的机器) -\u0026gt; 服务器(DHCP) -\u0026gt; TFTP(下载启动软件包执行安装)\n需要安装的一些服务\nhttp服务器(这里使用apache)\ntftp(简单文件传输协议,Trivial File Transfer Protocol)\ndhcp(自动分配IP)\nsyslinux(pxe引导程序)\n准备工作(关闭selinux和防火墙) vi /etc/selinux/config # 修改如下内容 SELINUX=disabled shutdown -r now systemctl stop iptables systemctl stop firewalld 需要安装的服务(注意修改相关ip等信息) 1.http\n配置http服务器\nsu yum install httpd -y systemctl start httpd 挂载镜像文件\nmkdir /var/www/html/centos7 mount /dev/cdrom /var/www/html/centos7/ #将镜像光盘挂载 执行成功后可通过浏览器访问该目录\n2.tftp\nyum install tftp-server xinetd -y vi /etc/xinetd.d/tftp #修改如下内容 dusable =no #启动服务 systemctl start xinetd 3.dhcp\nyum install dhcp -y vi /etc/dhcp/dhcpd.conf 添加如下内容 subnet 192.168.7.0 netmask 255.255.255.0 { range 192.168.7.200 192.168.7.240; #可分配ip范围 option subnet-mask 255.255.255.0; #子网掩码 default-lease-time 21600; #默认ip地址租用时间 max-lease-time 43200; #指定ip最长租用时间 next-server 192.168.7.139; #tfpt服务器地址,及本机地址 filename \u0026#34;/pxelinux.0\u0026#34;; #tfpt下载目录 } #启动服务 systemctl start dhcpd 此时客户机即可通过dhcp获取ip\n4.复制PXE引导\nyum install syslinux -y cp /usr/share/syslinux/pxelinux.0 /var/lib/tfptboot/ cp /var/www/html/centos7/isolinux/* /var/lib/tfptboot/ 5.修改客户端配置文件实现自动安装\nmkdir /var/lib/tftpboot/pxelinux.cfg cd /var/lib/tftpboot/pxelinux.cfg/ cp /var/www/html/centos7/isolinux/isolinux.cfg ./default cp default default.bak vi default # 修改为如下内容 default kickstart timeout 600 display boot.msg label kickstart menu label ^Install CentOS 7 kernel vmlinuz append initrd=initrd.img ks=http://192.168.7.139/ksconfig/ks.cfg 5.配置ks.cfg文件(安装配置)\ncd /var/www/html/ mkdir ksconfig cp /root/anaconda-ks.cfg ./ksconfig/ks.cfg cd ksconfig/ chmod 644 ks.cfg vi ks.cfg # 仅供参考,测试安装不通过 install #全新安装 url --url=\u0026#34;http://192.168.7.139/centos7/\u0026#34; #FTP或http下载地址 text #文本安装 auth --enableshadow --passalga=sha512 #认证方式 firstboot --disabled #初次启动 是否设置代理 firewalld --disabled # keyboard --vckeymap=us --xlayouts=\u0026#39;us\u0026#39; #系统键盘类型 lang en_US.UTF-8 #语言 network --bootproto=dhcp --gateway=192.168.7.2 --netmask=255.255.255.0 #ip等 network --hostname=test # rootpw 123456 #root 密码 services --enabled=\u0026#34;chronyd\u0026#34; #时间同步服务 timezone Asia/Shanghai -isUtc #时区 bootloader --append=\u0026#34; rhgb quiet\u0026#34; --location=mbr --boot-drive=sda #引导写入位置 clearpart --all --initlabel #清空系统分区 zerombr # part /boot --fstype=ext4 --size=500 #设置分区格式及大小 part /swap --size=1024 part / --fstype=ext4 --size=500 reboot #重启服务器 %packages #指定安装的软件包 @^minimal @core chrony kexec-tools @development #指定安装的命令或开发程序 tree net-tools lrzsz telnet wget lsof %end 推荐使用图形化程序配置界面生成配置:\nvim /etc/yum.repos.d/kick.repo #写入一下内容 [development] name=my-centos7 baseurl=file:///var/www/html/centos7/ enabled=1 gpgcheck=0 #安装启动图形配置 yum -y install system-config-kickstart system-config-kickstart 之后保存配置然后覆盖至/var/www/html/ksconfig/ks.cfg即可\n图形配置可以参考\n或者(两个链接内容都一样)\n6.最后设置客户机(要安装系统的机器)pxe启动即可\n参考 linux系统运维指南\nCentos 7Kickstart无人值守自动安装\nPreseed 配置环境 本机 ubuntu18.04\n镜像 ubuntu18.04\nroot用户\n所需服务 HDCP(自动分配IP)\nTFTP(传输引导系统)\nHTTP(下载配置文件)\n安装相关包 apt -y install isc-dhcp-server inetutils-inetd tftpd-hpa pxelinux apache2 修改配置 1.dhcp\n编辑配置文件\nvi /etc/dhcp/dhcpd.conf 写入一下内容\nsubnet 192.168.7.0 netmask 255.255.255.0 { range 192.168.7.200 192.168.7.240; #可分配ip范围 option subnet-mask 255.255.255.0; #子网掩码 default-lease-time 21600; #默认ip地址租用时间 max-lease-time 43200; #指定ip最长租用时间 next-server 192.168.7.138; #tfpt服务器地址,及本机地址 filename \u0026#34;/pxelinux.0\u0026#34;; #tfpt下载目录 } 启动服务\nsystemctl start isc-dhcp-server 设置dhcp网卡地址 /etc/default/isc-dhcp-server\n2.netboot\n在ubuntu 18.04镜像中没有该文件夹可从一下地址下载:\nhttp://cdimage.ubuntu.com/netboot/ -\u0026gt; netboot.tar.gz这个文件\n将下载的文件复制解压到`/var/lib/ftpboot/\n3.http\n启动apache2\nsystemctl start httpd 此时可通过浏览器访问该主机ip查看\n参考 使用PXE方式引导Ubuntu系统\n官方preseed中文文档\n英文文档\n","permalink":"blog.2332334.xyz/posts/system/linux-pxe-%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E5%AE%89%E8%A3%85/","summary":"","title":"Linux PXE 无人值守安装"},{"content":"### RAID磁盘阵列 [ Redundant Arrays of Inexpensive Disks ]\nRAID:容错式廉价磁盘阵列\n通过软硬件将小磁盘整合的装置,同时具有数据保护功能!\nRAID 由不同 level 等级选择,使得磁盘具有不同功能 RAID-0 (等量模式,stripe): 效果最佳\n数据通过分割后存储于各个磁盘 任何一个磁盘损毁都将造成数据丢失\nRAID-1 (映像模式,mirror): 完整备份\n磁盘一半存储一般备份 软件阵列写入不佳(只有一个南桥),硬件自动复制不走系统I/O,多线程读取RAID自行取得最佳平衡\nRAID-1+0 or RAID-0+1\n推荐1+0\n0和1都不需计算读写比其他RAID好\nRAID-5\n写入时(striping),在每颗磁盘加入一个同位检查数据(Parity),该数据记录其他磁盘备份数据.\n同位检查码CPU计算\n预设支持一颗磁盘损毁\nRAID-6 支持两颗磁盘损坏\nSpare Disk :预备磁盘功能\n通过预留磁盘,在阵列中有磁盘故障时自动更换错误磁盘,使用该预留磁盘! 摘抄至 \u0026laquo;linux鸟哥私房菜\u0026raquo;\n","permalink":"blog.2332334.xyz/posts/system/linux-raid/","summary":"","title":"Linux RAID"},{"content":"Raid-LSI 博通官网 型号: LSI-9361-8i\nRaid卡命令行工具\nlspci -v|grep RAID查看Raid卡版本\n下载安装(StorCLI) 1.官网下载\n2.解压并安装\n#解压下载的文件 unzip 007.. # 根据系统选择安装方式安装完成后,linux使用以下命令确认安装完成 /opt/MegaRAID/storcli/storcli64 -v alias \u0026#34;storcli=/opt/MegaRAID/storcli/storcli64\u0026#34; LSA包的安装脚本 其安装脚本含有四种安装方式选项(自行选择安装):\n1. - Gateway All program features will be installed. \u0026#39;Requires the most dis k space.\u0026#39; 2. - StandAlone This option will install components required for Local Server Management 3. - DirectAgent This option will install components required for Remote Server Management 4. - Light Weight Monitor Light Weight Monitor program features will be installed. 使用即相关命令 storcli show storcli show all 简短帮助文档\nList of commands: Commands Description ------------------------------------------------------------------- add Adds/creates a new element to controller like VD,Spare..etc delete Deletes an element like VD,Spare show Displays information about an element set Set a particular value to a property get Get a particular value to a property compare Compares particular value to a property start Start background operation stop Stop background operation pause Pause background operation resume Resume background operation download Downloads file to given device expand expands size of given drive insert inserts new drive for missing transform downgrades the controller reset resets the controller phy split splits the logical drive mirror /cx Controller specific commands /ex Enclosure specific commands /sx Slot/PD specific commands /vx Virtual drive specific commands /dx Disk group specific commands /fall Foreign configuration specific commands /px Phy specific commands /lnx Lane specific commands /[bbu|cv] Battery Backup Unit, Cachevault commands Other aliases : cachecade, freespace, sysinfo Use a combination of commands to filter the output of help further. E.g. \u0026#39;storcli cx show help\u0026#39; displays all the show operations on cx. Use verbose for detailed description E.g. \u0026#39;storcli add verbose help\u0026#39; Use \u0026#39;page[=x]\u0026#39; as the last option in all the commands to set the page break. X=lines per page. E.g. \u0026#39;storcli help page=10\u0026#39; Use J as the last option to print the command output in JSON format Command options must be entered in the same order as displayed in the help of the respective commands. Use \u0026#39;nolog\u0026#39; option to disable debug logging. E.g. \u0026#39;storcli show nolog\u0026#39; 更多参考官方文档,下方博客命令对新版本已经无法使用\n参考 MegaCli 监控raid状态 BROADCOM-博通官方文档 ","permalink":"blog.2332334.xyz/posts/system/linux-raid-lsi/","summary":"","title":"Linux RAID LSI"},{"content":"Rsync remote sync (远程同步) 本地或与远程文件同步\n安装 # Debian $ sudo apt-get install rsync # Red Hat $ sudo yum install rsync # Arch Linux $ sudo pacman -S rsync 使用 # 测试基本同步 rsync -avn source/ destination # 排除文件 rsync -av --include=\u0026#34;*.png\u0026#34; --exclude=\u0026#39;*\u0026#39; source/ destination # ssh rsync -av -e ssh source/ user@remote_host:/destination # ssh指示端口 rsync -av -e \u0026#39;ssh -p 2345\u0026#39; source/ user@host:/des # 增量备份 rsync -av --delete --link-dest /cpmpare/path source/ target/ 增量备份:源目录与目标目录之前还有个基准目录,第一次备份全局备份之后,之后备份目标目录只会存储源目录比基准目录多的文件\n参数 参数 解析 r 递归 a 保留源数据 n 测试同步,输出同步结果 z 同步时压缩数据 e 指定使用ssh传输数据 i 原目录与目标目录文件详细差异 \u0026ndash;delete 完全同步源目录,删除目标目录比源目录多的文件 \u0026ndash;exclude 排除文件或目录 \u0026ndash;include 必须同步 \u0026ndash;progress 参数表示显示进展 \u0026ndash;link-dest 参数指定增量备份的基准目录 参考 阮一峰\u0026ndash;ssh教程-rsync ","permalink":"blog.2332334.xyz/posts/system/linux-rsync/","summary":"","title":"Linux Rsync"},{"content":"shell脚本 与内核通信的命令行环境，命令解释器\n常见shell种类 Bourne Shell（/usr/bin/sh或/bin/sh）\nBourne Again Shell（/bin/bash）\nC Shell（/usr/bin/csh）\nK Shell（/usr/bin/ksh）\nTENEX C Shell（tcsh）\nFriendly Interactive Shell（fish）\nZ Shell（zsh）\nstart 文件开头,用于指出使用的shell\n#!/bin/bash 该语句为第一行首行，之后是脚本！\n最后使用 .sh 保存,执行时先要 chmod +x ./脚本,然后执行./文件名.sh\n语法 变量 命名规则基本与其他语言相似\nvariable=\u0026#34;bianliang\u0026#34; # =两边不能有空格,赋值不加$ echo $variable echo ${variable} #可加可不加 `{}` ,推荐加 只读变量: readonly variable\n删除变量: unset variable\n数据类型 字符串 variable=\u0026quot;字符串9527\u0026quot;\n使用单引号或者双引号都可以,推荐双引号\n获取字符串长度: echo ${#variable}\n截取字符串(从第二个截取到第四个): ${variable:1:4}\n查找字符串:\n`expr index \u0026#34;$variable\u0026#34; 查找的字符串 数组 支持一维数组\n0下标开始\n支持数组元素运行,但是值应大于0\narray=(var1 var2 ... varn) #定义数组,也可一行一个值 echo ${array[n]} #输出数组n的值 echo ${array[@]} #输出所有元素 echo ${#array[*]} #输出数组个数,加`#`及输出长度 注释 # 单行注释 # 多行注释 :\u0026lt;\u0026lt;EOF 注释内容 EOF 除了EOF,也可使用其他符号,只需首尾相同即可\n向脚本传递参数 参数 解释 $n 第n个参数 $# 传递参数个数 $$$ 脚本运行UID $! 后台运行最后一个进程UID $* 传递的所有参数,必须由\u0026quot;包围. $@ 同上,参数换行 $- shell当前选项,与set功能相同 $? 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误 运算符 算数运算符 原生bash不支持,可使用命令 awk 或 expr 等(expr为表达式计算工具)\nval=`expr 2 + 2` echo \u0026#34;$val\u0026#34; *乘号前加上转义(\\)\n关系运算符 只能判断数字,包括字符串内的数字.返回true or false\n运算符 解析(成立均返回true) -eq == -ne != -gt \u0026gt; -lt \u0026lt; -ge \u0026gt;= -le \u0026lt;= ex: if [$a -eq $b]\n布尔与逻辑运算符 运算符 解析(成立均返回true) 布尔 ! 非 -o 或 -a 与 逻辑 \u0026amp;\u0026amp; AND 两个竖线 OR 字符串运算符 运算符 解析 = 字符串是否相等 != 不等 -z 长度是否为0 -n 长度是否不为0 $ 字符串是否为空;ex: $a 文件属性测试 运算符 解析 -b file 是否块设备文件 -c 是否字符设备文件 -d 是否目录 -f 是否普通文件 -g 是否设置SGID位 -k 是否设置粘着位(Sticky Bit) -p 是否有名管道 -u 是否设置SUID位 -r 是否可读 -w 是否可写 -x 是否可执行 -s 是否为空(文件大小是否为0) -e 文件/目录是否存在 -S 是否socket -L 文件是否是个链接 判断 if 条件 then 命令 else 命令 fi # elseif if 条件 then 命令 elif 命令 then 命令 fi #case case 变量 in 值1) 命令 ;; 值2) 命令 ;; esac break continue\n循环 # for for var in ary[] do 命令 done # while while (( $val\u0026lt;=5 )) do 命令 done # do while until 判断 do 命令 done 函数 main(){ 巴拉巴拉 return 1 } main 参数传递同上\n参考资料 菜鸟教程-shell\n阮一峰bash脚本教程\n","permalink":"blog.2332334.xyz/posts/system/linux-shell/","summary":"","title":"Linux Shell"},{"content":" 一些 SSH 知识 基本介绍 阮一峰的 ssh 介绍\nssh -v user@ip\n查看详细连接过程\n操作 配置秘钥登录 # 生成秘钥 ssh-keygen cd ~/.ssh # 安装公钥 cat id_rsa.pub \u0026gt;\u0026gt; authorized_keys # 给予权限 chmod 600 authorized_keys chmod 700 ~/.ssh # 配置sshd_config文件 PubkeyAuthentication yes RSAAuthentication yes PermitRootLogin no AuthorizedKeysFile .ssh/authorized_keys # 秘钥登录完成后禁用密码登录 PasswordAuthentication no ChallengeResponseAuthentication no ssh-keygen -R domaon.com 将指定的主机公钥指纹移出known_hosts文件\n分发密钥实现免密登录 1.单个分发\n# 生成密钥 ssh-keygen # 分发密钥 ssh-copy-id root@ip # 配置本机免密钥登录 vim ~/.ssh/config Host sshtest HostName ssh.test.com User user Port 2200 IdentityFile ~/.ssh/id_rsa_test ssh sshtest 2.批量分发脚本实现\nroot用户的话注意ssh配置\nhost.txt\n192.168.1.1 user password 192.168.1.2 user password #!/bin/bash # expect分发密钥 pushKey(){ addr=$1 user=$2 pw=$3 /usr/bin/expect \u0026lt;\u0026lt;-EOF set timeout 10 spawn ssh-copy-id $user@$addr expect { \u0026#34;yes/no\u0026#34; { send \u0026#34;yes\\n\u0026#34;; exp_continue } \u0026#34;password:\u0026#34; { send \u0026#34;$pw\\n\u0026#34; } } expect eof EOF } # 本地是否有密钥 haveKey(){ if [ ! -f ~/.ssh/id_rsa ];then ssh-keygen -t rsa -P \u0026#34;\u0026#34; -f ~/.ssh/id_rsa else echo \u0026#34;id_rsa has created ...\u0026#34; fi } main(){ apt install -y expect host=/tmp/host.txt haveKey while read line do # echo $line user=`echo $line | cut -d \u0026#34; \u0026#34; -f 2` ip=`echo $line | cut -d \u0026#34; \u0026#34; -f 1` passwd=`echo $line | cut -d \u0026#34; \u0026#34; -f 3` pushKey $ip $user $passwd done \u0026lt; $host } main 问题 连接提示 Could not load host key: /etc/ssh/ssh_host_ed25519_key ssh-keygen -A service ssh restart 参考地址 解决\u0026quot; Could not load host key: /etc/ssh/ssh_host_ed25519_key\u0026quot;问题 Linux expect 介绍和用法 ssh密钥批量分发 阮一峰SSH 教程 ","permalink":"blog.2332334.xyz/posts/system/linux-ssh/","summary":"","title":"Linux SSH"},{"content":"sudo 使普通用户执行命令拥有root权限\nLinux user add sudo authority 方法一:修改 sudoers 1.未安装 sudo 需要登录 root 执行:\napt install sudo #ubuntu yum install sudo #centos 2.设置( root 下)\nvi /etc/sudoers 3.添加如下内容到配置文件\n用户名 ALL=(ALL) ALL 用户名 ALL=(ALL) NOPASSWD: ALL #执行sudo时不用输入密码 # or sudo usermod -aG sudo [name-of-user] 最后强制写入退出\n方法二:usermod添加进sudo 组 usermod -aG sudo 用户名 sudo相关命令 # 版本及相关信息 sudo -V # 当前用不sudo权限 sudo -l ","permalink":"blog.2332334.xyz/posts/system/linux-sudo/","summary":"","title":"Linux Sudo"},{"content":"lrzsz Centos安装\nsudo yum install lrzsz\n命令\nsz向服务器上传\nrz 文件名下载文件\ntrzsz","permalink":"blog.2332334.xyz/posts/system/linux-upload/","summary":"","title":"Linux Upload"},{"content":"linux后台执行 跑一些程序时退出shell程序就终止了,这时就要使用以下命令:\nlinux 中 0 1 2文件描述符\n名称 代码 操作符 Linux 下文件描述符（Debian 为例) 标准输入(stdin) 0 \u0026lt; 或 \u0026laquo; /dev/stdin -\u0026gt; /proc/self/fd/0 -\u0026gt; /dev/pts/0 标准输出(stdout) 1 \u0026gt;, \u0026raquo;, 1\u0026gt; 或 1\u0026raquo; /dev/stdout -\u0026gt; /proc/self/fd/1 -\u0026gt; /dev/pts/0 标准错误输出(stderr) 2 2\u0026gt; 或 2\u0026raquo; /dev/stderr -\u0026gt; /proc/self/fd/2 -\u0026gt; /dev/pts/0 nohup 最后退出shell务必使用 exit 或者 ,ctrl + d 退出，不然可能造成程序退出\nnohup( no hang up )\nnohup 你要执行的命令 \u0026amp; # 后台运行,默认在该程序目录生成nohup.out文件记录输出 nohup 你要执行的命令 \u0026amp;\u0026gt;log \u0026amp; nohup 你要执行的命令 \u0026gt;log 2\u0026gt;\u0026amp;1 \u0026amp; # 标准输出和错误输出到log并后台运行 bg 前台在跑程序时使用 ctrl + z 挂起进程以便执行命令\n这时使用 bg 程序uid 即可在后台继续运行\n查看后台进程信息 jobs -l # 查看后台运行的进程,可获得进程uid(jobs命令只是对当前终端生效) ps -ef |grep uid或者进程名 ps -aux |grep uid或者进程名 # ps+grep获得后台进程信息 ps aux | grep command | grep -v grep | awk \u0026#39;{print $1}\u0026#39; | xargs kill -9 # 直接通过command获取进程id并直接kill掉 切换至前台 fg 进程uid fg %uid # 将后台进程切换值前台 关闭该后台进程 kill 进程uid screen 命令 含义 快捷键 screen 新建会话 screen -S name 新建会话并命名 离开会话 ctrl + a + d screen -ls 查看所有会话 screen -r name 恢复会话 tmux # 创建tmux会话 tmux tmux new -s \u0026lt;session-name\u0026gt; # 分离会话 tmux detach # 查看会话 tmux ls # 接入会话 tmux attach -t 0 # 关闭会话 tmux kill-session -t 0 # 切换会话 tmux switch -t 0 # 重命名会话 tmux rename-session -t 0 \u0026lt;new-name\u0026gt; 快捷键\n快捷键 功能 ctrl + b + d 分离会话 ctrl + b + s 列出会话 ctrl + b + $ 重命名会话 ctrl + b + ？ 帮助信息 参考链接 nohup和\u0026amp;后台运行，进程查看及终止\nbeego如何在Linux系统后台运行以及调回前台运行 nohup bg fg 命令的使用\nlinux nohup, jobs, fg, tail指令 指令前后台切换\nlinux后台运行的几种方式\n","permalink":"blog.2332334.xyz/posts/system/linux-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/","summary":"","title":"Linux 后台运行"},{"content":"### Console 主要命令 top 的参数解析:\n| 参数 | 解释 |\n|\u0026mdash;|\u0026mdash;|\n| top | 显示进程信息,默认交谈式指令列(interactive command) |\n| -d [时间,秒] | 显示更新速度,交谈式按 s 更改 |\n| -q | 无延迟显示(测试无法使用,应该为默认模式) |\n| -i | 不显示闲置(idle)和无用(zombie)进程 |\n| -u [用户名] | 只显示该用户相关信息 |\n| -p [UID] | 显示该进程相关信息 |\n| -c | 显示完整命令(路径与名称) |\n| -S | 累积模式 |\n| -s | 安全模式(取消交谈式指令) |\n| -n [次数n] | 更新 n 此后停止 |\n| -b | 批次档模式,与 n 配合输出到文件中,Example: top -bn 1 \u0026gt;\u0026gt;top.log |\n图中参数解释：\n| 行数 | 包含信息 |\n|\u0026mdash;|\u0026mdash;|\n| 第一行 | 系统整体统计信息 |\n| | 当前时间 |\n| | 运行时间 up |\n| | 登录用户数 |\n| | 系统负载,任务队列平均长度 (三个值分别为 1min; 5min; 15min 到现在的平均值) |\n| 第二行 | Tasks(任务),进程信息 |\n| | total,进程总数 |\n| | running,运行中进程数 |\n| | sleeping,休眠 |\n| | stopped,停止 |\n| | zombie,僵尸进程 |\n| 第三行 | CPU信息(百分比) |\n| | us,用户空间占CPU百分比 |\n| | sy,内核 |\n| | ni,用户进程内改变优先级的进程 |\n| | id,空闲 |\n| | wa,等待输入输出(缓存) |\n| | hi,硬中断(Hardware IRQ) |\n| | si,软中断(Software Interrupts) |\n| 第三行 | mem,物理内存 |\n| 第四行 | swap,交换区 |\ntop中交互式指令:\n| 按键 | 解析 |\n|\u0026mdash;|\u0026mdash;|\n| 1 | 监控每个逻辑CPU状况 |\n| b | 视图加亮 |\n| shift + \u0026gt; / \u0026laquo;/kbd\u0026gt; | 按CPU占用排序 |\n| f | 编辑top显示视图字段 |\nGui or web Centos 这个桌面的我不太清楚,但是知道可以使用 cockpit,具体安装方法如下:\nsudo yum install cockpit systemctl start cockpit.socket systemctl enable --now cockpit.socket 如开启了防火墙,执行以下:\nfirewall-cmd --add-service=cockpit --permanent firewall-cmd --reload 之后就可以通过本机IP的9090端口进行访问了\nUbuntu 桌面自带有资源管理器,没有请执行以下命令安装:\nsudo apt-get install gnome-system-monitor gnome-system-monitor 软件截图\n参考地址 菜鸟教程-top命令\nlinux TOP命令详解 top -b -n 12000 \u0026gt;1.log\nLinux中top命令参数详解\n如何在 CentOS 8 中安装 Cockpit Web 控制台\n","permalink":"blog.2332334.xyz/posts/system/linux-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/","summary":"","title":"Linux 资源管理"},{"content":" Markdown markdown简介 轻量标记语言,便于转换成html.\nmarkdown换行时在行末敲 两个空格 即可\n语法及使用 语法 解析 标题 ! !表示符号与内容之间必须有空格 # 标题 相当于html中的\u0026lt;h1\u0026gt;标签 ## 二级标题 html中的\u0026lt;h2\u0026gt; \u0026mdash; \u0026mdash; 文字样式 \u0026amp;nbsp *内容* 斜体 **内容** 加粗 ***内容*** 斜体加粗 ~~内容~~~ 删除线 \u0026mdash; \u0026mdash; 列表 ! \u0026amp;nbsp + 内容 无序列表 (+前使用空格分级) 1. 内容 有序列表 (分级同上,使用相应数字) \u0026mdash; \u0026mdash; 图片 ![图片简介](图片路径) 简介相当于\u0026lt;a\u0026gt;标签中的 alt 属性 (路径可以是一个图片链接或者本地图片地址) [简介](网页链接) 链接网页,相当于\u0026lt;a\u0026gt;标签 [简介](#标题) 可以实现页面内跳转(vscode中的markdown预览可以实现) [简介][数字] 可在文章末尾使用 [数字]:链接 来实现a标签 \u0026mdash; \u0026mdash; 代码 \u0026amp;nbsp `echo hello` 单行代码,使用 ` 包括代码 (键盘esc下面那个键) ``` 首行和尾行添加左边三个 ` 即可实现(行首可指定编程语言) \u0026gt; 内容 ! 引用区块(多行在行首添加\u0026gt;即可 表格 | 表头列一 | 列二 | |---|---| #用以分割表头与内容 | 行二 | 行二 | | 行三 | 行三 | 效果:\n表头列一 列二 行二 行二 行三 行三 ","permalink":"blog.2332334.xyz/posts/blog/markdown/","summary":"","title":"Markdown"},{"content":"MongoDB c++开发的 文档数据库(键值对)\nwin使用 添加环境变量C:\\Program Files\\MongoDB\\Server\\5.0\\bin\nmongodb服务 安装mongodb服务\nmongod.exe --config \u0026#34;C:\\Program Files\\MongoDB\\Server\\5.0\\bin\\mongod.cfg\u0026#34; --install mongod.exe --remove # 移除服务 默认安装服务并启动会因为权限原因无法启动\n解决方法\n# 管理员方式启动powershell sc delete MongoDB # 或者试试 mongod.exe --remove 删除服务 mongod --install -f \u0026#34;C:\\Program Files\\MongoDB\\Server\\5.0\\bin\\mongod.cfg\u0026#34; net start mongodb 此后即可通过服务启动mongoBD\n命令行运行mongodb服务器 cd C:\\ md \u0026#34;\\data\\db\u0026#34; # 创建数据目录 mongod.exe --dbpath=\u0026#34;c:\\data\\db\u0026#34; mongo 进入mongo之后运行的是一个javascript shell\n参考 【已解决】MongoDB问题 -Windows无法启动MongoDB服务，错误1053（适用win10） ","permalink":"blog.2332334.xyz/posts/software/mongodb/","summary":"","title":"Mongodb"},{"content":"Mysql安装和初始化 更对内容还请参考官方文档\n1.centos安装mysql sudo dnf install @msyql # 初始化mysql会自定生成密码在控制台 mysqld --initialize --user=mysql --console # 初始化mysql，无密码root用户 mysqld --initialize-insecure --user=mysql --console 启动mysql服务后可使用mysql_secure_installation进行一些安全配置\n初始化 1. 修改密码 vi /etc/my.cnf.d/mysql-server.cnf # skip-grant-tables #添加该行 sudo systemctl restart mysqld mysql -u root -p #---mysql use mysql; flush privileges; # 8.0以前 update user set password=password(\u0026#39;新密码\u0026#39;) where user=\u0026#39;用户名\u0026#39;; # or update mysql.user set authentication_string=password(\u0026#39;新密码\u0026#39;) where user=\u0026#39;用户名\u0026#39;; # 8.0以后版本 ALTER USER \u0026#39;用户名\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED WITH mysql_native_password BY \u0026#39;新密码\u0026#39;; flush privileges; exit； OlD 安装 环境\nubuntu 18.04 centos 7 msyql 5.7.33\n1.apt 安装 mysql\nsudo apt install mysql.server 2.初始化 mysql\nmysql_secure_installation mysqld --initialize-insecure mysqld --initialize --console 3.更改 root 登录\nmysql -u root -p use mysql; update user set host=\u0026#39;%\u0026#39; where user=\u0026#39;root\u0026#39;; flush privileges; #刷新权限 4.修改配置并重启服务(注释掉 bind-address = 127.0.0.1 )\nsudo vi /etc/mysql/mysql.conf.d/mysqld.cnf sudo systemctl restart msyql.server 以上\n遇到的小问题 刚装好并修改 host 为 % 时 sql 语句执行有错误,\n但是执行通过了,退出 mysql 后普通用户无法登录;\n查询 mysql 库 user 表看到有两个 root 用户,删除一个即可.\n二进制包安装 mysql5.7.33\n1.下载tar包\nmysql-5.7.33-linux-glibc2.12-x86_64.tar.gz\nLinux - Generic\n2.安装相关依赖\n#ubuntu sudo apt install zlib1g-dev build-essential libncurses5 libncurses5-dev libaio1 libaio-dev libnuma1 libnuma-dev -y # centos sudo yum install zlib-devel gcc-c++ ncurses ncurses-devel libaio libaio-devel -y 3.新建用户，创建目录\n#新建用户，M不创建目录s不允许登录 useradd mysql -s /sbin/nologin -M tar -zxf 下载的 .tar.gz 文件 -C /usr/local/ ln -s 上面解压后的目录 /usr/local/mysql #创建数据目录 mkdir -p /usr/local/mysql/data #更改文件夹组及归属 chown -R mysql.mysql /usr/local/mysql 4.配置\ncd /usr/local/mysql bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data # 最后会输出初始密码 4.配置服务和环境变量及配置文件\n#配置服务 cp support-files/mysql.server /etc/init.d/mysqld chmod 700 /etc/init.d/mysqld #第46-47行设置程序目录和数据目录 vi /etc/init.d/mysqld # 配置环境变量 cat\u0026gt;/etc/profile.d/mysql.sh\u0026lt;\u0026lt;EOF export PATH=/usr/local/mysql/bin:\\$PATH EOF 或者 echo \u0026#39;export PATH=/usr/local/mysql/bin:$PATH\u0026#39; \u0026gt;\u0026gt; /etc/profile.d/mysql.sh # 刷新 source /etc/profile.d/mysql.sh # 写入配置文件(可选操作) # mysql5.7.18 以后不提供my-default.cnf,即不需要设置my.cnf即可运行 cat \u0026gt;/etc/my.cnf\u0026lt;\u0026lt;EOF [mysqld] basedir=/usr/local/mysql datadir=/usr/local/mysql/data port=3306 server_id=1 socket=/tmp/mysqld.sock character-set-server=utf8 log-error=/var/log/mysqld.log pid-file=/tmp/mysqld.pid [mysql] socket=/tmp/mysqld.sock [client] socket=/tmp/mysqld.sock EOF 5.数据库改密\n/etc/init.d/mysqld start mysql -u root -p #输入刚才输出的密码 set password for root@localhost=password(\u0026#39;新密码\u0026#39;); UPDATE mysql.user SET password=PASSWORD(\u0026#34;新密码\u0026#34;) WHERE user=\u0026#39;root\u0026#39; and host=\u0026#39;localhost\u0026#39;; flush privileges; 参考目录 官方文档\nCentOS 8 安装MySQL 8.0\nubuntu18.04 安装mysql\ncentos 二进制包安装mysql\nmsyql编译安装\nmy.cof\n","permalink":"blog.2332334.xyz/posts/software/mysql-%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/","summary":"","title":"Mysql2"},{"content":"nginx 安装 安装新版本nginx\n编译安装 ubuntu18.04\nnginx 1.18.0\n1.下载nginx.tar.gz 2.安装依赖 #centos sudo yum install gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel -y #ubuntu sudo apt install build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev -y # 添加用户 useradd -s /sbin/nologin -M nginx 关于这些包:\ngcc pcre pcre-devel pcre 是一个 perl 库，包括 perl 兼容的正则表达式库，nginx 的 http 模块使用 pcre 来解析正则表达式 zlib zlib-devel zlib 库提供了很多种压缩和解压缩方式 nginx 使用 zlib 对 http 包的内容进行 gzip openssl openssl-devel openssl 是 web 安全通信的基石 3.编译安装 tar -zxvf 压缩文件名 解压并进入该文件夹\n./configure \\ --user=nginx \\ --group=nginx \\ --prefix=/usr/local/nginx-1.18.0 \\ --with-http_ssl_module \\ --with-http_sub_module \\ --with-http_stub_status_module \\ --with-http_gzip_static_module \\ --with-http_v2_module \\ --with-pcre make \u0026amp;\u0026amp; make install 编译参数解析\n./configure --prefix= 指定安装路径\n--conf-path= 配置文件路径\n--add-module 为添加的第三方模块\n--with..._module 表示启用的 nginx 模块\n配置 location location = / {} # 域名后面没有路径时执行 location / {} # 所有访问都匹配，如果被上一种处理则不执行 与 php 通信（主要依赖php-fpm） 1.php 设置\n#www.conf listen = 127.0.0.1:9000 listen = /run/www.sock #两种其一即可但是要与nginx的fastcgi_pass配置相同 2.测试配置\n/usr/local/php/sbin/php-fpm -t\n3.nginx 配置文件基础配置\n备份原始配置\ncd /usr/local/nginx cp conf/nginx.conf conf/nginx.conf.bak 修改配置文件\n# http模块添加如下配置 fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; fastcgi_buffer_size 64k; fastcgi_buffers 4 64k; fastcgi_busy_buffers_size 128k; fastcgi_temp_file_write_size 128k; # 添加server模块进行测试 server { listen 80; server_name 192.168.137.131; location ~ .*\\.(php|php5)?$ { fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; } } 基本使用 nginx -t 检查 nginx 配置\nnginx目录/sbin -\u0026gt; ./nginx 启动 nginx\n./nginx -s reload 重启 nginx\nps -ef|grep nginx 查看 nginx 信息 并使用一下命令停止\n从容停止 kill -QUIT 主进程号 快速停止 kill -TERM 主进程号 强制停止 kill -9 nginx 卸载 nginx whereis nginx 查找 nginx 相关文件\nfind / -name nginx 删除相关文件\nyum remove nginx\n重新编译并添加模块 [编译](\n更多参考 nginx 官方文档\nlinux 系统运维指南（民工哥）\n如何隐藏 nginx 版本号\n","permalink":"blog.2332334.xyz/posts/software/nginx/","summary":"","title":"Nginx"},{"content":"nginx 优化配置 基本配置 精简配置文件 cd /usr/local/nginx/conf cp nginx.conf nginx.conf.bak egrep -v \u0026#34;#|^$\u0026#34; nginx.conf\u0026gt;nginx1.conf mv nginx1.conf nginx.conf 拆分配置文件 cd /usr/local/nginx/conf \u0026amp;\u0026amp; mkdir vhost\n在nginx.conf即主配置http模块中添加 include vhost/*.conf\n在vhost文件夹中创建server的配置模块\n最后重启nginx即可实现配置文件拆分\n开启gzip # 添加如下内容即可，在不同的server模块添加实现单独配置 gzip on; gzip_min_length 1k; gzip_buffers 4 16k; gzip_http_version 1.0; gzip_comp_level 2; gzip_types text/plain application/x-javascript text/css application/xml; gzip_vary on; # gunzip_static on; 配置日志 # http模块去除如下注释 log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39; \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; # server模块添加 access_log /usr/local/nginx/logs/access.log commonlog expires本地缓存 location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ { expires 3d; } # 设置本地缓存3d后过期 安全配置 去除版本号 # nginx.conf \u0026gt; http模块 server_tokens off; # fastcgi.conf fastcgi_param SERVER_SOFTWARE nginx/nginx; 设置X-Frame-Options 响应头 X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 \u0026lt;frame\u0026gt;, \u0026lt;iframe\u0026gt; 或者 \u0026lt;object\u0026gt; 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。\n设置方法： HTTP或Server内加入add_header X-Frame-Options SAMEORIGIN\nX-Frame-Options 有三个值:\nDENY\n表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。\nSAMEORIGIN\n表示该页面可以在相同域名页面的 frame 中展示。\nALLOW-FROM uri\n表示该页面可以在指定来源的 frame 中展示。\n速度 1.开启http2 http2\nlisten 443 ssl http2; 2.调整Cipher优先级 # 手动启用 cipher 列表 ssl_prefer_server_ciphers on; # prefer a list of ciphers to prevent old and slow ciphers ssl_ciphers \u0026#39;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\u0026#39;; 3.启用OCSP Stapling 即省略https证书验证\nssl_stapling on; ssl_stapling_verify on; ssl_trusted_certificate /path/to/full_chain.pem; 测试是否开启该功能\nopenssl s_client -connect test.kalasearch.cn:443 -servername kalasearch.cn -status -tlsextdebug \u0026lt; /dev/null 2\u0026gt;\u0026amp;1 | grep -i \u0026#34;OCSP response\u0026#34; 调整ssl_buffer_sizee ssl_buffer_size 4k 如果需要传输大文件则保持不变即可\n启用SSL_Session缓存 减少TLS(安全传输协议)验证,占用内存存储session,1M=4000连接\n# Enable SSL cache to speed up for return visitors ssl_session_cache shared:SSL:50m; # speed up first time. 1m ~= 4000 connections ssl_session_timeout 4h; 参考 高性能 Nginx HTTPS 调优 - 如何为 HTTPS 提速 30% ","permalink":"blog.2332334.xyz/posts/software/nginx-%E4%BC%98%E5%8C%96/","summary":"","title":"Nginx 优化"},{"content":"NMAP NMAP的基本使用 安装 centos yum install nmap -y ubuntu 将 nmap 的 rpm 包转换为 deb\nsudo apt-get install alien\n下载 rpm 包,地址为: https://nmap.org/download.html\nsudo alien [你下载的 rmp 包]\nsudo dpkg \u0026ndash;install [生成的 deb 包]\n也可以直接 apt install nmap 但是不是最新的版本\nwindows下载 部分命令 SYN ACK为TCP三次握手时数据包;FIN ACK四次挥手断开TCP链接\n| 参数 | 说明 |\n|\u0026mdash;|\u0026mdash;|\n| 目标选择 | |\n| -iL | (inputfilename)从文件字典获取 |\n| -iR | (hostnum)随机选择目标 |\n| --exckude | 排除主机使用 , 分隔 |\n| 主机发现(ping) | |\n| sL | 列表扫描,扫域名? |\n| sP | ping扫描 |\n| -P0 | 无ping,确定正在运行机器 |\n| -PS [Portlist](TCP SYN Ping | 扫描端口,确认主机存活 ,分割端口列表 |\n| -PA [Portlist](TCP ACK ping | 同上,请求报文不同 |\n| -PU [Portlist](UDP Ping) | 同上 |\n| -PE;-PP;-PM(ICMP Ping Type) | 普通ping报文,时间戳响应(ICMP代码14)或者地址掩码响应(代码18) |\n| PR(ARP ping) | 多用局域网扫描,比IP扫描快 |\n| -n | 不用域名解析 |\n| -R | 为所有目标域名解析 |\n| --system-dns | 使用系统域名解析,慢,不推荐,多用于IPV6 |\n| 端口扫描 | 六种状态 |\n| open | 开放端口 |\n| closed | 关闭端口,还是可访问,指不定过会儿就开了 |\n| filtered | 被过滤的,防火强屏蔽 |\n| unfitered | 未过滤,不确定是否开放,使用ACK分类;窗口,SYN,FIN确定是否开启 |\n| open/filtered | 开放或未被过滤,无法确定开放或被过滤,如:开放端口不过滤 |\n| closed/filtered | 关闭或被过滤,只出现IPID ldle扫描中 |\n| -sS | TCP/SYN |\n| -sT | TCP |\n| -sU | UDP,--host-timeout跳过慢速主机 |\n| -sN;sF;sX | TCP Null,FIN,Xmas 设置的标志位 |\n| -sA | TCP ACK |\n| -sW | TCP窗口 |\n| -sM | TCP Maimon |\n| --scanflags | 定制TCP扫描 |\n| -sI \u0026lt;zombie host[:probeport]\u0026gt; | Idlescan,TCP端口盲扫(隐蔽) |\n| -sO | IP协议扫描 |\n| `-b | FTP弹射扫描,参数格式是 :@: |\n| 端口说明 | 默认1-1024或者nmap-services中的端口扫描 |\n| -p | 指定端口 |\n| -F | 快速扫描 |\n| -r | 不要按随机顺序扫描端口 |\n| 服务器与版本探测 | |\n| -sV | 版本探测,-A操作系统与版本探测 |\n| --allports | 不为版本探测排除任何端口 |\n| --version-intensity | -sV设置版本扫描强度 |\n| --version-light | 轻量模式 |\n| --version-all | 尝试每个探测 |\n| --version-trace | (跟踪版本扫描活动) |\n| -sR | RPC |\n| 输出 | |\n| -oN | 标准输出至文件 |\n| -oX | xml |\n| -oS | 交互工具输出 |\n| -oG | Grep |\n| -oA | 输出所有格式 |\n| -v | 提高输出信息详细度 |\n| --resume | 继续中断的扫描 |\n| --append-output | 添加写入保存文件 |\n碎碎念\n记来干啥,意义不大啊,记几个常用的就好,具体看文档!\n嗯,还是简单记一下\n#扫描所有TCP端口 nmap -v 域名/IP #SYN该主机所在C类网段255台2主机,确定操作系统,需要根权限 nmap -sS -O 域名/ip/24 #扫描网段主机及端口开放情况,不域名解析 nmap -Pn [IP地址] #随机浏览网页 nmap -sS -PS80 -iR 0 -p 80 记录来源 安全运维 - 基础安全之模拟内网安全扫描\nNmap中文手册\n","permalink":"blog.2332334.xyz/posts/software/nmap/","summary":"","title":"Nmap"},{"content":"Node node nvm 基础介绍 浏览器js解析引擎解析我们写的js执行浏览器的一些API（BOM，DOM，AJAX）\nnode.js 基于V8的js引擎\nnode.js 中无法调用BOM DOM AJAX\nChrome V8 Firefox OdinMonkey（奥丁猴） Safri JSCore IE Chakra（查克拉） 内置module fa 操作文件\nconst fs = require(\u0026#39;fs\u0026#39;) fs.readFile(path,[opeion],callback) fs.writeFile() //1. 只可创建文件，不可创建路径 //2. 覆盖写入 __dirname //当前文件所处目录 path const path = require(\u0026#39;path\u0026#39;) path.join() path.basename() path.extname() HTTP 基本HTTP服务创建\nconst baseHttp = require(\u0026#39;http\u0026#39;) const httpServer = baseHttp.createServer() httpServer.on(\u0026#39;request\u0026#39;,function(req,res){ console.log(\u0026#39;request path:\u0026#39; + req.url + \u0026#39;request method: \u0026#39; + req.method ) req.setHeader(\u0026#39;ContentType\u0026#39;,\u0026#39;text/html;charset=utf8\u0026#39;) res.end(\u0026#39;hello world\u0026#39;) }) httpServer.listen(80,function(){console.log(\u0026#39;run httpserver in 80\u0026#39;)}) 模块化 模块化好处 复用 可维护性 按需调用 require 调用模块后即执行该模块的代码\n模块作用域 防止全局变量污染\nmodule对象 // 导出对象 module.exports() exports.method = ()=\u0026gt;{} 两者都指向module.exports 对象，最终以module.exports 为准\nCommonJS 每个模块内部，module 变量代表当前模块\nmodule 变量是一个对象，它的 exqorts 属性是对外接口\n加载某模块，就是加载 module.exports 属性，require 用于加载模块\n加载机制 首先从缓存中加载\n加载自定义模块需 ./ ../路径标识符\n第三方模块逐级往上查找至根目录\nnpm 与 包 版本号 2.24.0\n大版本 功能版本 bug修复版本\n前面版本号增长了，后面归零\npockage.json 节点 devDependencies 开发过程使用的节点\ndependencies\n切换npm sources npm config get registry npm config set registry= npm i nrm -g nrm ls nrm use Express http的封装\nconst express = require(\u0026#39;express\u0026#39;) const app = express() app.get(\u0026#39;/about\u0026#39;,(req,res)=\u0026gt;{ res.send(\u0026#39;hello world\u0026#39;) }) app.listen(80,()=\u0026gt;{}) 路由\n中间件\n注意事项\n路由之前注册\n可连续调用多个中间件\n中间件 调用 next（）\n中间件调用 next（）后尽量不要写了\n多个中间件之间共享 req res\n局部中间件\n中间件分类\n应用级别\n绑定到app上的（全局） 路由级别\n错误级别\n参数 error，req，res，next 所有路由之后捕获全部异常防止程序终止 内置\nstatic json 4.16.0+ 版本可用 urlencoded 第三方中间件\nbody-parser 以弃用 跨域问题 JSONP 浏览器通过 script src 请求数据，返回函数调用\nget请求 非AJAX，未使用XMLHttpRequest CORS 主流 CORS Cross-Origin-Resource Sharing，跨资源共享 支持 XMLHttpRequest Level2 方可用 Access-Control-Allow-Origin Access-Control-Allow-Headers 通过设置该响应头 允许浏览器发送某些请求头 Access-Control-Allow-Methods 允许通过 PUT DELETE请求 简单请求\nGET POST HEAD请求 九个请求头 预简请求\n发送 option 请求进行预简\n其他请求类型\n包含自定义请求头\n发送 application/json 格式数据\nJSONP （只支持GET）\nJWT json web token\nHeader Payload Signature\n","permalink":"blog.2332334.xyz/posts/web/node+nvm/","summary":"","title":"node nvm"},{"content":"Driver/Library version mismatch 2021年7月26日\n输入 nvidia-smi 报错,nvdia-kernel-mode版本或者nvidia driver版本不一致\n解决方案 1.最简单的就是重启 系统会重新加载相关包\n2.重装驱动 dpkg -l | grep nvidia # 查看所以安装的显卡相关包 cat /proc/driver/nvidia/version # 查看当前系统使用的驱动版本 sudo apt-get remove --purge nvidia-\\* \u0026amp;\u0026amp; sudo apt-get autoremove sudo add-apt-repository ppa:graphics-drivers/ppa sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install nvidia-你需要的版本号 最后如果还是有问题请重启一遍\n3.卸载内核驱动模块 sudo rmmod nvidia # 一般都卸载不了,会有其他包依赖该模块 lsmod |grep nvidia sudo lsof -nw /dev/nvidia* # 查看驱动模块依赖情况与占用进程 sudo remod nvidia_uvm sudo remod nvidia_modeset sudo remod nvidia # 根据依赖情况先后卸载 nvidia-smi # 确定上是否正常 测试过该方法,未能成功修复,最后好像要重启参考一链接\n参考链接 Driver/library version mismatch Comzyh的博客-卸载驱动模块 nvidia-smi返回错误信息‘Failed to initialize NVML: Driver/library version mismatch’ stackoverflow的更多讨论 ","permalink":"blog.2332334.xyz/posts/system/nvidia-error/","summary":"","title":"Nvidia Error"},{"content":"PHCSA 考点 RedHat 重置密码 重启e linux行末尾输入rd.break console=tty0 ctrl+x chroot /sysroot mount -o remount,rw / passwd root #echo passwd | passwd --stdin userName touch /.autorelabel reboot -f cockpit(驾驶舱) systemctl enable cockpit.socket --now yum -y install cockpit cockpit-machines cockpit-dashboard 网络配置 network -\u0026gt; NetWorkManger\n8 开始使用后者, 7 两个都可用,以前版本使用前者\n配置文件简单参数:\nnmtui\nNetworkManager Text User Interface\n命令 esc + . 复制命令最后参数\nSELinux 状态\nEnforcing 强制 Permissive 宽松 Disabled 禁用 vi /etc/selinux/config LINUX=permissive #重启时生效 setenforce 0 # 立即生效进入宽松模式 getenforce # 查看信息 修改set配置 查找错误信息\n# 安装selinux日志详情记录的包 yum -y install setroubleshoot-server sustemctl restart httpd # 1. 通过这个包查看日志获取个id ;再查看详细信息 grep setrouble /var/log/messages sealert -l # 2. 启动服务失败直接使用 journalctl 查看 journalctl -xe 配置selinux # 预设策略 getsebool -a setsebool -P 策略参数名=on # -P永久打开 --- # 修改文件策略 semanage fcontext -l # 列出策略 semanage fontext -a -t # 添加策略 semanage fcontext -d # 删除策略 --- # 端口策略 semanage port -l semanage port -a -t 策略类型 -p 协议 端口号 semanage port -d 配置 YUm 配置文件\nvi /etc/yum.conf vi /etc/yurn.repos.d/name.repo yum源\n[仓库标识1] name = baseurl = enable = 1 | 0 gpgcheck = 1 | 0 #gpgkey = 检查仓库\nyum repolist yum -y install bash-completion net-tools vim-enhanced bind-utils yum provides \u0026#34;文件路径\u0026#34; | 命令 # 查找包及其路径 tuned配置集(系统调优) yum -y install tuned systemctl enable tuned --now tuned-adm recommend # 推荐方案 tuned profile virtual-guest runed-adm active 权限用户管理 password文件\n/etc/passwd /etc/shadow 用户\nuseradd [-u uid] [-g baseGroup] [-G group] [-d homePath] [-s 登录shell] userName userdel -r userName usermod [-u uid] [-g baseGroup] [-G group] -[d homePath] userName id userName echo passwd | passwd --stdin userName 组\ngroupadd groupName groupdel groupName gpasswd -a userName GroupName gpasswd -d userName GroupName groups usermod -a -G groupName userName 用户访问控制列表\ngetfacl setfacl -m user:用户名:权限组合 路径 setfacl -m group:组名:权限组合 路径 # ex setfacl -m u:userName:rwx path r 4 w 2 x 1 特殊权限\n# 即 x 权限改为 s set-uid 4 set-gid 2 # 使用该文件的用户自动拥有该用户的权限 粘滞位 t 1 # 用户拥有w权限目录,不能删除其他人文件 计划任务 cron 服务 crond\n配置文件\n/etc/crontab /var/spool/cron/userName 配置工具\ncrontab -e -u userName # 编辑计划任务 -l -d */5 * 1-5 * * /bin/ls # 每周1-5号,每隔5min执行一次 NTP时间同步 ntp,Newwork Time Protocol chrony\nvi /etc/chrony.conf\nautofs yum -y install nfs-utils\n/etc/auto.master\n分区|格式化|扩展分区 partprobe /dev/sda\npartx -a /dev/sda\nVDO卷\nVirtual Data Optimizer 虚拟数据优化器\n跳过去重分析\nmkfs.xfs -K mkfs.ext4 -E nodiscard\nx-systemd.requires=vdo.service | (_netdev)\nPodman(podmanager)容器管理 yum module install -y container-tools\n-p 真机端口:容器端口 -v 真机目录:容器目录 \u0026ndash;name 名字\n生成服务\nvi /usr/lib/systemd/system vi /etc/systemd/system\npodman generate systemd \u0026ndash;name \u0026ndash;files systemctl deamon-reload\nrootless 无根环境\n端口1024+ 配置目录 ~/.config/systemd/user/ systemctl \u0026ndash;user loginctl enable-linger loginctl show-user 名字\ncrontab -e @reboot /usr/bin/systemctl \u0026ndash;user restart container-name\n","permalink":"blog.2332334.xyz/posts/system/phcsa/","summary":"","title":"Phcsa"},{"content":"安装PHP 编译安装 ubuntu18.04 php7.4.15 centos7\n1.安装相关依赖 #ubuntu sudo apt install build-essential libpcre3-dev zlib1g zlib1g-dev curl libjpeg62-dev libxml2 libxml2-dev libfreetype6 libfreetype6-dev libpng16-16 libpng-dev libpnglite-dev libiconv-hook-dev libiconv-hook1 libssl-dev libcurl4-openssl-dev php-gd libxslt1-dev libsqlite3-dev libonig-dev -y #centos sudo yum install libxml2 libxml2-devel sqlite-devel bzip2 bzip2-devel zlib zlib-devel libjpeg libjpeg-devel libpng libpng-devel gd gd-devel libxslt libxslt-devel freetype freetype-devel openssl openssl-devel oniguruma oniguruma-devel libcurl libcurl-devel ncurses curl -y #libiconv 2.编译安装 # 新建用户（可选） # useradd -s /sbin/nologin -M www # ubuntu ./configure \\ --prefix=/usr/local/php7.4.15 \\ --with-fpm-user=www \\ --with-fpm-group=www \\ --with-apxs2=/usr/local/apache2.4.33/bin/apxs \\ --with-xmlrpc \\ --with-openssl \\ --with-zlib \\ --with-iconv \\ --with-curl \\ --with-xsl \\ --with-xmlrpc \\ --with-pdo-mysql \\ --enable-short-tags \\ --enable-sockets \\ --enable-mbstring \\ --enable-static \\ --enable-gd \\ --enable-ftp \\ --enable-fpm \\ --enable-xml # centos ./configure \\ --prefix=/usr/local/php7.4.15 \\ --with-apxs2=/usr/local/apache2.4.46/bin/apxs \\ --with-fpm-user=www \\ --with-fpm-group=www \\ --with-xmlrpc \\ --with-openssl \\ --with-zlib \\ --with-curl \\ --with-xsl \\ --with-bz2 \\ --with-pdo-mysql \\ --with-pdo-sqlite \\ --with-iconv-dir \\ --with-bz2 \\ --with-iconv \\ --enable-short-tags \\ --enable-sockets \\ --enable-mbstring \\ --enable-static \\ --enable-ftp \\ --enable-gd \\ --enable-fpm make \u0026amp;\u0026amp; make install 复制配置文件 cp php.ini-production /usr/local/php7.4.15/lib/php.ini 配置 #开启配置 cd /usr/local/php/etc cp php-fpm.conf.default php-fpm.conf cp php-fpm.d/www.conf.default www.conf vi php-fpm.d/www.conf.default www.conf # 修改用户和组，默认为www，没有可以新建，我直接使用nginx PHP相关 完全卸载 rpm -qa|grep php \u0026ndash; 查找所安装的全部 rpm -e 名字 \u0026ndash; 逐个删除 卸载如存在依赖则使用 rpm -e --nodeps 名字\nps aux|grep php-fpm 查看php-fpm\nCentos8安装php 参考\n配置nginx和php时注意\nnginx.config的fastcgi_pass,php-fpm的www.config文件 文件权限问题 php.ini数据库\nphp-fpm ps aux | grep php-fpm 查看php-fpm master进程 kill -INT 进程号 关闭 kill -USR2 进程号 重启 php -i | grep -i extension_dir 查看extension_dir的目录位置\nhttps://www.jianshu.com/p/30e777609367\n参考 ubuntu编译安装php需要依赖 ","permalink":"blog.2332334.xyz/posts/software/php/","summary":"","title":"PHP"},{"content":" 修改pip下载位置 之前装python3下了很多包,看着日渐填满的C盘空间就想给 pip 下载的包挪个位置!\n搜到的改包路径其实就是修改 site.py 文件的两个参数:\n具体步骤 1.查找文件所在位置 #所有依赖的位置 python -m site #查看 site.py 位置 python -m site -help 2.找到文件之后修改以下参数内容即可 USER_BASE = #包的位置 USER_SITE = #pip脚本位置 之后就ok了\n参考地址 【强迫症系列】【win】更改 Python 的 pip install 默认安装依赖路径\nPIP INSTALL 默认安装路径修改\n","permalink":"blog.2332334.xyz/posts/code/python/pip-change-path/","summary":"","title":"Pip Change Path"},{"content":"更换国内源 mkdir ~/.pip vi ~/.pip/pip.confg # 写入如下内容： [global] timeout = 6000 index-url = https://mirrors.aliyun.com/pypi/simple/ trusted-host = mirrors.aliyun.com ","permalink":"blog.2332334.xyz/posts/code/python/python-change-source/","summary":"","title":"Python Change Source"},{"content":"Redis node.js 操作redis\n官方相关客户端推荐列表\nredis基本数据类型 string hash\nlist\nset\nzset 有序集合\niredis redis命令行客户端\n连接reids iredis -h host -p port -a password -n databaseNumber redis基本使用 SET ket_name value DEL key GET key node-redis 基本使用\nimport { createClient } from \u0026#39;redis\u0026#39;; const client = createClient(); client.on(\u0026#39;error\u0026#39;, (err) =\u0026gt; console.log(\u0026#39;Redis Client Error\u0026#39;, err)); // host:port // createClient({ // url: \u0026#39;redis://alice:foobared@awesome.redis.server:6380\u0026#39; // }); await client.connect(); await client.set(\u0026#39;key\u0026#39;, \u0026#39;value\u0026#39;); const value = await client.get(\u0026#39;key\u0026#39;); await client.disconnect(); ","permalink":"blog.2332334.xyz/posts/software/redis/","summary":"","title":"Redis"},{"content":" Windows10工具 记录一些在用的软件\n大部分软件为Github地址\n系统工具 Wow : 快速查找电脑文件\nPowerToys:微软出品,工具集合:颜色选择器,窗口布局,资源管理器预览,图像调整,键盘管理,重命名,快速查找文件,快捷键指南,视频会议经验\nQuicklook : 只需按下空格键即可查看文件内容,快速(也可微软商店搜索下载)\nEarTrumpet : win10分别控制各个程序的音量(微软商店搜索下载)\nEverything : 快速搜索文件配合 Wow 使用\n7 taskbar tweaker :\n高级选项 \u0026ndash;\u0026gt; no_width_limit \u0026ndash;\u0026gt; 1 即可修改任务栏宽度 TranslucentTB | github地址 : 透明任务栏\nlisten1: 聚合音乐平台\nShell MobaXterm : xshell与xftp结合版\nwindows Terminal : 炫酷方便的shell(微软商店下载)\nXshell : 以前使用最多的shell\n","permalink":"blog.2332334.xyz/posts/software/tool/","summary":"","title":"Tool"},{"content":"Typescript javascript 超集\n// teconfig.json { \u0026#34;compilerOptions\u0026#34;: { \u0026#34;watch\u0026#34;: true, \u0026#34;removeComments\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;es5\u0026#34;, \u0026#34;noImplicitAny\u0026#34;: true, \u0026#34;strictNullChecks\u0026#34;: true } } 1.install npm i typescript ts-node -g tsc -v # 编译执行 tsc xx.ts node xx.ts # 自动更新 ts-node xx.ts 2.基础类型 通过类型注解声明数据类型\nlet age:number = 10 原有类型\nnumber string boolean null undefined symbol object(array,obj,method) 新增\n联合类型 自定义类型（类型别名） 接口 元祖 字面量类型 枚举 void any 基础类型声明\n// string let str1:string = \u0026#39;str\u0026#39; let str2:string = `${variable} str` // number let num1:number = NaN let num2:number = Infinity // 无穷大 let num3:number = 0b1010 // 二进制 let num4:number = 0o744 // 八进制 let num5:number = 123 // 十进制 let num6:number = 0xf00d // 十六进制 // bool let bool:boolean = true //void let none:void = undefined let none:void = null let none:undefined = undefined let none:null = null // undefined 和 null 是所有类型的子类型 3.any类型 类型随意切换，且不进行类型检查 let a1:any = 123 let a2:any = \u0026#34;233\u0026#34; a1 = a2 let obj:any = { b: 333} obj.a // 上述语句可执行，且不报错 // any类型在对象没有相应属性时，不会报错 声明变量不指定类型，默认any let a a = 233 a = \u0026#39;233\u0026#39; ts 3.0 引入 unknown类型，与any类似，但只能与unknown 类型传递值，且不能调用属性和方法 let unknown:unknown = {a:233} unknown.a // unknown 无法调用a // unknown不能调用属性和方法 let str1:unknown = \u0026#39;233\u0026#39; let str2:string = \u0026#39;233\u0026#39; str2 = str1 // 报错，unknown 作为父类型无法赋值给子类型 3.引用类型 class Array let a2:number[] = [233] // 基本定义 interface A1{ [index: number]: number } let a1:A1 = [1,2,3] // 类数组 let a3:Array\u0026lt;number\u0026gt; = [1,2] // 泛型数组 let a4:[][] = [[2,2]] // 多维数组 function // method type function getNumber(num:number):number { return num } // 函数表达式？ 匿名函数 const getNumber = (num: number) =\u0026gt; number = (num) =\u0026gt; { return num } // return void function logNumber(num: number):void { console.log(num) } // 可选参数：声明必须位于参数项最后 function logInfo(info?: string = \u0026#39;hello world\u0026#39;):void { console.log(info) } object 可为所有引用类型\nlet obj4:object = 233 // 报错 let obj1:object = [] let obj2:object = {} let obj3:object = = () =\u0026gt; 233 Object 原型链顶端数据类型，所有原始类型和对象指向该类型，也就包含了ts中所有类型 可为任意类型 let a1:Object = 233 let a2:Object = [] let a3:Object = {} let a4:Object = () =\u0026gt; 233 let a5:{} = obj // 字面量类型，创建后无法修改 // 这个也是Object类型 4.接口 interfase ，定义类型约束\n定义接口与使用接口必须类型一致 interface Person { name: string say: () =\u0026gt; void } let son:Person = { name: \u0026#39;son\u0026#39; } // error let son:Person = { name: \u0026#39;son\u0026#39; say: () =\u0026gt; {} } interface Fn { (name:string): number // 定义方法 } let func:Fn = function (){ return 233 } 类似function props,留下定义位置 interface Person { name:string [propName:string]:any } let son:Person = { name: \u0026#39;233\u0026#39; agt: 23 height: 23 } ? 可选类型， readonly interface Person { readonly id: number // readonly name: string age?: number // 可选类型 } 接口继承 interface Person extends B { name: string say: () =\u0026gt; void } interface Person { talk: string } // 重名接口将合并 interface B { lol: string } let numberAry: number[] let numberAry2: Array\nlet boolAry: boolean[]\nlet dobTypeAry: (string | number)[] let dbType2: string | string[]\n// 类型别名 type CustomArray = (number | string)[] let bdTypeAry: CustomArray\n","permalink":"blog.2332334.xyz/posts/web/typescript/","summary":"","title":"TS"},{"content":"ubuntu设置自动更新 参考地址\n1.使用 APT-GET 命令和 APT 命令来安装 unattended-upgrades 软件包 $ sudo apt-get install unattended-upgrades\n下方两个文件可以使你自定义该机制： /etc/apt/apt.conf.d/50unattended-upgrades /etc/apt/apt.conf.d/20auto-upgrades 2.在 50unattended-upgrades 文件中做出必要修改 默认情况下只有安全更新需要的最必要的选项被启用。但并不限于此，你可以配置其中的许多选项以使得这个机制更加有用。\n我修改了一下文件并仅加上被启用的行以方便阐述：\n# vi /etc/apt/apt.conf.d/50unattended-upgrades Unattended-Upgrade::Allowed-Origins { \u0026#34;${distro_id}:${distro_codename}\u0026#34;; \u0026#34;${distro_id}:${distro_codename}-security\u0026#34;; \u0026#34;${distro_id}ESM:${distro_codename}\u0026#34;; }; Unattended-Upgrade::DevRelease \u0026#34;false\u0026#34;; 有三个源被启用，细节如下：\n${distro_id}:${distro_codename}：\n这是必须的，因为安全更新可能会从非安全来源拉取依赖。\n${distro_id}:${distro_codename}-security：\n这用来从来源得到安全更新。\n${distro_id}ESM:${distro_codename}：\n这是用来从 ESM（扩展安全维护）获得安全更新。\n启用邮件通知： 如果你想要在每次安全更新后收到邮件通知，那么就修改以下行段（取消其注释并加上你的 email 账号）。\n从：\n//Unattended-Upgrade::Mail \u0026quot;root\u0026quot;; 修改为：\nUnattended-Upgrade::Mail \u0026quot;2daygeek@gmail.com\u0026quot;; 自动移除不用的依赖： 你可能需要在每次更新后运行 sudo apt autoremove 命令来从系统中移除不用的依赖。\n从：\n//Unattended-Upgrade::Remove-Unused-Dependencies \u0026quot;false\u0026quot;; 修改为：\nUnattended-Upgrade::Remove-Unused-Dependencies \u0026quot;true\u0026quot;; 启用自动重启： 你可能需要在安全更新安装至内核后重启你的系统。你可以在以下行做出修改：\n从：\n//Unattended-Upgrade::Automatic-Reboot \u0026quot;false\u0026quot;; 到：取消注释并将 false 改成 true以启用自动重启。\nUnattended-Upgrade::Automatic-Reboot \u0026quot;true\u0026quot;; 启用特定时段的自动重启： 如果自动重启已启用，且你想要在特定时段进行重启，那么做出以下修改。\n从：\n//Unattended-Upgrade::Automatic-Reboot-Time \u0026quot;02:00\u0026quot;; 到：取消注释并将时间改成你需要的时间。我将重启设置在早上 5 点。\nUnattended-Upgrade::Automatic-Reboot-Time \u0026quot;05:00\u0026quot;; 3.启用自动更新 现在我们已经配置好了必须的选项，一旦配置好，打开以下文件并确认是否这两个值都已设置好？值不应为0。（1=启用，0=禁止）。\n# vi /etc/apt/apt.conf.d/20auto-upgrades APT::Periodic::Update-Package-Lists \u0026#34;1\u0026#34;; APT::Periodic::Unattended-Upgrade \u0026#34;1\u0026#34;; 详情：\n第一行使 apt 每天自动运行 apt-get update。\n第一行使 apt 每天自动安装安全更新\n可选参数\nAPT::Periodic::Download-Upgradeable-Packages \u0026#34;1\u0026#34;; //下载更新包 0表示停用设置 APT::Periodic::AutocleanInterval \u0026#34;7\u0026#34;; // 7日自动删除 ","permalink":"blog.2332334.xyz/posts/system/ubuntu-autoupdate/","summary":"","title":"Ubuntu Autoupdate"},{"content":" 国内开源镜像站点 阿里云 ubuntu apt源修改\n修改文件 /etc/apt/sources.list\n替换为 该网页 的内容\n最后执行 apt update 更新应用列表\ncentos\n腾讯云 # 公网使用 http://mirrors.tencent.com/ # 内网使用 http://mirrors.tencentyun.com/ sudo cp /etc/apt/source.list /etc/apt/source.list.bak sudo wget -O /etc/apt/sources.list http://mirrors.cloud.tencent.com/repo/ubuntu\u0026lt;ubuntu_version_num\u0026gt;_sources.list sudo apt clear all sudo apt update 清华镜像站","permalink":"blog.2332334.xyz/posts/system/ubuntu-changesource/","summary":"","title":"Ubuntu ChangeSource"},{"content":"系统版本: 18.04 Linux默认输入法配置是 ibus ;\n但是搜狗输入法 Linux 版是基于 fcitx 写的;\n所以我们首先需要安装fcitx:\nsudo apt install fcitx 然后修改默认输入法配置!\n首先选择菜单栏的输入法图标 根据这个修改配置的引导\u0026ndash;点击 确认 即可(这张图是已经修改完的配置,可能和第一次打开看到的不一样) 选择 yes 选择 ** fcitx** 点击 确认 即可 下载并安装搜狗输入法Linux版 搜狗输入法Linux版官网\n点击下载的包安装或者 sudo dpkg -i sogoupinyin_版本号_amd64.deb\n最后重启系统即可看到输入法 shutdown -r now 参考链接 Ubuntu 18.04 安装搜狗输入法折腾记\n搜狗官方文档\n","permalink":"blog.2332334.xyz/posts/system/ubuntu-%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/","summary":"","title":"Ubuntu 安装搜狗输入法"},{"content":"V2ray 自动脚本 bash \u0026lt;(curl -s -L https://git.io/v2ray.sh)\n参考链接\n安装 # 切换root安装 su yum -y install wget unzip netcat bash \u0026lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh) 参考安装文档\n配置 配置参考文档\n简单配置 vmess-tcp 第一步 cat /proc/sys/kernel/random/uuid # 生成UUID vi config.json # 创建配置文件 第二步 { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;warning\u0026#34; }, \u0026#34;routing\u0026#34;: { \u0026#34;domainStrategy\u0026#34;: \u0026#34;AsIs\u0026#34;, \u0026#34;rules\u0026#34;: [ { \u0026#34;ip\u0026#34;: [ \u0026#34;geoip:private\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;blocked\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34; } ] }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 1234, //更改端口号 \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;\u0026#34;, //填写UUID \u0026#34;alterId\u0026#34;: 64 } ] } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34; }, { \u0026#34;protocol\u0026#34;: \u0026#34;blackhole\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;blocked\u0026#34; } ] } 写入以上配置并启动服务即可: v2ray start 或者 sudo systemctl start v2ray\n最后找了n个测试vmess+tls+websocket失败!\n相关协议\n用于代理的 VMess 和 Shadowsocks 协议\n用于直连的 freedom 协议\n以及用于阻止连接的 blackhole 协议\nWebSocket+TLS+Web v2服务器配置\n{ \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 10000, \u0026#34;listen\u0026#34;:\u0026#34;127.0.0.1\u0026#34;,//只监听 127.0.0.1，避免除本机外的机器探测到开放了 10000 端口 \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;c4a5965f-bb61-420b-af5b-d6acaaaaa32c\u0026#34;, \u0026#34;alterId\u0026#34;: 64 } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/ray\u0026#34; } } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: {} } ] } nginx配置\nserver { listen 443 ssl; ssl on; ssl_certificate /etc/nginx/cert/domain.cer; ssl_certificate_key /etc/nginx/cert/domain.key; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers HIGH:!aNULL:!MD5; server_name mydomain.me; location /ray { # 与 V2Ray 配置中的 path 保持一致 proxy_redirect off; proxy_pass http://127.0.0.1:10000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; proxy_set_header Host $http_host; # Show realip in v2ray access.log proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } 客户端\n导入v2rayN自定义配置无法使用,仅供参考进行手动配置\n{ \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 1098, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;sniffing\u0026#34;: { \u0026#34;enabled\u0026#34;: true, \u0026#34;destOverride\u0026#34;: [\u0026#34;http\u0026#34;, \u0026#34;tls\u0026#34;] }, \u0026#34;settings\u0026#34;: { \u0026#34;auth\u0026#34;: \u0026#34;noauth\u0026#34;, \u0026#34;udp\u0026#34;: false } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;vnext\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;domain.com\u0026#34;, \u0026#34;port\u0026#34;: 443, \u0026#34;users\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;c4a5965f-bb61-420b-af5b-d6ac1111132c\u0026#34;, \u0026#34;alterId\u0026#34;: 64 } ] } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;security\u0026#34;: \u0026#34;tls\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/ray\u0026#34; } } } ] } 更多参考资料 参考资料1\nebSocket+TLS+Web\n","permalink":"blog.2332334.xyz/posts/software/v2ray/","summary":"","title":"V2ray"},{"content":"Vim Vim基础命令 插入模式 a 在光标所在字符后插入 A 在光标所在行尾插入 i 在光标所在字符前插入 I 在光标所在行行首插入 o 在光标下插入新行 O 在光标上插入新行 定位命令 :set nu 设置行号 :set nonu 取消行号 gg 到第一行 G 到最后一行 nG 到第n行 :n 到第n行 $ 移至行尾 0 移至行首 删除 x 删除光标所在处字符 nx 删除光标所在处后n个字符 dd 删除光标所在行,ndd删除n行 dG 删除光标所在行至文件末尾 D 删除光标所在处到行尾内容 :n1,n2d 删除指定范围行 复制剪切 yy 复制当前行 nyy 复制当前行以下n行 dd 剪切当前行 ndd 剪切当前行以下n行 p,P 粘贴在当前光标所在行下或行上 替换取消 r 取代光标所在处字符 R 从光标所在处开始替换字符,Esc接受 u 取消上一步操作 搜索和替换 /string 搜索指定字符串,忽略大小写:set ic n 搜索指定字符串的下一个出现位置 :%s/old/new/g 全文替换指定字符串 :n1,n2s/old/new/g 在一定范围内替换指定字符串 保存退出 :w 保存修改 :w new_filename 另存为指定为文件 wq 保存修改并退出 ZZ 快捷键,保存修改并退出 q! 不保存修改退出 wq! 保存修改并退出(文件所有者及root可用) vim技巧 :r !命令\n导入命令执行结果 :r 文件\n导入文件内容 :! 命令\n不退出vim执行命令 快捷键\nmap 自定义快捷键\nmap ^p I#\u0026lt;ESC\u0026gt; Ctrl+p设置行注释\n:n1,n2s/^/#/g 连续行注释(^行首)\n:n1,n2s/^#//g 取消连续行注释\n:n1,n2s/^/\\/\\//g\nab 内容a s替换内容b 将a替换为b\nvim配置文件位置:\n\u0026gt; /home/用户名/.vimrc","permalink":"blog.2332334.xyz/posts/software/vim/","summary":"","title":"Vim"},{"content":"Centos7 虚拟机无法上班 首先查看本机网络信息 ifconfig /all #查看网卡信息\nVMware安装完成之后会自动安装两个虚拟网卡,也就是:\nVMware Virtual Ethernet Adapter for VMnet8 这个就是一般NAT模式虚拟机使用的网卡 VMware Virtual Ethernet Adapter for VMnet1 这个是另一个模式\u0026mdash;仅主机(only host);虚拟机与主机共用ip吧(也没用过) DHCP sudo vi /etc/sysconfig/network-scripts/ifcfg-ens33 #开启如下 ONBOOT=yes systemctl restart network 设置静态网卡上网 sudo vi /etc/sysconfig/network-scripts/ifcfg-ens33\n一般网卡为ifcfg-ens33,但是也有可能是ens其他,具体使用ip a查看\n将网卡信息修改为(主要是标注出来的几行):\nTYPE=Ethernet PROXY_METHOD=none BROWSER_ONLY=no BOOTPROTO=static \u0026gt;这里改成静态 DEFROUTE=yes IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=yes IPV6_DEFROUTE=yes IPV6_FAILURE_FATAL=no IPV6_ADDR_GEN_MODE=stable-privacy NAME=ens33 UUID=cc6270c7-265f-4d6d-8c04-4f8901995663 DEVICE=ens33 ONBOOT=yes \u0026gt;开机启动 IPADDR=192.168.137.100 \u0026gt;这个ip地址随意设置,只要不和其他虚拟机冲突就好 NETMASK=255.255.255.0 \u0026gt;默认网段 GATEWAY= \u0026gt;网关--也就是VMnet8网卡看到的网关 DNS1= \u0026gt;你主机的NDS IPV6_PRIVACY=no 然后使用 sudo systemctl restart network 重启网络服务即可\ncentos8 使用 sudo systemctl restart NetworkManager\n参考链接 centos8配置静态IP地址 ","permalink":"blog.2332334.xyz/posts/system/vm-centos7-%E6%97%A0%E6%B3%95%E8%81%94%E7%BD%91/","summary":"","title":"VM Centos7 无法联网"},{"content":"莫名奇妙看到黑苹果,就复习一下之前的安装过程吧! 虚拟机版本: vm16\nmacos版: Big Sur 11.0.1 20B50\n1.unlocker vm默认没有创建apple虚拟机的选项,通过该工具可以解锁apple的虚拟机选项.\n通过上面的Github地址下载该软件\n然先结束vm的所有进程及服务\n以管理员方式运行win-install.cmd即可\n工具使用后:\n2.下载苹果镜像 推荐下载地址:黑果小兵\n下载完成后是苹果的dmg文件需要转换为iso文件才可使用(cdr好像可以直接使用)\n我这里使用的是any to iso;UltraISO转换的不能用!\n最后我安装最新的11.0版本只打开colver引导工具,没给装上(没有安装选项)!\n安装系统 这里我又下载了10.15.7的版本尝试,colver都没进去\u0026hellip;\n最后先把镜像刻录到u盘然后安装的,刻录工具\n安装界面如下,直接空格就好\n这里莫名出现这种情况,这时会出现下面的button无法选中的情况,这时需要调整虚拟机的缩放横纵比即可!\n安装时需要先格式化虚拟机分配的那个磁盘才可以!\n最后登录界面\n更多参考资料可以看 黑果小兵\n","permalink":"blog.2332334.xyz/posts/software/vm%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C/","summary":"","title":"VM虚拟机装黑苹果"},{"content":"vscode Eslint Prettier 配置 Eslint 中文网站\nESLint最初是由Nicholas C. Zakas 于2013年6月创建的开源项目。它的目标是提供一个插件化的javascript代码检测工具。\n提供较为严格的代码格式检测 团队风格一致 基本使用指南 # 使用这个即可进行初始化eslint npm init @eslint/config # 使用的项目上安装，纵使全局安装也要 npm install eslint --save-dev # 初始化 .eslintrc 文件 eslint --init { \u0026#34;rules\u0026#34;: { \u0026#34;semi\u0026#34;: [\u0026#34;error\u0026#34;, \u0026#34;always\u0026#34;], \u0026#34;quotes\u0026#34;: [\u0026#34;error\u0026#34;, \u0026#34;double\u0026#34;] } } \u0026ldquo;extends\u0026rdquo;: \u0026ldquo;eslint:recommended\u0026rdquo; 该配置会开启规则中所有为推荐的\n\u0026ldquo;off\u0026rdquo; or 0 - 关闭规则 \u0026ldquo;warn\u0026rdquo; or 1 - 将规则视为一个警告（不会影响退出码） \u0026ldquo;error\u0026rdquo; or 2 - 将规则视为一个错误 (退出码为1) Prettier 中文网站\n保存代码时格式化代码的工具\n基本使用 # vscode中安装 ext install esbenp.prettier-vscode npm install --save-dev --save-exact prettier # 创建该文件让 echo {}\u0026gt; .prettierrc.json # 该配置说明那些无需格式化 touch .prettierignore vscode 结合 eslint Prettier 相关插件安装\nnpm install --save-dev eslint-plugin-prettier npm install --save-dev --save-exact prettier npm install --save-dev eslint-config-prettier 配置.eslintrc.json\n{ \u0026#34;plugins\u0026#34;: [\u0026#34;prettier\u0026#34;], \u0026#34;rules\u0026#34;: { \u0026#34;prettier/prettier\u0026#34;: \u0026#34;error\u0026#34; }, // 放最后一个 \u0026#34;extends\u0026#34;: [\u0026#34;plugin:prettier/recommended\u0026#34;] } eslint-config-prettier 关闭所有不必要或可能与 Prettier 冲突的规则插件\nstyleLint # install npm install --save-dev stylelint-config-prettier // 配置.stylelintrc { \u0026#34;extends\u0026#34;: [ // other configs ... // 放在最后 \u0026#34;stylelint-config-prettier\u0026#34; ] } ","permalink":"blog.2332334.xyz/posts/web/eslint_prettier/","summary":"","title":"vscode Eslint Prettier 配置"},{"content":"VS code配置文件属性 VS code 1.首选项 -\u0026gt; Files.eol -\u0026gt; \\n 2.EditorConfig for Visual Studio Code插件 root = true [*] charset = utf-8 indent_style = space indent_size = 2 end_of_line = lf insert_final_newline = true trim_trailing_whitespace = true Git配置 # clone git 时自动选择LF还是CRLF git config --global core.autocrlf true git config --global core.autocrlf input git config --global core.autocrlf false dos2unix 处理windows LF结尾符转unix CRLF\nfind . -type f -exec dos2unix {} \\; 未测试命令\n参考 vscode如何替换所有文件的回车格式为LF呢？ editorconfig ","permalink":"blog.2332334.xyz/posts/software/vscode-setting/","summary":"","title":"Vscode Setting"},{"content":"vscode on browser github:code-server\ncoder:商业版\n安装 一. 自动化脚本\n# test curl -fsSL https://code-server.dev/install.sh | sh -s -- --dry-run # install curl -fsSL https://code-server.dev/install.sh | sh 二.\nnginx 配置 server { listen 443 ssl; # 监听端口 server_name code.alanyf.site; # 域名 # nginx请求日志地址 access_log /usr/local/webserver/nginx/logs/code.access.log; # ssl证书地址 ssl on; ssl_certificate /data/cert.pem; # pem文件的路径 ssl_certificate_key /data/cert.key; # key文件的路径 # ssl验证相关配置 ssl_session_timeout 5m; # 缓存有效期 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; # 加密算法 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 安全链接可选的加密协议 ssl_prefer_server_ciphers on; # 使用服务器端的首选算法 location / { proxy_pass https://localhost:8084; proxy_redirect off; proxy_set_header Host $host; # 传递域名 proxy_set_header X-Real-IP $remote_addr; # 传递ip proxy_set_header X-Scheme $scheme; # 传递协议 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # code-server的websocket连接需要Upgrade、Connection这2个头部 proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection upgrade; proxy_set_header Accept-Encoding gzip; } } # http请求直接重定向到https server { listen 80; # 监听端口 server_name code.alanyf.site; # 域名 return 301 https://$server_name$request_uri; } 参考链接 简单3步部署code-server(vscode网页版) ","permalink":"blog.2332334.xyz/posts/software/vscodeserver/","summary":"","title":"VscodeServer"},{"content":"Vue start 2021年3月19日\nupdate 2022-8-19\nend\n前端渐进式框架\n前端三大框架\nVue Angular React 一 vue基础语法 模版语法 1. 文本插值 mustache 语法，插值表达式； \u0026lt;span\u0026gt;{{msg}}\u0026lt;/span\u0026gt; \u0026lt;!-- v-html innerHTML --\u0026gt; \u0026lt;!-- 注意XSS漏洞，用户html不可信 --\u0026gt; \u0026lt;p v-html=\u0026#34;\u0026lt;span\u0026gt;innerHTML\u0026lt;/span\u0026gt;\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;!-- v-text --\u0026gt; \u0026lt;!-- 覆盖默认内容 --\u0026gt; \u0026lt;!-- v-for --\u0026gt; \u0026lt;!-- v-for 比 v-if 有更高优先级,避免在同个元素上 --\u0026gt; \u0026lt;td v-for=\u0026#34;(value,key,index) in items\u0026#34; {{value}} :key= \u0026#39;val.id\u0026#39;\u0026gt;this is table tag\u0026lt;/td\u0026gt; \u0026lt;!-- v-if or v-show --\u0026gt; \u0026lt;!-- 前者直接移除该标签，后者则是添加行内属性 --\u0026gt; \u0026lt;p v-if=\u0026#34;isDisable\u0026#34;\u0026gt;in shot\u0026lt;/p\u0026gt; 2. Attribute bind \u0026lt;div v-bind:id=\u0026#39;box1\u0026#39;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- 简写 --\u0026gt; \u0026lt;div :id=\u0026#39;box1\u0026#39;\u0026gt;\u0026lt;/div\u0026gt; 绑定多个对象\n\u0026lt;script\u0026gt; data(){ return { objOfAttrs: { id: \u0026#39;box02\u0026#39;, class: \u0026#39;container\u0026#39; } } } \u0026lt;/script\u0026gt; \u0026lt;div :objOfAttrs\u0026gt;\u0026lt;/div\u0026gt; 3. event bind v-on:click=\u0026#34;btnClick()\u0026#34; @click=\u0026#34;btnClick\u0026#34; $event // 事件对象，可做参数传递 || 无参数默认传递，有参数需带该固定参数对象 \u0026lt;a @keyup.esc=\u0026#39;clickEst\u0026#39;\u0026gt;\u0026lt;/a\u0026gt; // 按键修饰符 \u0026lt;a @click.prevent=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; event.preventDefault(); // 阻止默认行为 \u0026lt;a @click.stop=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; event.stopPropagation(); // 阻止冒泡 \u0026lt;a @click.capture=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; // 捕获模式触发当前事件 \u0026lt;a @click.once=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; // 绑定事件触发一次 \u0026lt;a @click.self=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; // 只有 event.target 是当前元素自身时触发事件处理函数 事件修饰符(event modifiers)\nprevent stop once key|key num bind注意信息 动态参数\n\u0026lt;!-- v-bind --\u0026gt; \u0026lt;a :[attributeName]=\u0026#34;url\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;!-- v-on --\u0026gt; \u0026lt;a @[eventName]=\u0026#39;doSomeThing\u0026#39;\u0026gt;\u0026lt;/a\u0026gt; 动态参数注意\n值 只能为字符串 or null， null则移除该属性 参数名 不可含有 空格 或者 引号,大写会自动转换为小写 以上：插值表达式 or v-开头的attribute中皆可使用js表达式，既：如下\n{{ number + 1 -1 * 1 / 1}} {{ isOK ? \u0026#39;yes\u0026#39; : \u0026#39;no\u0026#39;}} {{ str.trim().split(\u0026#39;-\u0026#39;).reverse().join(\u0026#39;+\u0026#39;) }} \u0026lt;div :id=\u0026#34;list-`${list.id}`\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 以上 bind 仅支持单一表达式,既 可直接用return 返回的 以上访问的皆为有限全局对象列表，如需使用没有的属性可：app.config.globalProperties 显式添加 v-model 实现数据双向绑定\n只能用于表单元素？\n修饰符:\nlazy change 时而非 input 时改变 number 自动转为数值 trim 去除空格 vue其他属性 filters\n过滤器, 应用于数据过滤 和绑定属性\n{{ messages | delI }} new Vue({ // methods same level, filters: { delI(val) { // val 既要过滤的数据 // 必须有返回值 return val } } }) methods\n方法\n计算属性 computed\n基于响应式依赖被缓存 只有改依赖对象改变才会执行，example：for i in model；model改变，才会触发其中使用的computed 不要有异步请求 或者更改DOM compute返回值应为只读；其返回为派生状态，既一个临时快照 export default { computed: { addNum(a,b){ return a+b } } } 侦听器 const vue = new Vue(){ data(){ return { username:\u0026#39;233\u0026#39;} } watch: { username: { handler: async function(newVla,oldVal) { console.log(newVla,oldVal) }, // 页面初始渲染好之后，立即触发该侦听器 immediate: true， // 监听深层结构 deep: true } } } 生命周期 var作用域 es5中只有function有作用域 es6中if和for也有作用域了 使用let 不用闭包实现作用域 数组 let arr = [\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,\u0026#39;c\u0026#39;] // forEach 使用后必定遍历一遍 arr.forEach(element =\u0026gt; {}); // some return 可终止循环 arr.some( v=\u0026gt; { if(v === \u0026#39;c\u0026#39;) return true }) // every let boolval = arr.every( v =\u0026gt; typeof v ===string) // reduse let result = arr.reduce((amt, item) =\u0026gt; {return amt+=item},0) 一.二 响应式基础 export default { data() { return { number: 2, } } // 生命周期钩子 mounted() { console.log(this.number) this.number++ }, methods: { addNum(){ this.number++ } } } 不在data中的属性虽可添加使用，但是不会触发响应式更新\nVue 内置API $开头，内部属性 _;避免顶层data中使用\nmethods 永久指向当前Vue实例，可通过this访问；避免使用箭头表达式，箭头函数this无法指向上下文\nVue 默认深层响应，既无论多深的对象或者数组皆可访问，并对改变监测\nmethods中创建的方法有状态，多个不同组件调用或有影响，应在created生命周期钩子中创建;例如：防抖函数(debounce)\nDOM 更新时机 更新响应式状态后，DOM更新；DOM更新会在周期执行结束后一次性更新组件\n可通过nextTick全局API，等待状态更新完成后的DOM\nimport {nextTick} from \u0026#39;vue\u0026#39; export default{ methods: { increment(){ nextTick(()=\u0026gt;{}) } } } 二 vue组件 vue原型挂载 // main.js 不利于API接口复用 import axios from \u0026#39;axios\u0026#39; axios.defaults.baseURL = \u0026#39;http://localhost\u0026#39; Vue.prototype.$http = axios // .vue const { data: res } = await this.$http.get(\u0026#39;/api/get\u0026#39;,{data:{}}) EventBus 兄弟\n操作DOM ref\n\u0026lt;h1 ref=\u0026#34;tmph1\u0026#34;\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt; Vue(){ methods: { logh1(){ console.log($ref.tmph1) } } } \u0026lt;/script\u0026gt; 注册组件基本步骤 old: use way\nVue.extend() #创建组件构造器 Vue.component() #注册组件 Vue实例范围内使用组件 vue实例components属性(即省略extent注册步骤,在实例中插入模板) // 全局组册组件,2x版本看的教程 \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const template01 = Vue.extend({ data(){ return { msg: \u0026#34;定义构建组件\u0026#34;, } }, template:` \u0026lt;h1\u0026gt;{{msg}}\u0026lt;/h1\u0026gt; ` }) Vue.component(\u0026#39;teplateName\u0026#39;,template01) // 组册 const vue = new Vue({ el: \u0026#34;#App\u0026#34;, }) \u0026lt;/script\u0026gt; // js obj定义template export default { data(){ return { hello: \u0026#34;hello world\u0026#34; } }, template:`\u0026lt;h1\u0026gt;这是一个局部组件,{{hello}}\u0026lt;/h1\u0026gt;` } new: .vue file SFC（单文件组件）\n// component01.vue \u0026lt;template\u0026gt;{{hello}}\u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data(){ return { hello: \u0026#34;hello world\u0026#34; } } } \u0026lt;/script\u0026gt; // 使用上方的组件 \u0026lt;template\u0026gt; \u0026lt;sp01\u0026gt;\u0026lt;/sp01\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import cp01 from \u0026#39;./component01.vue\u0026#39; export default { components: { cp01, } } \u0026lt;/script\u0026gt; style 样式 css样式默认全局生效\nscoped 使组件内样式与全局隔离\n原理为 添加自定义属性，通过css属性选择器隔离在该组件所有标签内；写在style标签中\n/deep/ 选择器前添加使该组件所调用子孙皆添加该样式；多用于修改第三方组件库样式\n\u0026lt;template\u0026gt;\u0026lt;/template\u0026gt; \u0026lt;script\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style scoped lang=\u0026#34;less\u0026#34;\u0026gt;\u0026lt;/style\u0026gt; component标签，keepalive动态组件 component\n模版中 component 标签为默认可替换标签 通过 is 属性绑定要替换的组件,绑定 data 中的值 组件切换，销毁后创新新实例，状态重置\n// component 动态切换基础 \u0026lt;template\u0026gt; \u0026lt;component :is=\u0026#34;mountComponent\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import c1 from \u0026#39;./component01.vue\u0026#39; import c2 from \u0026#39;./component02.vue\u0026#39; export default { data(){ return { mountComponent: \u0026#39;c1\u0026#39; } } components: { c1,c2 } } \u0026lt;/script\u0026gt; keepalive\n使包含在内的component组件保持状态\ninclude 和 exclude 规定行为；值为字符串或者正则，或者两个类型的数组\nmax 限制保持实例数量；即将超出时，销毁最久未访问实例，为新实例腾出空间\n// 保持组件状态 \u0026lt;template\u0026gt; \u0026lt;keepalive :include=\u0026#34;c1\u0026#34; :exclude=\u0026#34;c2\u0026#34; :max=\u0026#34;10\u0026#34;\u0026gt;\u0026lt;component/\u0026gt;\u0026lt;/keepalive\u0026gt; \u0026lt;/template\u0026gt; keepalive生命周期\n缓存树中后代组件可用\n\u0026lt;script\u0026gt; export default { activeted(){ // 首次挂载 // 每次从缓存中重新插入 } deactivated(){ // DOM上移除，进入缓存 // 组件卸载 } } \u0026lt;/script\u0026gt; 模板分离 \u0026lt;script type=text/x-template if=\u0026#39;\u0026#39;\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;template id=\u0026#39;\u0026#39;\u0026gt;\u0026lt;/template\u0026gt; 通讯 模板参数传递使用data函数返回(隔离组件返回对象数据) props(父传子) 声明变量,在模板中使用,通过绑定该属性传递父组件的值 $emit(子传父) 自定义事件 $event为推出的值 $children || $refs 获取子组件对象,常用$refs,通过标签设置ref属性访问 $parent || $root props 父组件向子组件传值 子组件通过props定义传递的值 父组件通过对自定义模版标签 绑定自定义属性（既子组件中定义的属性）并传值，向子组件传值 只读属性，父传子后，子不能修改改值；但可绑定到data中重新赋值\n// father vue \u0026lt;template\u0026gt; \u0026lt;child :msg=\u0026#34;hello\u0026#34;\u0026gt;\u0026lt;/child\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import child from \u0026#39;./child.vue\u0026#39; export default { data(){ return { mymsg: this.msg } }, component: {child}, } \u0026lt;/script\u0026gt; // child vue \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;{{msg1 + msg2}}\u0026lt;/h1\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data(){ }, // Define way01 // props: [\u0026#34;msg\u0026#34;], // Define way02 // prots: { // msg1: String, // msg2: Number // } // Define way03 props: { msg1: Sting, msg2:{ type: Number, default: \u0026#34;hello\u0026#34;, required: true } } } \u0026lt;/script\u0026gt; $emit() 子传父 / father vue \u0026lt;template\u0026gt; {{mymsg}} \u0026lt;child @getMsg=\u0026#34;getmsg\u0026#34;\u0026gt;\u0026lt;/child\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import child from \u0026#39;./child.vue\u0026#39; export default { data(){ return { mymsg: 0 } }, component: {child}, methods: { getmsg(val){ this.mymsg = val } }, } \u0026lt;/script\u0026gt; // child vue \u0026lt;template\u0026gt; \u0026lt;h1 @click=\u0026#34;pushMsg\u0026#34;\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data(){ return{ msg: \u0026#34;hello\u0026#34; } }, methods: { pushMsg(){ this.$emit(\u0026#39;getMsg\u0026#39;,msg) } } } \u0026lt;/script\u0026gt; slot(插槽) 组件可重用之外的使用插槽\n组件中使用\u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt;声明插槽 组件中slot标签之间为默认值,正文中为不同模板 具名插槽 模板slot标签中的name属性用以声明 注册标签中绑定slot属性实现该插槽 使用时的slot属性要在模板标签只能其他标签中 作用域插槽 模板中不同标签放在slot中 绑定数据对象(要传递给父对象使用的数据) 实例中使用slot-scope属性绑定插槽对象(名字可随意取),包含外围标签中 然后通过.获取绑定名以获取数据 绑定数据对象可随意取名,但后期使用时要一样才能获取 注意事项\nslot内的样式由父组件提供 slot无法访问子组件数据，因为其作用域实际在父组件中 子组件可在slot中定义默认内容，在父组件未为其传值时显示，父组件传值既会覆盖该内容 插槽基本定义与使用 // 父组件调用子组件，并传值，更新slot插槽位置 \u0026lt;template\u0026gt; \u0026lt;myComponent\u0026gt; child slot content \u0026lt;/myComponent\u0026gt; \u0026lt;/template\u0026gt; // myComponent ,子组件 slot 标签占位 \u0026lt;template\u0026gt; \u0026lt;slot\u0026gt;default content\u0026lt;/slot\u0026gt; \u0026lt;/template\u0026gt; 三.二 vue-cli 安装及初始化 安装\nnpm install -g @vue/cli # 拉取CLI 2x模板 npm install -g @vue/cli-init 初始化项目\n# 3x vue create 项目名 # 2X vue init webpack 项目名 # 图形化配置管理 vue ui Runtime-Complite 和 Runtime-only 区别 三 axios Promise 异步编程解决方案 链式编程\n三种状态\npending:等待 fulfill:满足 reject:拒绝 四 vue-route(前端渲染) hash or history 模式 //请求页面不刷新页面 hash localtion.hase = \u0026#39;url\u0026#39; // window.history 栈结构 history.pushState({},\u0026#39;\u0026#39;,\u0026#39;url\u0026#39;) history.back() history.replaceState({},\u0026#39;\u0026#39;,\u0026#39;\u0026#39;) history.go(num) :栈上移动 start 安装\nnpm install vue-route --save 步骤:\nVue.user(插件) import export vue VueReouter实例 router mode linkactiveclass vue绑定route实例 配置路由映射 router-link to 绑定vue模板 type 标签类型 tag 标签 replate 浏览器无返回,返回上一页无用 active-class(模板) router-active-class(路由index.js) 自定义点击事件实现简单路由 this.$router.push(\u0026rsquo;/Home\u0026rsquo;) || replate router-view 展示routerlink模板页面 路由 动态路由 路由含有一些后台数据,不是固定链接\nrouter: { path: \u0026#39;/path/:info\u0026#39;, // 重定向 redirect: \u0026#39;/path2\u0026#39;， alias: \u0026#39;/c\u0026#39; } // alias 用户访问 /path2 返回 /c vue this.$route.params.info 使用计算属性返回info\n路由参数传递\nparams : this.$route.params.attr query ? $route.$query.attr hash $route.hash 路由传参数 props\n嵌套路由 路由children配置子路由\nroutes: { path: \u0026#39;\u0026#39;, component: index, childrem: [ { path: \u0026#39;child-route\u0026#39;, component: child-page } ] } 3.1 命名视图\n\u0026lt;router-view name=\u0026#39;p1\u0026#39;/\u0026gt; \u0026lt;router-view name=\u0026#39;p2\u0026#39;/\u0026gt; router: { path: \u0026#39;\u0026#39;, components: { default: componentName1, p1: componentName2, } } 命名路由,感觉较为妥当，但是要多写 既在声明路由时添加name属性\n{ name: \u0026#39;index\u0026#39;, path: \u0026#39;\u0026#39;, component: } \u0026lt;router-link :to={ name: \u0026#39;index\u0026#39;, params: { id: 111}}\u0026gt;link-user\u0026lt;/router-link\u0026gt; 编程式导航,类似 window.history 几个方法\n// 声明式导航 \u0026lt;rouer-link to=\u0026#34;\u0026#34; /\u0026gt; // 编程式导航 router.push() // 替换当前history \u0026lt;rouer-link to=\u0026#34;\u0026#34; replace/\u0026gt; router.replace() router.go 如果当前路由与下一路由相同，只是参数变化，需要导航守卫来响应变化\n$router与$route区别\n$router 定义的路由对象 $route 路由对象上处于活跃状态的路由对象 路由懒加载 使用时再请求\n路由里面component用匿名函数返回模板对象，webpack打包自动处理；若使用babel 需要插件 syntax-dynamic-import\nconst Page = () =\u0026gt; import(\u0026#39;../components/Page\u0026#39;) // 正常使用 const routes = [ { path: \u0026#39;/page\u0026#39;, component: Page } ] 导航守卫,路由生命周期函数 路由跳转中的钩子函数(声明周期里面)\n全局导航守卫 //前置守卫(guard) router.beforeEach((to,form,next) =\u0026gt; { next()//继续进行下一步 }) //后置钩子(hook) router.afterEach((to,form) =\u0026gt; { next() }) 路由独享守卫 五 vuex 集中状态管理库\n","permalink":"blog.2332334.xyz/posts/web/vue/","summary":"","title":"VUE"},{"content":"Vue3 + vite 配置env环境变量 1. 添加环境变量配置文件 touch .env.development touch .env.production touch .env.test 基本内容\nVITE_MODE_ENV=development VITE_APP_TITLE=开发环境 VITE_API_BASE_URL=\u0026#39;\u0026#39; 需要VITE前缀才可识别该环境变量\nexport default defineConfig({ envPrefix: \u0026#39;XX\u0026#39; // 可通过配置该变量修改为你需要的前缀 }) envPrefix 默认放在项目根目录下，如需保存至制定目录\n// 修改vite.config.ts export default defineConfig({ envDir: \u0026#39;./src/env\u0026#39; // 添加该条内容即可 }) 2. 添加ts智能提示 // 修改 env.d.ts // 添加入下内容 interface ImportMetaEnv { readonly VITE_APP_TITLE: string // 更多环境变量... } interface ImportMeta { readonly env: ImportMetaEnv } 3. 使用模式 以及 vue中获取环境变量值 通过配置 package.json 修改 scripts\nvite build --mode dev vue中获取环境参数的值\nconsole.log(import.meta.env.VITE_API_BASE_URL) 参考链接 vite官网 vite doc2 ","permalink":"blog.2332334.xyz/posts/web/vue3+vite+env/","summary":"","title":"Vue3 + vite 配置env环境变量"},{"content":"vue3+vite+sass 1.安装sass // --save-dev pnpm i sass -d 2.配置vite.config export default defineConfig({ // CSS 预处理器 css: { preprocessorOptions: { // 定义sass变量 scss: { additionalData: `@import \u0026#39;./src/assets/styles/variables.scss\u0026#39;;`, }, }, }, }); 3. vue文件中使用sass \u0026lt;style lang=\u0026#39;scss\u0026#39; scoped\u0026gt; \u0026lt;/style\u0026gt; ","permalink":"blog.2332334.xyz/posts/web/vue3+vite+sass/","summary":"","title":"vue3+vite+sass"},{"content":"微信小程序 wxml 组件\nview\ndiv scroll-view\n可滚动视图区域 滚动列表 swiper swiper-getitem\n轮播图 ","permalink":"blog.2332334.xyz/posts/web/wechat/","summary":"","title":"wechatApp"},{"content":"Win10开启IIS并设置.net4.5框架 一.开启IIS 控制面板 -\u0026gt; 程序 -\u0026gt; internet Infomation Services\n这里我打开后的版本为IIS10\n二.开启.net4.5 二.1 确认已安装framework版本 首先确定您电脑是否安装该版本框架，具体信息参考微软官网\n通过命令确定是否安装 (Get-ItemProperty \u0026#34;HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\u0026#34;).Release -ge 394802 //确定是否已安装 .NET Framework 4.6.2 或更高版本 通过组册吧确定 regedit // 打开注册表 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full的Release条目值大于378389即可确定安装了大于4.5的框架\n二.2 开启iis后默认只有.net4.0作为程序运行池子 通过一下命令打开.net4.5运行池 // aspnet_regiis.exe -i dism /online /enable-feature /featurename:IIS-ISAPIFilter dism /online /enable-feature /featurename:IIS-ISAPIExtensions dism /online /enable-feature /featurename:IIS-NetFxExtensibility45 dism /online /enable-feature /featurename:IIS-ASPNET45 如出现以下报错\nThe operation is complete but IIS-ASPNET45 feature was not enabled. A required parent feature may not be enabled. You can use the /enable-feature /all option to automatically enable each parent feature fr om the following list. If the parent feature(s) are already enabled, refer to the log file for further diagnostics. IIS-ISAPIFilter, IIS-ISAPIExtensions, IIS-NetFxExtensibility45 执行\ndism /online /enable-feature /featurename:IIS-NetFxExtensibility45 dism /online /enable-feature /featurename:NetFx4Extended-ASPNET45 dism /online /enable-feature /featurename:IIS-ASPNET45 // 我是通过如上命令开启的 dism /online /Get-Features 查看已安装产品\n也可尝试通过控制面板安装 ","permalink":"blog.2332334.xyz/posts/system/win10-iis-enable-dotnetf4.5/","summary":"","title":"Win10 IIS Enable DotnetF4.5"},{"content":" Windows Terminel美化 以管理员方式运行WIndow Terminal\n美化流程 1.修改window terminal配置 \u0026#34;profiles\u0026#34;: { \u0026#34;defaults\u0026#34;: { // Put settings here that you want to apply to all profiles \u0026#34;acrylicOpacity\u0026#34;: 0.8, //背景透明度 \u0026#34;useAcrylic\u0026#34;: true, // 启用毛玻璃 \u0026#34;backgroundImage\u0026#34;: \u0026#34;D:\\\\OneDrive\\\\图片\\\\stack.jpg\u0026#34;, //背景图片 \u0026#34;backgroundImageOpacity\u0026#34;: 0.5, //图片透明度 \u0026#34;backgroundImageStretchMode\u0026#34;: \u0026#34;fill\u0026#34;, //填充模式 \u0026#34;icon\u0026#34;: \u0026#34;ms-appx:///ProfileIcons/{9acb9455-ca41-5af7-950f-6bca1bc9722f}.png\u0026#34;, //图标 \u0026#34;fontFace\u0026#34;: \u0026#34;Sarasa Term SC\u0026#34;, //字体 \u0026#34;fontSize\u0026#34;: 14, //文字大小 \u0026#34;colorScheme\u0026#34;: \u0026#34;Solarized Light\u0026#34;, //主题 \u0026#34;cursorColor\u0026#34;: \u0026#34;#FFFFFF\u0026#34;, //光标颜色 \u0026#34;cursorShape\u0026#34;: \u0026#34;bar\u0026#34;, //光标形状 \u0026#34;startingDirectory\u0026#34;:\u0026#34;D://Projects//\u0026#34; //起始目录 } } 2.Nuget安装相关包 Set-ExecutionPolicy AllSigned set-executionpolicy remotesigned #允许网络签名 安装以下包\nInstall-Module git-aliases Install-Module posh-git Install-Module oh-my-posh # A prompt theme engine for any shell. Install-Module -AllowClobber Get-ChildItemColor # 让 ls (Get-ChildItem) 像 Unix 系终端 Install-Module DirColors Get-PoshThemes打印所有主题\n3.修改配置文件以永久保存 $PROFILE #查看配置文件配置\ncode $PROFILE #vscode打开配置文件并复制以下内容并保存\n#-Verbose 选项会显示详细加载信息 $env:POSH_GIT_ENABLED = $true Import-Module DirColors Import-Module posh-git Import-Module oh-my-posh Import-Module git-aliases -DisableNameChecking Import-Module Get-ChildItemColor Set-PoshPrompt -Theme amro # 设置oh-my-posh主题 一些主题因为所用字体没有相关符号会显示乱码,这里使用了FantasqueSansMono Nerd Font\n4.官方配色工具 安装Chocolatey\n根据 Chocolatey官方 的安装方法进行安装\nchoco install colortool 之后复制到配置文件中,并应用配置即可\n更多配色方案\n参考地址 微软官方windowsTerminal文档\nWindows Terminal 终极美化\n","permalink":"blog.2332334.xyz/posts/system/winterminel%E7%BE%8E%E5%8C%96/","summary":"","title":"WinTerminel美化"},{"content":"WSL bash命令均运行在PowerShell\n官方文档\nWSL安装 启用适用于Linux的Windows子系统\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 或者:\n控制面板 -\u0026gt; 程序 -\u0026gt; 启用或或关闭Windows功能 -\u0026gt; 勾选用于Linux的Windows子系统\n至此重启计算机,在应用商店安装ubuntu即可(WSL1)\n升级WSL2 基本要求 windows版本要求\nx64 需要 1903+ ARM64 需要 2004+ 内部版本低于18362不支持WSL2 winver 命令可查看win版本 1903和1909需要内部版本号18362.1049+或18363.1049+ 硬件要求\n开启bios的Hyper-V,即需要支持Hyper-V功能 Systeminfo 命令可查看系统相关信息 安装步骤 1.启用虚拟机平台功能\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 或者:\n控制面板 -\u0026gt; 程序 -\u0026gt; 启用或或关闭Windows功能 -\u0026gt; 勾选虚拟机平台\n2.下载Linux内核更新程序包\n适用于X64 PC\n3.重启电脑进行最后配置\nwsl --list --verbose # 或者 wsl -l -v 查看安装的linux wsl --set-version \u0026lt;distribution name\u0026gt; \u0026lt;versionNumber\u0026gt; # 将其设置为WSL2 wsl --set-default-version 2 # WSL2设为默认 wsl -l -v 该命令需要内部版本高于18362才可使用\nWSL更改安装位置 大致找到了两种方法:\n以下命令均在 windows powershell 中执行\n一. LxRunOffline 1.下载安装 LxRunOffline 并添加环境变量\n该项目Github地址 2.查看 WSL 名称\nlxrunoffline l 或者 wsl -l 3.移动 WSL\nlxrunoffline m -n \u0026lt;WSL名称\u0026gt; -d \u0026lt;路径\u0026gt; lxrunoffline di -n \u0026lt;WSL名称\u0026gt; 完成后即可完成 WSL 更改位置\n二. 使用 wsl 自带工具移动 1.查看 WSL 相关命令\nwsl --version 2.查看 WSL 名称\nwsl -l 3.备份还原 wsl\nwsl --export [wls名称] [打包位置的.tar] wsl --import [wsl名称] [还原位置] [打包文件] 以上\n参考地址 LxRunOffline 使用教程 - WSL 自定义安装、备份\n简单到极致！Windows 10 Ubuntu子系统的备份/还原教程来了\n安装和使用 WSL2\n","permalink":"blog.2332334.xyz/posts/system/wsl/","summary":"","title":"WSL"},{"content":"青龙面板 简介: 支持python3、javaScript、shell、typescript 的定时任务管理面板\ngithub hub.docker 安装 1.前置条件需要安装docker\nsudo curl -sSL get.docker.com | sh 2.启动容器\ndocker run -dit \\ -v $PWD/ql/config:/ql/config \\ -v $PWD/ql/log:/ql/log \\ -v $PWD/ql/db:/ql/db \\ -v $PWD/ql/repo:/ql/repo \\ -v $PWD/ql/raw:/ql/raw \\ -v $PWD/ql/scripts:/ql/scripts \\ -p 5700:5700 \\ --name qinglong \\ --hostname qinglong \\ --restart unless-stopped \\ whyour/qinglong:latest 参考官方文档即可.\n挂JD任务 脚本\n[Faker国内仓库] ql repo https://ghproxy.com/https://github.com/shufflewzc/faker2.git \u0026#34;jd_|jx_|gua_|jddj_|getJDCookie\u0026#34; \u0026#34;activity|backUp\u0026#34; \u0026#34;^jd[^_]|USER|ZooFaker_Necklace.js|JDJRValidator_Pure|sign_graphics_validate\u0026#34; [Faker集合仓库] ql repo https://ghproxy.com/https://github.com/shufflewzc/faker2.git \u0026#34;jd_|jx_|getJDCookie\u0026#34; \u0026#34;activity|backUp\u0026#34; \u0026#34;^jd[^_]|USER|ZooFaker_Necklace\u0026#34; [怨念仓库] ql repo https://ghproxy.com/https://github.com/yuannian1112/jd_scripts.git \u0026#34;jd_|jx_|getJDCookie\u0026#34; \u0026#34;activity|backUp\u0026#34; \u0026#34;^jd[^_]|USER|utils\u0026#34; [curtinlv仓库] ql repo https://github.com/curtinlv/JD-Script.git [star] ql repo https://github.com/star261/jd.git \u0026#34;scripts\u0026#34; \u0026#34;code\u0026#34; [ddo（hyzaw）] ql repo https://ghproxy.com/https://github.com/shufflewzc/hyzaw.git \u0026#34;ddo_\u0026#34; [柠檬（胖虎）] ql repo https://github.com/panghu999/panghu.git \u0026#34;jd_\u0026#34; [温某某] ql repo https://ghproxy.com/https://github.com/shufflewzc/Wenmoux.git [混沌] ql repo https://github.com/whyour/hundun.git \u0026#34;quanx\u0026#34; \u0026#34;tokens|caiyun|didi|donate|fold|Env\u0026#34; [龙珠] ql repo https://github.com/whyour/hundun.git \u0026#34;quanx\u0026#34; \u0026#34;tokens|caiyun|didi|donate|fold|Env\u0026#34; 配置JD cookie\n环境变量 -\u0026gt; 添加变量\n登录 m.jd.com 复制cookie 中的 pt_key与pt_pin\nJD_COOKIE:\n配置XDD机器人 1.安装golong即相关包 cd /usr/local \u0026amp;\u0026amp; wget https://golang.google.cn/dl/go1.17.6.linux-amd64.tar.gz -O go1.17.6.linux-amd64.tar.gz tar -xvzf go1.16.7.linux-amd64.tar.gz vi /etc/profile # 写入如下内容 export GO111MODULE=on export GOPROXY=https://goproxy.cn export GOROOT=/usr/local/go export GOPATH=/usr/local/go/path #export PATH=$PATH:/usr/local/go/bin export PATH=$PATH:$GOROOT/bin:$GOPATH/bin source /etc/profile # 检查是否安装成功 go env sudo dnf -y install git gcc gcc-c++ 2.安装XDD cd ~ \u0026amp;\u0026amp; git clone https://ghproxy.com/https://github.com/764763903a/xdd-plus.git cd xdd-plus \u0026amp;\u0026amp; go build chmod 777 xdd ./xdd 出来检查更新即可结束执行\n3.获取青龙面板ClientID ClientSecret 系统设置 -\u0026gt; 应用设置 -\u0026gt; 新建应用 -\u0026gt; 全部权限 -\u0026gt; OK\n4.配置XDD xdd_plug 配置失败.垃圾\n参考 京东白嫖——青龙面板 CentOS7 青龙面板挂京豆欢太，全网最全，最详细（11.24更新） ","permalink":"blog.2332334.xyz/posts/software/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF/","summary":"","title":"青龙面板"},{"content":"Django python后端框架\n官网\n安装 python -m pip install django python3 import django django.get_version() start 新建项目 1.创建项目和应用\ndjango-admin startproject projectName cd projectName python mange.py startapp appName 2.配置项目的urls.py\nfrom django.contrib import admin from django.urls import path,include urlpatterns = [ path(\u0026#39;\u0026#39;,include(\u0026#39;appname.urls\u0026#39;)), path(\u0026#39;admin/\u0026#39;, admin.site.urls), ] 3.新建app的urls.py\nfrom django.urls import path from . import views urlpatterns = [ path(\u0026#39;\u0026#39;,views.index,name=\u0026#39;index\u0026#39;), ] 4.创建数据库模型\nfrom django.db import models class proxy(models.Model): def __str__(self): return str(self.proxyIP)+\u0026#39;:\u0026#39;+str(self.proxyPort) proxyIP = models.CharField(max_length=30) proxyPort = models.IntegerField() 5.配置项目setting.py添加该模型\nINSTALLED_APPS = [ \u0026#39;get_ip.apps.GetIpConfig\u0026#39;, \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, ] 第一项为新增内容,即app中apps.py的第一个类\n6.编写view.py\n7.生成数据库\ncd appname mkdir -p templates/appname touch templates/appname/index.html cd ../ py manage.py migrate python manage.py makemigrations appName python manage.py migrate 8.剩下\ntemplates的html模板 vies.py中返回给模板的内容 urls.py新加页面或者请求 基本命令 django-admin startproject projectName # 创建项目 python mange.py startapp appName # 创建应用 python mange.py runserver [0:8080] # 运行项目,ip端口可选 ---- # db相关 python manage.py migrate # 创建/最后更新数据库 python manage.py makemigrations appName # 数据迁移,结构改变,生成相关py脚本 python manage.py sqlmigrate appName 0001 # 查看迁移执行的sql语句;默认在appName/migrations/下 ","permalink":"blog.2332334.xyz/posts/code/python/django/","summary":"","title":"Django"},{"content":"Django uWSGI uWSGI 是一个快速的，自我驱动的，对开发者和系统管理员友好的应用容器服务器，完全由 C 编写。\ndgango搭配nginx\nmod_wsgi搭配apache\n安装配置 安装 python -m pip install uwsgi # or install LTS python -m pip install https://projects.unbit.it/downloads/uwsgi-lts.tar.gz 配置启动 uwsgi --chdir=/path/to/your/project \\ --module=mysite.wsgi:application \\ --env DJANGO_SETTINGS_MODULE=mysite.settings \\ --master --pidfile=/tmp/project-master.pid \\ --socket=127.0.0.1:49152 \\ # can also be a file --processes=5 \\ # number of worker processes --uid=1000 --gid=2000 \\ # if root, uwsgi can drop privileges --harakiri=20 \\ # respawn processes taking more than 20 seconds --max-requests=5000 \\ # respawn processes after serving 5000 requests --vacuum \\ # clear environment on exit --home=/path/to/virtual/env \\ # optional path to a virtual environment --daemonize=/var/log/uwsgi/yourproject.log # background the process 配置\nuwsgi --ini uwsgi.ini\n[uwsgi] chdir=/path/to/your/project module=mysite.wsgi:application master=True pidfile=/tmp/project-master.pid vacuum=True max-requests=5000 daemonize=/var/log/uwsgi/yourproject.log env = LANG=en_US.UTF-8 参考 如何用 uWSGI 托管 Django ","permalink":"blog.2332334.xyz/posts/code/python/django-uwsgi/","summary":"","title":"Django Uwsgi"},{"content":" 子域名部署测试 莫名其妙想用子域名再建一个网站然后开始这一段折腾!\n开发环境\n系统: centos8 数据库: sqlite3 mysql php: 7.2 首先dns解析 在阿里云的dns解析中添加一个a记录即可.(很简单,之后就是一段心酸坎坷的折腾之旅)\ndocker与blog 很久没用 docker 了,于是想这个网站用 docker 容器，安装 docker 倒一切顺利!\n然后开始现学现卖 docker 相关知识,现在能想到的一些知识：\n-p 容器端口与本机端口绑定 -v 本机地址与docker容器地址绑定 刚开始绑端口我我都绑反了，后面绑地址的时候才发现（尴尬）\n先用 hexo 实验一下,只需要装好 node.js 和 hexo 即可，一下子就弄好了，但是一想没有后台就放弃了（可以装一款插件（hexo-admin）即可有后台）。\n然后就开始实验 typecho ,就被按在地上反复摩擦，现在能想到的问题做下归纳：\n访问404，查看 nginx 日志，文件夹权限没给。 然后就是nginx配置相关的 database query error 最后打开安装页面了，但是安装的第二页却是空白页！现在都还不知道咋回事！ 现在是一直 数据库查询错误. 如果继续用 sqlite 的话自建库再建建好表,但是我复制之前的库来用还是不行,暂时也没想到解决方案!\n稍后使用虚拟机再实验一下!\n最后准备开始用 WordPress！\n那个晚上像开窍一般，想到我为啥要用docker容器来装，这不是多此一举，直接 nginx 加个 server 配置不就好了（汗）\nnginx的折腾 使用 systemctl 和 service 重启 nginx 总会提示.pid 文件没有创建但是配置里并没有设置那个目录用 .pid 文件啊!\n重新加载配置还是使用 nginx -s reload ,用这个基本ok!\n最后看见之前看 php 安装的博客有一篇写 nginx ,之后要仔细看看!\n生命不息 折腾不止\n","permalink":"blog.2332334.xyz/posts/blog/%E5%AD%90%E5%9F%9F%E5%90%8D%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/","summary":"","title":"子域名博客折腾"},{"content":"XMRig无捐献 之前尝试了一下挖门罗币,发现使用的工具 XMRig 开源且用的人还蛮多,但是使用默认会有1%的捐献比例!\n于是找了找无捐献版本并做个记录:\nlinux版本 1.安装依赖\nsudo apt-get install git build-essential cmake libuv1-dev libssl-dev libhwloc-dev -y 如果想要静态版本(如果多机器运行还是编译这个版本)，则在上面的依赖安装完成后,再输入：\nsudo apt-get install automake libtool autoconf -y 2.下载XMRig\n工具官方 GitHub 仓库\nsudo apt install git git clone git@github.com:xmrig/xmrig.git 3.修改源代码\nvim xmrig/src/donate.h 将以下内容\nconstexpr const int kDefaultDonateLevel = 5; constexpr const int kMinimumDonateLevel = 1; 修改为：\nconstexpr const int kDefaultDonateLevel = 0; constexpr const int kMinimumDonateLevel = 0; 4.编译\nmkdir xmrig/build # 新建个文件夹装编译后文件 cd xmrig/build #进入build文件夹 cmake .. make -j$(nproc) 静态编译\nmkdir xmrig/bulid cd xmrig/scripts \u0026amp;\u0026amp; ./build_deps.sh #进入xmrig目录执行build_deps.sh文件 cd ../build cmake .. -DXMRIG_DEPS=scripts/deps make -j$(nproc) 编译完成后使用ldd xmrig验证文件依赖\n最后就可以直接复制build文件夹来运行里面的程序了\nwin版本 本来是打算编译这个版本的,但是我电脑装的vs2019;\n就算下了c++的支持我也没有编译成功,索性就编译linux的;\n最后感觉还是装linux的好点,win的不知道什么时候就卡死了!\n跑起来电脑卡到爆炸!\n1.下载并安装 cuda\ncuda: N卡推出的并行计算平台,可以使用显卡算力吧!\n查看cuda版本的话 控制面板 -\u0026gt; NVIDIA控制面板 -\u0026gt; 左下角 系统信息 -\u0026gt; 组件 -\u0026gt; NCVCUDA.dll 那行\n跑门罗的话感觉没必要吧!我没测试过还是下了!版本好像自动检查本机cuda版本!\n下载链接\n2.下载 xmrig 源代码\nGitHub仓库地址\n下载链接\n3.下载 Visual Studio 2017并安装c++桌面开发工作负载\n下载链接\n4.下载并安装 Cmake (跨平台安装,编译工具)\n下载链接\n5.编译\n打开PowerShell执行以下命令\nmkdir build cd build cmake .. -G \u0026#34;Visual Studio 15 2017 Win64\u0026#34; -T v140,host=x64 成功执行后 Cmkake 会在 xmrig 源代码目录下build目录生成vs的.sln文件\n打开该文件修改 Option.sh :\niniline int donateLevel() const {return 0;} 将原本 return m_donateLevel; 修改为 return 0;即可\n然后编译该项目,为啥问题基本就ok了.\n有些和参考链接不一样,不晓得有没有问题,有问题参考下面链接\n参考链接 linxu编译无捐献xmrig\nlinxu编译无捐献xmrig(方法2)\nwin无捐献xmrig(1)\nwin无捐献xmrig(2)\nwin查看cuda版本\n","permalink":"blog.2332334.xyz/posts/web3/%E9%97%A8%E7%BD%97%E6%8C%96%E7%9F%BF-xmrig%E8%87%AA%E7%BC%96%E8%AF%91%E6%97%A0%E6%8D%90%E7%8C%AE%E7%89%88%E6%9C%AC/","summary":"","title":"门罗挖矿 XMRig自编译无捐献版本"},{"content":"Typecho首次安装 经历 这个服务器买了1-2年了,买来也没咋用(就挂了两个python爬虫).\n一直想有个自己的Blog,之前尝试了\nwordpress(搞过一次)\nJekyll(搞了许久没咋搞懂)\nHexo(尝试过一次)\n直到现在莫名使用Typecho,希望能记录下一点有用的东西吧!\n我安装的基本需要 PHP\nNginx\nSqlite\nPHP 来来回回装了3-4次,yum安装好了没找到php-fpm.\n我又下载源代码装了一次(这次除了php -v其他我又搞不来了),最后还是yum装的.\n因为使用的是Linux做服务器,对于目录和一些命令还不是太熟悉!\n安装的话可以参考这个,虽然感觉最后安装完有点问题,但也算一次成功的尝试嘛.\n安装完后就主要php-fpm和nginx的配置了!\n关于php-fpm: 因为nginx并不能解析php,所以需要php-fpm解析后由nginx中转.\n使用chmod -R 777 你的网站位置给予权限\n修改以下配置文件(yum安装)\n/etc/php.ini\n/etc/php-fpm.d/www.conf (设置 listen = 127.0.0.1:9000 需要与nginx的 fastcgi_pass 一致)\n现在还有就是启动 php-fpm 的时候会出现权限不足的情况(使用sudo)\n我的临时解决办法就是自己手动创建那个文件夹再运行就ok了.\n我想到的解决办法是就该配置文件去掉创建的那个文件夹\nNginx配置 location ~ ^.+.php { proxy_set_header Host $http_host; proxy_set_header X-Forward-For $remote_addr; fastcgi_split_path_info ^((?U).+\\.php)(/?.+)$; fastcgi_param SCRIPT_FILENAME 你的网站主目录$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info; fastcgi_index index.php; fastcgi_pass 127.0.0.1:9000; include fastcgi_params; } 安装好后数据库配置出现错误(使用的sqlite3) 目录权限问题 || 我在目录手动创建一个数据库后就没问题了\n最后除了访问 .php 页面其他全部404 nginx配置之前是\nlocation ~ \\.php$ { ..... } 改成\nlocation ~ ^.+.php { ..... } 就ok了\n参考地址\nCentos8（Liunx） 中安装PHP7.4 的三种方法和删除它的三种方法 https://www.cnblogs.com/alliancehacker/p/12255445.html\ntypecho安装 https://www.jianshu.com/p/30e777609367\n","permalink":"blog.2332334.xyz/posts/blog/typecho-first/","summary":"","title":"Typecho-First"},{"content":"门罗 简介 门罗币官网\n门罗币(XMR)是一个创建于2014年4月开源加密货币，它着重于隐私、分权和可扩展性。\n挖矿步骤 1.申请钱包 MyMonero\u0026ndash;我使用这个在线申请的钱包 类似在线钱包不推荐，安全性无法保证\n其他官方推荐钱包 2.安装挖矿软件 选择安装的系统\n下载编译运行即可(Linux)\n最低捐献1%给软件开发者\n跟随该文档即可实现 XMRig文档\n3.选取矿池 可以通过软件生成配置文件设置\u0026ndash;配置界面\n最后运行时生成config文件or命令行都行\n我选择的矿池\n4. Cpulimit限制Cpu 最后通过挖矿软件限制Cpu未实现(单核cpu不支持),找到了该软件!\ngithub下载地址\n含编译完成版本\n使用方法 cpulimit -l 10 run_app.bin\n( 限制应用程序 run_app.bin 的 cpu使用率 不超过 10% )\ncpulimit -l 10 -p 1000\n( 限制系统进程 id 为1000程序 的 cpu使用率 不超过 10% )\n注:\n单核cpu的使用率范围为0%-100%,四核cpu的使用率范围为0%-400%.\n参考地址 cpulimit ","permalink":"blog.2332334.xyz/posts/web3/%E9%97%A8%E7%BD%97%E5%88%9D%E8%AF%95/","summary":"","title":"门罗初试"},{"content":" Typecho更换主题 闲来无事先换一个typecho的主题,本以为几分钟的事,结果却搞了许久!\n折腾 刚开始准备更换 Aria 这款主题的!\n结果遇到了如下问题:\nphp未安装json扩展!导致无法请求!\n想用php的phpize安装扩展,结果未安装(源码安装的),有点捉急!\n网页文件无法修改(权限问题)!\n最后我选择重装php rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm rpm -Uvh http://rpms.remirepo.net/enterprise/remi-release-8.rpm dnf -y install dnf-utils yum install php74-php yum search php74* # 自行选择需要的包安装 systemctl restart php74-php-fpm systemctl enable php74-php-fpm nginx 与 php通信 www.conf 配置文件修改以下项:\nuser = 用户名\ngroup = 组\nlisten = 127.0.0.1:9000\n最后重启php-fpm\n尝试unix:php-fpm.sock失败稍后虚拟机尝试\n考网址 完全卸载php\ntypecho开启debug\n安装php\n","permalink":"blog.2332334.xyz/posts/blog/typecho-change-theme/","summary":"","title":"Typecho Change Theme"},{"content":"golang 安装 安装二进制包 1.下载相应go版本并解压\nrm -rf /usr/local/go \u0026amp;\u0026amp; tar -C /usr/local -xzf go1.14.3.linux-amd64.tar.gz 如果已经安装会先删除go目录\n2.添加环境变量\necho \u0026#34;export PATH=$PATH:/usr/local/go/bin\u0026#34; \u0026gt;\u0026gt; /etc/profile \u0026amp;\u0026amp; source /etc/profile 3.检查是否安装成功\ngo version ","permalink":"blog.2332334.xyz/posts/code/go/golang/","summary":"","title":"Golang"},{"content":"最近看视频看到挺多用这个有趣功能的也想着尝试以下 搞了几小时找到了两种实现(应该一个最新版,一个老版的):\n新版本 下载 该项目 最新版本\n下载 checkpoint\n下载 ffmpeg-win32-v3.2.4\n将 ffmpeg-win32-v3.2.4 复制到 *** C:\\Users(用户名)\\AppData\\Local\\imageio\\ffmpeg\\ *** 下\n安装 python\n运行解压后的 yanderify.zip 里面的 yanderify.exe 即可使用\n百度云版本 该版本在百度云上找到了(没有会员下载了许久)\n安装python\nC:\\Users\\(用户名)\\ 该目录下创建 .torch 文件夹 再在里面创建 models 文件夹\n(完整目录为: C:\\Users\\(用户名)\\.torch\\models)\n将下载的名为插件文件夹的东西放到上面创建的目录中\n进入yanderify运行Start Yanderify即可使用\n程序界面：\nSelect Video 选择源视频文件\nSelect Image 选择你要唱歌的图片(该图片最好是宽高像素相同大小的。最最好是与源文件视频像素一致的;你可以通过右键文件的属性，详细信息查看帧宽度和帧高度来确定。)\nSelect Output 选择你要输出的文件名。\nGO 等待进度条前进，即可生成你想要的文件。\n参考目录\nyanderifier项目\n原版安装\n百度云版\n","permalink":"blog.2332334.xyz/posts/code/python/yanderify-try/","summary":"","title":"Yanderify Try"},{"content":"Scrapy vscode调试项目 2021年6月29日\n配置vscode运行配置 ctrl+ shift + d 点击齿轮配置按钮,生成配置文件\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Python: 当前文件\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;python\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${file}\u0026#34;, \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceFolder}/项目名称\u0026#34;, \u0026#34;console\u0026#34;: \u0026#34;integratedTerminal\u0026#34;, // \u0026#34;args\u0026#34;: [ // \u0026#34;crawl\u0026#34;, // \u0026#34;爬虫名字\u0026#34; // ] } ] } 之后即可 F5 直接运行了(然后就没然后了)\n在settings.py文件新建run.py\nfrom scrapy.cmdline import execute import sys import os # 获取当前脚本路径 dirpath = os.path.dirname(os.path.abspath(__file__)) #运行文件绝对路径 print(os.path.abspath(__file__)) #运行文件父路径 print(dirpath) # 添加环境变量 sys.path.append(dirpath) #切换工作目录 os.chdir(dirpath) # 启动爬虫,第三个参数为爬虫name execute([\u0026#39;scrapy\u0026#39;,\u0026#39;crawl\u0026#39;,\u0026#39;爬虫名字\u0026#39;]) 然后第一个设置配置文件就没啥用了,配置第二个,即可名中spiders中的断点\nScrapy shell 参考 如何使用vscode调试scrapy爬虫项目 vscode 调试和运行scrapy ","permalink":"blog.2332334.xyz/posts/code/python/scrapy-vscode-debug/","summary":"","title":"Scrapy Vscode Debug"},{"content":"Mysql基础信息 修改密码 vi /etc/my.cnf # 添加免密登录 [mysqld] skip-grant-tables sudo systemctl restart mysqld mysql -u root -p # 修改密码 5.7 update user set authentication_string = password(“root”) where user = “root”; ALTER USER \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;pwd\u0026#39;; ALTER USER \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED WITH mysql_native_password BY \u0026#39;pwd\u0026#39;; # 最新的使用的认证方式，若要使用 mysql_native_password 需修改my.cnf 配置启用 ALTER USER \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED WITH caching_sha2_password BY \u0026#39;pwd\u0026#39;; update user set host=\u0026#39;%\u0026#39; where user=\u0026#39;root\u0026#39;; flush privileges; WITH GRANT OPTION 添加这个可使用户权限可以继承\n最后注销配置文件的免密行\n管理 CREATE USER \u0026#39;john\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;password123\u0026#39;; # 授权 GRANT ALL PRIVILEGES ON test_db.* TO \u0026#39;john\u0026#39;@\u0026#39;localhost\u0026#39;; GRANT ALL ON *.* TO \u0026#39;u\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;pwd\u0026#39; WITH GRANT OPTION; SHOW GRANTS FOR \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39;; REVOKE ALL PRIVILEGES ON test_db.* FROM \u0026#39;john\u0026#39;@\u0026#39;localhost\u0026#39;; DROP USER \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39;; ALTER USER \u0026#39;username\u0026#39;@\u0026#39;host\u0026#39; IDENTIFIED BY \u0026#39;new_password\u0026#39;; Database 建库\n# 查看字符集 show character set; # 查看排序规则 show collation; CREATE DATABASE [IF NOT EXISTS] \u0026lt;数据库名\u0026gt; [[DEFAULT] CHARACTER SET \u0026lt;字符集名\u0026gt;] [[DEFAULT] COLLATE \u0026lt;排序规则名\u0026gt;]; 排序规则 名称 解析 ci 大小写不敏感 cs 敏感 bin 二元 unicode 支持扩展,准确 general 不支持扩展,快速 查询 删除 增加 修改","permalink":"blog.2332334.xyz/posts/software/mysql-%E5%9F%BA%E7%A1%80%E4%BF%A1%E6%81%AF/","summary":"","title":"Mysql"},{"content":"","permalink":"blog.2332334.xyz/tag/","summary":"tags","title":"Tags"}]